{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/fable-serviceproviderbase/package.json","pict-section-tuigrid.js","node_modules/fable-serviceproviderbase/source/Fable-ServiceProviderBase.js","node_modules/pict-view/package.json","node_modules/pict-view/source/Pict-View.js","source/Pict-Section-TuiGrid-DefaultConfiguration.json","source/Pict-Section-TuiGrid.js","source/Pict-TuiGrid-Editor-Number.js","source/Pict-TuiGrid-Editor-Text.js","source/Pict-TuiGrid-Editors.js","source/Pict-TuiGrid-Headers.js"],"names":["f","exports","module","define","amd","g","window","global","self","PictSectionTuigrid","r","e","n","t","o","i","c","require","u","a","Error","code","p","call","length","libPackage","FableServiceProviderBase","constructor","pFable","pOptions","pServiceHash","isFable","connectFable","fable","_PackageFableServiceProvider","UUID","getUUID","options","concat","Math","floor","random","serviceType","Hash","tmpErrorMessage","console","log","Logging","services","servicesMap","_defineProperty","CoreServiceProviderBase","libFableServiceBase","defaultPictViewSettings","DefaultRenderable","DefaultDestinationAddress","DefaultTemplateRecordAddress","ViewIdentifier","AutoInitialize","AutoInitializeOrdinal","AutoRender","AutoRenderOrdinal","AutoSolveWithApp","AutoSolveOrdinal","CSSHash","CSS","CSSProvider","CSSPriority","Templates","DefaultTemplates","Renderables","Manifests","PictView","tmpOptions","Object","assign","JSON","parse","stringify","_Package","pict","AppData","Bundle","initializeTimestamp","lastSolvedTimestamp","lastRenderedTimestamp","lastMarshalFromViewTimestamp","lastMarshalToViewTimestamp","tmpTemplate","error","Source","TemplateProvider","addTemplate","Template","tmpDefaultTemplate","addDefaultTemplate","Prefix","Postfix","tmpCSSHash","tmpCSSProvider","CSSMap","addCSS","renderables","tmpRenderable","addRenderable","pRenderableHash","pTemplateHash","pDefaultTemplateRecordAddress","pDefaultDestinationAddress","pRenderMethod","tmpRenderMethod","RenderableHash","TemplateHash","ContentDestinationAddress","RenderMethod","LogNoisiness","trace","onBeforeInitialize","onBeforeInitializeAsync","fCallback","onInitialize","onInitializeAsync","initialize","LogControlFlow","onAfterInitialize","getTimeStamp","warn","initializeAsync","tmpAnticipate","instantiateServiceProviderWithoutRegistration","info","anticipate","bind","onAfterInitializeAsync","wait","pError","message","stack","onBeforeRender","pRenderable","pRenderDestinationAddress","pRecord","onBeforeRenderAsync","buildRenderOptions","pTemplateRecordAddress","tmpRenderOptions","Valid","Renderable","DestinationAddress","RecordAddress","Record","DataProvider","getDataByAddress","undefined","assignRenderContent","pContent","ContentAssignment","projectContent","TestAddress","render","tmpRenderableHash","tmpRenderDestinationAddress","tmpRecordAddress","tmpRecord","tmpContent","parseTemplateByHash","onAfterRender","renderAsync","tmpCallback","Name","newAnticipate","fOnBeforeRenderCallback","fAsyncTemplateCallback","fOnAfterRenderCallback","onAfterRenderAsync","renderDefaultAsync","basicRender","basicRenderAsync","onBeforeSolve","onBeforeSolveAsync","onSolve","onSolveAsync","solve","onAfterSolve","solveAsync","onAfterSolveAsync","onBeforeMarshalFromView","onBeforeMarshalFromViewAsync","onMarshalFromView","onMarshalFromViewAsync","marshalFromView","onAfterMarshalFromView","marshalFromViewAsync","onAfterMarshalFromViewAsync","onBeforeMarshalToView","onBeforeMarshalToViewAsync","onMarshalToView","onMarshalToViewAsync","marshalToView","onAfterMarshalToView","marshalToViewAsync","onAfterMarshalToViewAsync","isPictView","libPictViewClass","PictSectionTuiGrid","dateFormatter","initialRenderComplete","customFormatters","_tuiGridPrototype","tuiGrid","customHeaders","customEditors","initializeCustomFormatters","columnSchema","targetElementAddress","gridData","FormatterTwoDigitNumber","pCell","_pCell$decimalPrecisi","tmpCellValue","Number","parseFloat","value","tmpPrecision","decimalPrecision","isNaN","roundPrecise","FormatterCurrencyNumber","_pCell$decimalPrecisi2","DataFormat","formatterDollars","FormatterRoundedNumber","_pCell$decimalPrecisi3","FormatterDate","tmpDate","Dates","dayJS","utc","dateformat","format","connectTuiGridPrototype","pTuiGridPrototype","tui","Grid","preChangeHandler","pChangeData","changeHandler","tmpSolverNecessary","changes","tmpEntity","instance","getValue","rowKey","tmpIDRecord","ColumnsToSolveOnChange","hasOwnProperty","columnName","PictApplication","onAfterInitialRender","TargetElementAddress","GridDataAddress","tmpAddressSpace","Fable","Pict","Options","tmpAddressedData","manifest","getValueByHash","tmpTargetElementSet","getElement","targetElement","TuiColumnSchema","tmpColumn","PictTriggerSolveOnChange","name","formatter","editor","type","listItems","tmpListItems","gridSettings","data","el","columns","usageStatistics","scrollY","GridScrollY","columnOptions","resizable","GridColumnWidthResizable","customConfigureGridSettings","libTuiGrid","on","tmpChangeData","SetGridValue","pCellColumnToBeSet","pCellValueToSet","pLookupValue","pLookupColumn","tmpData","getData","setValue","SetGridValueByRowKey","pRowKey","default_configuration","tuiCustomEditorNumber","pProperties","tmpElement","document","createElement","columnInfo","String","oninput","pElement","target","HTMLInputElement","tmpCastNumber","toFixed","toString","Element","mounted","select","tuiCustomEditorText","placeholder","pattern","minLength","maxLength","required","EditorNumber","EditorText","tuiCustomColumnHeaderNone","CustomColumnHeaderNone"],"mappings":"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","file":"pict-section-tuigrid.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","module.exports={\n    \"name\": \"fable-serviceproviderbase\",\n    \"version\": \"3.0.15\",\n    \"description\": \"Simple base classes for fable services.\",\n    \"main\": \"source/Fable-ServiceProviderBase.js\",\n    \"scripts\": {\n        \"start\": \"node source/Fable-ServiceProviderBase.js\",\n        \"test\": \"npx mocha -u tdd -R spec\",\n        \"tests\": \"npx mocha -u tdd --exit -R spec --grep\",\n        \"coverage\": \"npx nyc --reporter=lcov --reporter=text-lcov npx mocha -- -u tdd -R spec\",\n        \"build\": \"npx quack build\"\n    },\n    \"mocha\": {\n        \"diff\": true,\n        \"extension\": [\n            \"js\"\n        ],\n        \"package\": \"./package.json\",\n        \"reporter\": \"spec\",\n        \"slow\": \"75\",\n        \"timeout\": \"5000\",\n        \"ui\": \"tdd\",\n        \"watch-files\": [\n            \"source/**/*.js\",\n            \"test/**/*.js\"\n        ],\n        \"watch-ignore\": [\n            \"lib/vendor\"\n        ]\n    },\n    \"repository\": {\n        \"type\": \"git\",\n        \"url\": \"https://github.com/stevenvelozo/fable-serviceproviderbase.git\"\n    },\n    \"keywords\": [\n        \"entity\",\n        \"behavior\"\n    ],\n    \"author\": \"Steven Velozo <steven@velozo.com> (http://velozo.com/)\",\n    \"license\": \"MIT\",\n    \"bugs\": {\n        \"url\": \"https://github.com/stevenvelozo/fable-serviceproviderbase/issues\"\n    },\n    \"homepage\": \"https://github.com/stevenvelozo/fable-serviceproviderbase\",\n    \"devDependencies\": {\n        \"fable\": \"^3.0.143\",\n        \"quackage\": \"^1.0.33\"\n    }\n}","(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.PictSectionTuigrid = f()}})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){\nmodule.exports={\n    \"name\": \"fable-serviceproviderbase\",\n    \"version\": \"3.0.15\",\n    \"description\": \"Simple base classes for fable services.\",\n    \"main\": \"source/Fable-ServiceProviderBase.js\",\n    \"scripts\": {\n        \"start\": \"node source/Fable-ServiceProviderBase.js\",\n        \"test\": \"npx mocha -u tdd -R spec\",\n        \"tests\": \"npx mocha -u tdd --exit -R spec --grep\",\n        \"coverage\": \"npx nyc --reporter=lcov --reporter=text-lcov npx mocha -- -u tdd -R spec\",\n        \"build\": \"npx quack build\"\n    },\n    \"mocha\": {\n        \"diff\": true,\n        \"extension\": [\n            \"js\"\n        ],\n        \"package\": \"./package.json\",\n        \"reporter\": \"spec\",\n        \"slow\": \"75\",\n        \"timeout\": \"5000\",\n        \"ui\": \"tdd\",\n        \"watch-files\": [\n            \"source/**/*.js\",\n            \"test/**/*.js\"\n        ],\n        \"watch-ignore\": [\n            \"lib/vendor\"\n        ]\n    },\n    \"repository\": {\n        \"type\": \"git\",\n        \"url\": \"https://github.com/stevenvelozo/fable-serviceproviderbase.git\"\n    },\n    \"keywords\": [\n        \"entity\",\n        \"behavior\"\n    ],\n    \"author\": \"Steven Velozo <steven@velozo.com> (http://velozo.com/)\",\n    \"license\": \"MIT\",\n    \"bugs\": {\n        \"url\": \"https://github.com/stevenvelozo/fable-serviceproviderbase/issues\"\n    },\n    \"homepage\": \"https://github.com/stevenvelozo/fable-serviceproviderbase\",\n    \"devDependencies\": {\n        \"fable\": \"^3.0.143\",\n        \"quackage\": \"^1.0.33\"\n    }\n}\n},{}],2:[function(require,module,exports){\n/**\n* Fable Service Base\n* @author <steven@velozo.com>\n*/\n\nconst libPackage = require('../package.json');\n\nclass FableServiceProviderBase\n{\n\t// The constructor can be used in two ways:\n\t// 1) With a fable, options object and service hash (the options object and service hash are optional)\n\t// 2) With an object or nothing as the first parameter, where it will be treated as the options object\n\tconstructor(pFable, pOptions, pServiceHash)\n\t{\n\t\t// Check if a fable was passed in; connect it if so\n\t\tif ((typeof(pFable) === 'object') && pFable.isFable)\n\t\t{\n\t\t\tthis.connectFable(pFable);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.fable = false;\n\t\t}\n\n\t\t// Initialize the services map if it wasn't passed in\n\t\t/** @type {Object} */\n\t\tthis._PackageFableServiceProvider = libPackage;\n\n\t\t// initialize options and UUID based on whether the fable was passed in or not.\n\t\tif (this.fable)\n\t\t{\n\t\t\tthis.UUID = pFable.getUUID();\n\t\t\tthis.options = (typeof(pOptions) === 'object') ? pOptions\n\t\t\t\t\t\t\t: {};\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// With no fable, check to see if there was an object passed into either of the first two\n\t\t\t// Parameters, and if so, treat it as the options object\n\t\t\tthis.options = ((typeof(pFable) === 'object') && !pFable.isFable) ? pFable\n\t\t\t\t\t\t\t: (typeof(pOptions) === 'object') ? pOptions\n\t\t\t\t\t\t\t: {};\n\t\t\tthis.UUID = `CORE-SVC-${Math.floor((Math.random() * (99999 - 10000)) + 10000)}`\n\t\t}\n\n\t\t// It's expected that the deriving class will set this\n\t\tthis.serviceType = `Unknown-${this.UUID}`;\n\n\t\t// The service hash is used to identify the specific instantiation of the service in the services map\n\t\tthis.Hash = (typeof(pServiceHash) === 'string') ? pServiceHash \n\t\t\t\t\t: (!this.fable && (typeof(pOptions) === 'string')) ? pOptions\n\t\t\t\t\t: `${this.UUID}`;\n\t}\n\n\tconnectFable(pFable)\n\t{\n\t\tif ((typeof(pFable) !== 'object') || (!pFable.isFable))\n\t\t{\n\t\t\tlet tmpErrorMessage = `Fable Service Provider Base: Cannot connect to Fable, invalid Fable object passed in.  The pFable parameter was a [${typeof(pFable)}].}`;\n\t\t\tconsole.log(tmpErrorMessage);\n\t\t\treturn new Error(tmpErrorMessage);\n\t\t}\n\n\t\tif (!this.fable)\n\t\t{\n\t\t\tthis.fable = pFable;\n\t\t}\n\n\t\tif (!this.log)\n\t\t{\n\t\t\tthis.log = this.fable.Logging;\n\t\t}\n\t\tif (!this.services)\n\t\t{\n\t\t\tthis.services = this.fable.services;\n\t\t}\n\n\t\tif (!this.servicesMap)\n\t\t{\n\t\t\tthis.servicesMap = this.fable.servicesMap;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tstatic isFableService = true;\n}\n\nmodule.exports = FableServiceProviderBase;\n\n// This is left here in case we want to go back to having different code/base class for \"core\" services\nmodule.exports.CoreServiceProviderBase = FableServiceProviderBase;\n},{\"../package.json\":1}],3:[function(require,module,exports){\nmodule.exports={\n    \"name\": \"pict-view\",\n    \"version\": \"1.0.61\",\n    \"description\": \"Pict View Base Class\",\n    \"main\": \"source/Pict-View.js\",\n    \"scripts\": {\n        \"test\": \"./node_modules/.bin/mocha -u tdd -R spec\",\n        \"start\": \"node source/Pict-View.js\",\n        \"coverage\": \"./node_modules/.bin/nyc --reporter=lcov --reporter=text-lcov ./node_modules/mocha/bin/_mocha -- -u tdd -R spec\",\n        \"build\": \"npx quack build\",\n        \"docker-dev-build\": \"docker build ./ -f Dockerfile_LUXURYCode -t pict-view-image:local\",\n        \"docker-dev-run\": \"docker run -it -d --name pict-view-dev -p 30001:8080 -p 38086:8086 -v \\\"$PWD/.config:/home/coder/.config\\\"  -v \\\"$PWD:/home/coder/pict-view\\\" -u \\\"$(id -u):$(id -g)\\\" -e \\\"DOCKER_USER=$USER\\\" pict-view-image:local\",\n        \"docker-dev-shell\": \"docker exec -it pict-view-dev /bin/bash\",\n        \"types\": \"tsc -p .\",\n        \"lint\": \"eslint source/**\"\n    },\n    \"types\": \"types/source/Pict-View.d.ts\",\n    \"repository\": {\n        \"type\": \"git\",\n        \"url\": \"git+https://github.com/stevenvelozo/pict-view.git\"\n    },\n    \"author\": \"steven velozo <steven@velozo.com>\",\n    \"license\": \"MIT\",\n    \"bugs\": {\n        \"url\": \"https://github.com/stevenvelozo/pict-view/issues\"\n    },\n    \"homepage\": \"https://github.com/stevenvelozo/pict-view#readme\",\n    \"devDependencies\": {\n        \"@eslint/js\": \"^9.28.0\",\n        \"browser-env\": \"^3.3.0\",\n        \"eslint\": \"^9.28.0\",\n        \"pict\": \"^1.0.272\",\n        \"quackage\": \"^1.0.41\",\n        \"typescript\": \"^5.8.3\"\n    },\n    \"mocha\": {\n        \"diff\": true,\n        \"extension\": [\n            \"js\"\n        ],\n        \"package\": \"./package.json\",\n        \"reporter\": \"spec\",\n        \"slow\": \"75\",\n        \"timeout\": \"5000\",\n        \"ui\": \"tdd\",\n        \"watch-files\": [\n            \"source/**/*.js\",\n            \"test/**/*.js\"\n        ],\n        \"watch-ignore\": [\n            \"lib/vendor\"\n        ]\n    },\n    \"dependencies\": {\n        \"fable\": \"^3.1.11\",\n        \"fable-serviceproviderbase\": \"^3.0.15\"\n    }\n}\n\n},{}],4:[function(require,module,exports){\n\nconst libFableServiceBase = require('fable-serviceproviderbase');\n\nconst libPackage = require('../package.json');\n\nconst defaultPictViewSettings = (\n\t{\n\t\tDefaultRenderable: false,\n\t\tDefaultDestinationAddress: false,\n\t\tDefaultTemplateRecordAddress: false,\n\n\t\tViewIdentifier: false,\n\n\t\t// If this is set to true, when the App initializes this will.\n\t\t// After the App initializes, initialize will be called as soon as it's added.\n\t\tAutoInitialize: true,\n\t\tAutoInitializeOrdinal: 0,\n\n\t\t// If this is set to true, when the App autorenders (on load) this will.\n\t\t// After the App initializes, render will be called as soon as it's added.\n\t\tAutoRender: true,\n\t\tAutoRenderOrdinal: 0,\n\n\t\tAutoSolveWithApp: true,\n\t\tAutoSolveOrdinal: 0,\n\n\t\tCSSHash: false,\n\t\tCSS: false,\n\t\tCSSProvider: false,\n\t\tCSSPriority: 500,\n\n\t\tTemplates: [],\n\n\t\tDefaultTemplates: [],\n\n\t\tRenderables: [],\n\n\t\tManifests: {}\n\t});\n\n/** @typedef {(error?: Error) => void} ErrorCallback */\n/** @typedef {number | boolean} PictTimestamp */\n\n/**\n * @typedef {'replace' | 'append' | 'prepend' | 'append_once'} RenderMethod\n */\n/**\n * @typedef {Object} Renderable\n *\n * @property {string} RenderableHash - A unique hash for the renderable.\n * @property {string} TemplateHash] - The hash of the template to use for rendering this renderable.\n * @property {string} [DefaultTemplateRecordAddress] - The default address for resolving the data record for this renderable.\n * @property {string} [ContentDestinationAddress] - The default address (DOM CSS selector) for rendering the content of this renderable.\n * @property {RenderMethod} [RenderMethod=replace] - The method to use when projecting the renderable to the DOM ('replace', 'append', 'prepend', 'append_once').\n * @property {string} [TestAddress] - The address to use for testing the renderable.\n */\n\n/**\n * Represents a view in the Pict ecosystem.\n */\nclass PictView extends libFableServiceBase\n{\n\t/**\n\t * @param {any} pFable - The Fable object that this service is attached to.\n\t * @param {any} [pOptions] - (optional) The options for this service.\n\t * @param {string} [pServiceHash] - (optional) The hash of the service.\n\t */\n\tconstructor(pFable, pOptions, pServiceHash)\n\t{\n\t\t// Intersect default options, parent constructor, service information\n\t\tlet tmpOptions = Object.assign({}, JSON.parse(JSON.stringify(defaultPictViewSettings)), pOptions);\n\t\tsuper(pFable, tmpOptions, pServiceHash);\n\t\t//FIXME: add types to fable and ancillaries\n\t\t/** @type {any} */\n\t\tthis.fable;\n\t\t/** @type {any} */\n\t\tthis.options;\n\t\t/** @type {String} */\n\t\tthis.UUID;\n\t\t/** @type {String} */\n\t\tthis.Hash;\n\t\t/** @type {any} */\n\t\tthis.log;\n\n\t\tif (!this.options.ViewIdentifier)\n\t\t{\n\t\t\tthis.options.ViewIdentifier = `AutoViewID-${this.fable.getUUID()}`;\n\t\t}\n\t\tthis.serviceType = 'PictView';\n\t\t/** @type {Record<string, any>} */\n\t\tthis._Package = libPackage;\n\t\t// Convenience and consistency naming\n\t\t/** @type {import('pict') & { log: any, instantiateServiceProviderWithoutRegistration: (hash: String) => any }} */\n\t\tthis.pict = this.fable;\n\t\t// Wire in the essential Pict application state\n\t\tthis.AppData = this.pict.AppData;\n\t\tthis.Bundle = this.pict.Bundle;\n\n\t\t/** @type {PictTimestamp} */\n\t\tthis.initializeTimestamp = false;\n\t\t/** @type {PictTimestamp} */\n\t\tthis.lastSolvedTimestamp = false;\n\t\t/** @type {PictTimestamp} */\n\t\tthis.lastRenderedTimestamp = false;\n\t\t/** @type {PictTimestamp} */\n\t\tthis.lastMarshalFromViewTimestamp = false;\n\t\t/** @type {PictTimestamp} */\n\t\tthis.lastMarshalToViewTimestamp = false;\n\n\t\t// Load all templates from the array in the options\n\t\t// Templates are in the form of {Hash:'Some-Template-Hash',Template:'Template content',Source:'TemplateSource'}\n\t\tfor (let i = 0; i < this.options.Templates.length; i++)\n\t\t{\n\t\t\tlet tmpTemplate = this.options.Templates[i];\n\n\t\t\tif (!('Hash' in tmpTemplate) || !('Template' in tmpTemplate))\n\t\t\t{\n\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not load Template ${i} in the options array.`, tmpTemplate);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (!tmpTemplate.Source)\n\t\t\t\t{\n\t\t\t\t\ttmpTemplate.Source = `PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} options object.`;\n\t\t\t\t}\n\t\t\t\tthis.pict.TemplateProvider.addTemplate(tmpTemplate.Hash, tmpTemplate.Template, tmpTemplate.Source);\n\t\t\t}\n\t\t}\n\n\t\t// Load all default templates from the array in the options\n\t\t// Templates are in the form of {Prefix:'',Postfix:'-List-Row',Template:'Template content',Source:'TemplateSourceString'}\n\t\tfor (let i = 0; i < this.options.DefaultTemplates.length; i++)\n\t\t{\n\t\t\tlet tmpDefaultTemplate = this.options.DefaultTemplates[i];\n\n\t\t\tif (!('Postfix' in tmpDefaultTemplate) || !('Template' in tmpDefaultTemplate))\n\t\t\t{\n\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not load Default Template ${i} in the options array.`, tmpDefaultTemplate);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (!tmpDefaultTemplate.Source)\n\t\t\t\t{\n\t\t\t\t\ttmpDefaultTemplate.Source = `PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} options object.`;\n\t\t\t\t}\n\t\t\t\tthis.pict.TemplateProvider.addDefaultTemplate(tmpDefaultTemplate.Prefix, tmpDefaultTemplate.Postfix, tmpDefaultTemplate.Template, tmpDefaultTemplate.Source);\n\t\t\t}\n\t\t}\n\n\t\t// Load the CSS if it's available\n\t\tif (this.options.CSS)\n\t\t{\n\t\t\tlet tmpCSSHash = this.options.CSSHash ? this.options.CSSHash : `View-${this.options.ViewIdentifier}`;\n\t\t\tlet tmpCSSProvider = this.options.CSSProvider ? this.options.CSSProvider : tmpCSSHash;\n\t\t\tthis.pict.CSSMap.addCSS(tmpCSSHash, this.options.CSS, tmpCSSProvider, this.options.CSSPriority);\n\t\t}\n\n\t\t// Load all renderables\n\t\t// Renderables are launchable renderable instructions with templates\n\t\t// They look as such: {Identifier:'ContentEntry', TemplateHash:'Content-Entry-Section-Main', ContentDestinationAddress:'#ContentSection', RecordAddress:'AppData.Content.DefaultText', ManifestTransformation:'ManyfestHash', ManifestDestinationAddress:'AppData.Content.DataToTransformContent'}\n\t\t// The only parts that are necessary are Identifier and Template\n\t\t// A developer can then do render('ContentEntry') and it just kinda works.  Or they can override the ContentDestinationAddress\n\t\t/** @type {Object<String, Renderable>} */\n\t\tthis.renderables = {};\n\t\tfor (let i = 0; i < this.options.Renderables.length; i++)\n\t\t{\n\t\t\t/** @type {Renderable} */\n\t\t\tlet tmpRenderable = this.options.Renderables[i];\n\t\t\tthis.addRenderable(tmpRenderable);\n\t\t}\n\t}\n\n\t/**\n\t * Adds a renderable to the view.\n\t *\n\t * @param {string | Renderable} pRenderableHash - The hash of the renderable, or a renderable object.\n\t * @param {string} [pTemplateHash] - (optional) The hash of the template for the renderable.\n\t * @param {string} [pDefaultTemplateRecordAddress] - (optional) The default data address for the template.\n\t * @param {string} [pDefaultDestinationAddress] - (optional) The default destination address for the renderable.\n\t * @param {RenderMethod} [pRenderMethod=replace] - (optional) The method to use when rendering the renderable (ex. 'replace').\n\t */\n\taddRenderable(pRenderableHash, pTemplateHash, pDefaultTemplateRecordAddress, pDefaultDestinationAddress, pRenderMethod)\n\t{\n\t\t/** @type {Renderable} */\n\t\tlet tmpRenderable;\n\n\t\tif (typeof(pRenderableHash) == 'object')\n\t\t{\n\t\t\t// The developer passed in the renderable as an object.\n\t\t\t// Use theirs instead!\n\t\t\ttmpRenderable = pRenderableHash;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t/** @type {RenderMethod} */\n\t\t\tlet tmpRenderMethod = (typeof(pRenderMethod) !== 'string') ? pRenderMethod : 'replace';\n\t\t\ttmpRenderable = (\n\t\t\t\t{\n\t\t\t\t\tRenderableHash: pRenderableHash,\n\t\t\t\t\tTemplateHash: pTemplateHash,\n\t\t\t\t\tDefaultTemplateRecordAddress: pDefaultTemplateRecordAddress,\n\t\t\t\t\tContentDestinationAddress: pDefaultDestinationAddress,\n\t\t\t\t\tRenderMethod: tmpRenderMethod\n\t\t\t\t});\n\t\t}\n\n\t\tif ((typeof(tmpRenderable.RenderableHash) != 'string') || (typeof(tmpRenderable.TemplateHash) != 'string'))\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not load Renderable; RenderableHash or TemplateHash are invalid.`, tmpRenderable);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (this.pict.LogNoisiness > 0)\n\t\t\t{\n\t\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} adding renderable [${tmpRenderable.RenderableHash}] pointed to template ${tmpRenderable.TemplateHash}.`);\n\t\t\t}\n\n\t\t\tthis.renderables[tmpRenderable.RenderableHash] = tmpRenderable;\n\t\t}\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*                        Code Section: Initialization                        */\n\t/* -------------------------------------------------------------------------- */\n\t/**\n\t * Lifecycle hook that triggers before the view is initialized.\n\t */\n\tonBeforeInitialize()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onBeforeInitialize:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers before the view is initialized (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonBeforeInitializeAsync(fCallback)\n\t{\n\t\tthis.onBeforeInitialize();\n\t\treturn fCallback();\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers when the view is initialized.\n\t */\n\tonInitialize()\n\t{\n\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onInitialize:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers when the view is initialized (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonInitializeAsync(fCallback)\n\t{\n\t\tthis.onInitialize();\n\t\treturn fCallback();\n\t}\n\n\t/**\n\t * Performs view initialization.\n\t */\n\tinitialize()\n\t{\n\t\tif (this.pict.LogControlFlow)\n\t\t{\n\t\t\tthis.log.trace(`PICT-ControlFlow VIEW [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} initialize:`);\n\t\t}\n\n\t\tif (!this.initializeTimestamp)\n\t\t{\n\t\t\tthis.onBeforeInitialize();\n\t\t\tthis.onInitialize();\n\t\t\tthis.onAfterInitialize();\n\t\t\tthis.initializeTimestamp = this.pict.log.getTimeStamp();\n\t\t\treturn true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.log.warn(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} initialize called but initialization is already completed.  Aborting.`);\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * Performs view initialization (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tinitializeAsync(fCallback)\n\t{\n\t\tif (this.pict.LogControlFlow)\n\t\t{\n\t\t\tthis.log.trace(`PICT-ControlFlow VIEW [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} initializeAsync:`);\n\t\t}\n\n\t\tif (!this.initializeTimestamp)\n\t\t{\n\t\t\tlet tmpAnticipate = this.pict.instantiateServiceProviderWithoutRegistration('Anticipate');\n\n\t\t\tif (this.pict.LogNoisiness > 0)\n\t\t\t{\n\t\t\t\tthis.log.info(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} beginning initialization...`);\n\t\t\t}\n\n\t\t\ttmpAnticipate.anticipate(this.onBeforeInitializeAsync.bind(this));\n\t\t\ttmpAnticipate.anticipate(this.onInitializeAsync.bind(this));\n\t\t\ttmpAnticipate.anticipate(this.onAfterInitializeAsync.bind(this));\n\n\t\t\ttmpAnticipate.wait(\n\t\t\t\t/** @param {Error} pError */\n\t\t\t\t(pError) =>\n\t\t\t\t{\n\t\t\t\t\tif (pError)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} initialization failed: ${pError.message || pError}`, { stack: pError.stack });\n\t\t\t\t\t}\n\t\t\t\t\tthis.initializeTimestamp = this.pict.log.getTimeStamp();\n\t\t\t\t\tif (this.pict.LogNoisiness > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.log.info(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} initialization complete.`);\n\t\t\t\t\t}\n\t\t\t\t\treturn fCallback();\n\t\t\t\t});\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.log.warn(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} async initialize called but initialization is already completed.  Aborting.`);\n\t\t\t// TODO: Should this be an error?\n\t\t\treturn fCallback();\n\t\t}\n\t}\n\n\tonAfterInitialize()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onAfterInitialize:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers after the view is initialized (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonAfterInitializeAsync(fCallback)\n\t{\n\t\tthis.onAfterInitialize();\n\t\treturn fCallback();\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*                            Code Section: Render                            */\n\t/* -------------------------------------------------------------------------- */\n\t/**\n\t * Lifecycle hook that triggers before the view is rendered.\n\t *\n\t * @param {Renderable} pRenderable - The renderable that will be rendered.\n\t * @param {string} pRenderDestinationAddress - The address where the renderable will be rendered.\n\t * @param {any} pRecord - The record (data) that will be used to render the renderable.\n\t */\n\tonBeforeRender(pRenderable, pRenderDestinationAddress, pRecord)\n\t{\n\t\t// Overload this to mess with stuff before the content gets generated from the template\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onBeforeRender:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers before the view is rendered (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonBeforeRenderAsync(fCallback)\n\t{\n\t\treturn fCallback();\n\t}\n\n\t/**\n\t * Builds the render options for a renderable.\n\t *\n\t * For DRY purposes on the three flavors of render.\n\t *\n\t * @param {string|ErrorCallback} [pRenderableHash] - The hash of the renderable to render.\n\t * @param {string|ErrorCallback} [pRenderDestinationAddress] - The address where the renderable will be rendered.\n\t * @param {string|object|ErrorCallback} [pTemplateRecordAddress] - The address of (or actual obejct) where the data for the template is stored.\n\t */\n\tbuildRenderOptions(pRenderableHash, pRenderDestinationAddress, pTemplateRecordAddress)\n\t{\n\t\tlet tmpRenderOptions = {Valid: true};\n\t\ttmpRenderOptions.RenderableHash = (typeof (pRenderableHash) === 'string') ? pRenderableHash :\n\t\t\t\t\t\t\t\t(typeof (this.options.DefaultRenderable) == 'string') ?\n\t\t\t\t\t\t\t\tthis.options.DefaultRenderable : false;\n\t\tif (!tmpRenderOptions.RenderableHash)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not find a suitable RenderableHash ${tmpRenderOptions.RenderableHash} (param ${pRenderableHash}because it is not a valid renderable.`);\n\t\t\ttmpRenderOptions.Valid = false;\n\t\t}\n\n\t\ttmpRenderOptions.Renderable = this.renderables[tmpRenderOptions.RenderableHash];\n\t\tif (!tmpRenderOptions.Renderable)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderOptions.RenderableHash} (param ${pRenderableHash}) because it does not exist.`);\n\t\t\ttmpRenderOptions.Valid = false;\n\t\t}\n\n\t\ttmpRenderOptions.DestinationAddress = (typeof (pRenderDestinationAddress) === 'string') ? pRenderDestinationAddress :\n\t\t\t(typeof (tmpRenderOptions.Renderable.ContentDestinationAddress) === 'string') ? tmpRenderOptions.Renderable.ContentDestinationAddress :\n\t\t\t\t(typeof (this.options.DefaultDestinationAddress) === 'string') ? this.options.DefaultDestinationAddress : false;\n\t\tif (!tmpRenderOptions.DestinationAddress)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderOptions.RenderableHash} (param ${pRenderableHash}) because it does not have a valid destination address (param ${pRenderDestinationAddress}).`);\n\t\t\ttmpRenderOptions.Valid = false;\n\t\t}\n\n\t\tif (typeof(pTemplateRecordAddress) === 'object')\n\t\t{\n\t\t\ttmpRenderOptions.RecordAddress = 'Passed in as object';\n\t\t\ttmpRenderOptions.Record = pTemplateRecordAddress;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttmpRenderOptions.RecordAddress = (typeof (pTemplateRecordAddress) === 'string') ? pTemplateRecordAddress :\n\t\t\t\t(typeof (tmpRenderOptions.Renderable.DefaultTemplateRecordAddress) === 'string') ? tmpRenderOptions.Renderable.DefaultTemplateRecordAddress :\n\t\t\t\t(typeof (this.options.DefaultTemplateRecordAddress) === 'string') ? this.options.DefaultTemplateRecordAddress : false;\n\t\t\ttmpRenderOptions.Record = (typeof (tmpRenderOptions.RecordAddress) === 'string') ? this.pict.DataProvider.getDataByAddress(tmpRenderOptions.RecordAddress) : undefined;\n\t\t}\n\n\t\treturn tmpRenderOptions;\n\t}\n\n\t/**\n\t * Assigns the content to the destination address.\n\t *\n\t * For DRY purposes on the three flavors of render.\n\t *\n\t * @param {Renderable} pRenderable - The renderable to render.\n\t * @param {string} pRenderDestinationAddress - The address where the renderable will be rendered.\n\t * @param {string} pContent - The content to render.\n\t * @returns {boolean} - Returns true if the content was assigned successfully.\n\t * @memberof PictView\n\t */\n\tassignRenderContent(pRenderable, pRenderDestinationAddress, pContent)\n\t{\n\t\treturn this.pict.ContentAssignment.projectContent(pRenderable.RenderMethod, pRenderDestinationAddress, pContent, pRenderable.TestAddress);\n\t}\n\n\t/**\n\t * Render a renderable from this view.\n\t *\n\t * @param {string} [pRenderable] - The hash of the renderable to render.\n\t * @param {string} [pRenderDestinationAddress] - The address where the renderable will be rendered.\n\t * @param {string|object} [pTemplateRecordAddress] - The address where the data for the template is stored.\n\t * @return {boolean}\n\t */\n\trender(pRenderable, pRenderDestinationAddress, pTemplateRecordAddress)\n\t{\n\t\tlet tmpRenderableHash = (typeof (pRenderable) === 'string') ? pRenderable :\n\t\t\t(typeof (this.options.DefaultRenderable) == 'string') ? this.options.DefaultRenderable : false;\n\t\tif (!tmpRenderableHash)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderable}) because it is not a valid renderable.`);\n\t\t\treturn false;\n\t\t}\n\n\t\tlet tmpRenderable;\n\t\tif (tmpRenderableHash == '__Virtual')\n\t\t{\n\t\t\ttmpRenderable = {\n\t\t\t\t\tRenderableHash: '__Virtual',\n\t\t\t\t\tTemplateHash: this.renderables[this.options.DefaultRenderable].TemplateHash,\n\t\t\t\t\tDestinationAddress: pRenderDestinationAddress,\n\t\t\t\t\tRenderMethod: 'virtual-assignment'\n\t\t\t\t};\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttmpRenderable = this.renderables[tmpRenderableHash];\n\t\t}\n\n\t\tif (!tmpRenderable)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderable}) because it does not exist.`);\n\t\t\treturn false;\n\t\t}\n\n\t\tlet tmpRenderDestinationAddress = (typeof (pRenderDestinationAddress) === 'string') ? pRenderDestinationAddress :\n\t\t\t(typeof (tmpRenderable.ContentDestinationAddress) === 'string') ? tmpRenderable.ContentDestinationAddress :\n\t\t\t\t(typeof (this.options.DefaultDestinationAddress) === 'string') ? this.options.DefaultDestinationAddress : false;\n\n\t\tif (!tmpRenderDestinationAddress)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderable}) because it does not have a valid destination address.`);\n\t\t\treturn false;\n\t\t}\n\n\t\tlet tmpRecordAddress;\n\t\tlet tmpRecord;\n\n\t\tif (typeof(pTemplateRecordAddress) === 'object')\n\t\t{\n\t\t\ttmpRecord = pTemplateRecordAddress;\n\t\t\ttmpRecordAddress = 'Passed in as object';\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttmpRecordAddress = (typeof (pTemplateRecordAddress) === 'string') ? pTemplateRecordAddress :\n\t\t\t\t(typeof (tmpRenderable.DefaultTemplateRecordAddress) === 'string') ? tmpRenderable.DefaultTemplateRecordAddress :\n\t\t\t\t\t(typeof (this.options.DefaultTemplateRecordAddress) === 'string') ? this.options.DefaultTemplateRecordAddress : false;\n\n\t\t\ttmpRecord = (typeof (tmpRecordAddress) === 'string') ? this.pict.DataProvider.getDataByAddress(tmpRecordAddress) : undefined;\n\t\t}\n\n\t\t// Execute the developer-overridable pre-render behavior\n\t\tthis.onBeforeRender(tmpRenderable, tmpRenderDestinationAddress, tmpRecord);\n\n\t\tif (this.pict.LogControlFlow)\n\t\t{\n\t\t\tthis.log.trace(`PICT-ControlFlow VIEW [${this.UUID}]::[${this.Hash}] Renderable[${tmpRenderableHash}] Destination[${tmpRenderDestinationAddress}] TemplateRecordAddress[${tmpRecordAddress}] render:`);\n\t\t}\n\t\tif (this.pict.LogNoisiness > 0)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} Beginning Render of Renderable[${tmpRenderableHash}] to Destination [${tmpRenderDestinationAddress}]...`);\n\t\t}\n\t\t// Generate the content output from the template and data\n\t\tlet tmpContent = this.pict.parseTemplateByHash(tmpRenderable.TemplateHash, tmpRecord, null, [this]);\n\n\t\tif (this.pict.LogNoisiness > 0)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} Assigning Renderable[${tmpRenderableHash}] content length ${tmpContent.length} to Destination [${tmpRenderDestinationAddress}] using render method [${tmpRenderable.RenderMethod}].`);\n\t\t}\n\n\t\t// Assign the content to the destination address\n\t\tthis.pict.ContentAssignment.projectContent(tmpRenderable.RenderMethod, tmpRenderDestinationAddress, tmpContent, tmpRenderable.TestAddress);\n\n\t\t// Execute the developer-overridable post-render behavior\n\t\tthis.onAfterRender(tmpRenderable, tmpRenderDestinationAddress, tmpRecord, tmpContent);\n\n\t\tthis.lastRenderedTimestamp = this.pict.log.getTimeStamp();\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Render a renderable from this view.\n\t *\n\t * @param {string|ErrorCallback} [pRenderableHash] - The hash of the renderable to render.\n\t * @param {string|ErrorCallback} [pRenderDestinationAddress] - The address where the renderable will be rendered.\n\t * @param {string|object|ErrorCallback} [pTemplateRecordAddress] - The address where the data for the template is stored.\n\t * @param {ErrorCallback} [fCallback] - The callback to call when the async operation is complete.\n\t *\n\t * @return {void}\n\t */\n\trenderAsync(pRenderableHash, pRenderDestinationAddress, pTemplateRecordAddress, fCallback)\n\t{\n\t\tlet tmpRenderableHash = (typeof (pRenderableHash) === 'string') ? pRenderableHash :\n\t\t\t(typeof (this.options.DefaultRenderable) == 'string') ? this.options.DefaultRenderable : false;\n\n\t\t// Allow the callback to be passed in as the last parameter no matter what\n\t\t/** @type {ErrorCallback} */\n\t\tlet tmpCallback = (typeof(fCallback) === 'function') ? fCallback :\n\t\t\t\t\t\t\t(typeof(pTemplateRecordAddress) === 'function') ? pTemplateRecordAddress :\n\t\t\t\t\t\t\t(typeof(pRenderDestinationAddress) === 'function') ? pRenderDestinationAddress :\n\t\t\t\t\t\t\t(typeof(pRenderableHash) === 'function') ? pRenderableHash :\n\t\t\t\t\t\t\tnull;\n\n\t\tif (!tmpCallback)\n\t\t{\n\t\t\tthis.log.warn(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.Name} renderAsync was called without a valid callback.  A callback will be generated but this could lead to race conditions.`);\n\t\t\ttmpCallback = (pError) =>\n\t\t\t\t{\n\t\t\t\t\tif (pError)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.Name} renderAsync Auto Callback Error: ${pError}`, pError);\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t}\n\n\t\tif (!tmpRenderableHash)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not asynchronously render ${tmpRenderableHash} (param ${pRenderableHash}because it is not a valid renderable.`);\n\t\t\treturn tmpCallback(new Error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not asynchronously render ${tmpRenderableHash} (param ${pRenderableHash}because it is not a valid renderable.`));\n\t\t}\n\n\t\tlet tmpRenderable;\n\t\tif (tmpRenderableHash == '__Virtual')\n\t\t{\n\t\t\ttmpRenderable = {\n\t\t\t\t\tRenderableHash: '__Virtual',\n\t\t\t\t\tTemplateHash: this.renderables[this.options.DefaultRenderable].TemplateHash,\n\t\t\t\t\tDestinationAddress: pRenderDestinationAddress,\n\t\t\t\t\tRenderMethod: 'virtual-assignment'\n\t\t\t\t};\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttmpRenderable = this.renderables[tmpRenderableHash];\n\t\t}\n\n\t\tif (!tmpRenderable)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderableHash}) because it does not exist.`);\n\t\t\treturn tmpCallback(new Error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderableHash}) because it does not exist.`));\n\t\t}\n\n\t\tlet tmpRenderDestinationAddress = (typeof (pRenderDestinationAddress) === 'string') ? pRenderDestinationAddress :\n\t\t\t(typeof (tmpRenderable.ContentDestinationAddress) === 'string') ? tmpRenderable.ContentDestinationAddress :\n\t\t\t\t(typeof (this.options.DefaultDestinationAddress) === 'string') ? this.options.DefaultDestinationAddress : false;\n\n\t\tif (!tmpRenderDestinationAddress)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderableHash}) because it does not have a valid destination address.`);\n\t\t\treturn tmpCallback(new Error(`Could not render ${tmpRenderableHash}`));\n\t\t}\n\n\t\tlet tmpRecordAddress;\n\t\tlet tmpRecord;\n\n\t\tif (typeof(pTemplateRecordAddress) === 'object')\n\t\t{\n\t\t\ttmpRecord = pTemplateRecordAddress;\n\t\t\ttmpRecordAddress = 'Passed in as object';\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttmpRecordAddress = (typeof (pTemplateRecordAddress) === 'string') ? pTemplateRecordAddress :\n\t\t\t\t(typeof (tmpRenderable.DefaultTemplateRecordAddress) === 'string') ? tmpRenderable.DefaultTemplateRecordAddress :\n\t\t\t\t\t(typeof (this.options.DefaultTemplateRecordAddress) === 'string') ? this.options.DefaultTemplateRecordAddress : false;\n\n\t\t\ttmpRecord = (typeof (tmpRecordAddress) === 'string') ? this.pict.DataProvider.getDataByAddress(tmpRecordAddress) : undefined;\n\t\t}\n\n\t\tif (this.pict.LogControlFlow)\n\t\t{\n\t\t\tthis.log.trace(`PICT-ControlFlow VIEW [${this.UUID}]::[${this.Hash}] Renderable[${tmpRenderableHash}] Destination[${tmpRenderDestinationAddress}] TemplateRecordAddress[${tmpRecordAddress}] renderAsync:`);\n\t\t}\n\t\tif (this.pict.LogNoisiness > 2)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} Beginning Asynchronous Render (callback-style)...`);\n\t\t}\n\n\t\tlet tmpAnticipate = this.fable.newAnticipate();\n\n\t\ttmpAnticipate.anticipate(\n\t\t\t(fOnBeforeRenderCallback) =>\n\t\t\t{\n\t\t\t\tthis.onBeforeRender(tmpRenderable, tmpRenderDestinationAddress, tmpRecord);\n\t\t\t\tthis.onBeforeRenderAsync(fOnBeforeRenderCallback);\n\t\t\t});\n\n\t\tlet tmpContent;\n\t\ttmpAnticipate.anticipate(\n\t\t\t(fAsyncTemplateCallback) =>\n\t\t\t{\n\t\t\t\t// Render the template (asynchronously)\n\t\t\t\tthis.pict.parseTemplateByHash(tmpRenderable.TemplateHash, tmpRecord,\n\t\t\t\t\t(pError, pContent) =>\n\t\t\t\t\t{\n\t\t\t\t\t\tif (pError)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render (asynchronously) ${tmpRenderableHash} (param ${pRenderableHash}) because it did not parse the template.`, pError);\n\t\t\t\t\t\t\treturn fAsyncTemplateCallback(pError);\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttmpContent = pContent;\n\n\t\t\t\t\t\tif (this.pict.LogNoisiness > 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} Assigning Renderable[${tmpRenderableHash}] content length ${pContent.length} to Destination [${tmpRenderDestinationAddress}] using Async render method ${tmpRenderable.RenderMethod}.`);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthis.pict.ContentAssignment.projectContent(tmpRenderable.RenderMethod, tmpRenderDestinationAddress, pContent, tmpRenderable.TestAddress);\n\n\t\t\t\t\t\t// Execute the developer-overridable asynchronous post-render behavior\n\t\t\t\t\t\tthis.lastRenderedTimestamp = this.pict.log.getTimeStamp();\n\t\t\t\t\t\treturn fAsyncTemplateCallback();\n\t\t\t\t\t}, [this]);\n\t\t\t});\n\n\t\ttmpAnticipate.anticipate(\n\t\t\t(fOnAfterRenderCallback) =>\n\t\t\t{\n\t\t\t\tthis.onAfterRender(tmpRenderable, tmpRenderDestinationAddress, tmpRecord, tmpContent);\n\t\t\t\tthis.onAfterRenderAsync(fOnAfterRenderCallback);\n\t\t\t});\n\n\t\ttmpAnticipate.wait(tmpCallback);\n\t}\n\n\t/**\n\t * Renders the default renderable.\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\trenderDefaultAsync(fCallback)\n\t{\n\t\t// Render the default renderable\n\t\tthis.renderAsync(fCallback);\n\t}\n\n\t/**\n\t * @param {string} [pRenderableHash] - The hash of the renderable to render.\n\t * @param {string} [pRenderDestinationAddress] - The address where the renderable will be rendered.\n\t * @param {string|object} [pTemplateRecordAddress] - The address of (or actual obejct) where the data for the template is stored.\n\t */\n\tbasicRender(pRenderableHash, pRenderDestinationAddress, pTemplateRecordAddress)\n\t{\n\t\tlet tmpRenderOptions = this.buildRenderOptions(pRenderableHash, pRenderDestinationAddress, pTemplateRecordAddress);\n\t\tif (tmpRenderOptions.Valid)\n\t\t{\n\t\t\tthis.assignRenderContent(tmpRenderOptions.Renderable, tmpRenderOptions.DestinationAddress, this.pict.parseTemplateByHash(tmpRenderOptions.Renderable.TemplateHash, tmpRenderOptions.Record, null, [this]));\n\t\t\treturn true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not perform a basic render of ${tmpRenderOptions.RenderableHash} because it is not valid.`);\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * @param {string|ErrorCallback} [pRenderableHash] - The hash of the renderable to render.\n\t * @param {string|ErrorCallback} [pRenderDestinationAddress] - The address where the renderable will be rendered.\n\t * @param {string|Object|ErrorCallback} [pTemplateRecordAddress] - The address of (or actual obejct) where the data for the template is stored.\n\t * @param {ErrorCallback} [fCallback] - The callback to call when the async operation is complete.\n\t */\n\tbasicRenderAsync(pRenderableHash, pRenderDestinationAddress, pTemplateRecordAddress, fCallback)\n\t{\n\t\t// Allow the callback to be passed in as the last parameter no matter what\n\t\t/** @type {ErrorCallback} */\n\t\tlet tmpCallback = (typeof(fCallback) === 'function') ? fCallback :\n\t\t\t\t\t\t\t(typeof(pTemplateRecordAddress) === 'function') ? pTemplateRecordAddress :\n\t\t\t\t\t\t\t(typeof(pRenderDestinationAddress) === 'function') ? pRenderDestinationAddress :\n\t\t\t\t\t\t\t(typeof(pRenderableHash) === 'function') ? pRenderableHash :\n\t\t\t\t\t\t\tnull;\n\t\tif (!tmpCallback)\n\t\t{\n\t\t\tthis.log.warn(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.Name} basicRenderAsync was called without a valid callback.  A callback will be generated but this could lead to race conditions.`);\n\t\t\ttmpCallback = (pError) =>\n\t\t\t\t{\n\t\t\t\t\tif (pError)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.Name} basicRenderAsync Auto Callback Error: ${pError}`, pError);\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t}\n\n\t\tconst tmpRenderOptions = this.buildRenderOptions(pRenderableHash, pRenderDestinationAddress, pTemplateRecordAddress);\n\t\tif (tmpRenderOptions.Valid)\n\t\t{\n\t\t\tthis.pict.parseTemplateByHash(tmpRenderOptions.Renderable.TemplateHash, tmpRenderOptions.Record,\n\t\t\t\t/**\n\t\t\t\t * @param {Error} [pError] - The error that occurred during template parsing.\n\t\t\t\t * @param {string} [pContent] - The content that was rendered from the template.\n\t\t\t\t */\n\t\t\t\t(pError, pContent) =>\n\t\t\t\t{\n\t\t\t\t\tif (pError)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render (asynchronously) ${tmpRenderOptions.RenderableHash} because it did not parse the template.`, pError);\n\t\t\t\t\t\treturn tmpCallback(pError);\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.assignRenderContent(tmpRenderOptions.Renderable, tmpRenderOptions.DestinationAddress, pContent);\n\t\t\t\t\treturn tmpCallback();\n\t\t\t\t}, [this]);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlet tmpErrorMessage = `PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not perform a basic render of ${tmpRenderOptions.RenderableHash} because it is not valid.`;\n\t\t\tthis.log.error(tmpErrorMessage);\n\t\t\treturn tmpCallback(new Error(tmpErrorMessage));\n\t\t}\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers after the view is rendered.\n\t *\n\t * @param {Renderable} pRenderable - The renderable that was rendered.\n\t * @param {string} pRenderDestinationAddress - The address where the renderable was rendered.\n\t * @param {any} pRecord - The record (data) that was used by the renderable.\n\t * @param {string} pContent - The content that was rendered.\n\t */\n\tonAfterRender(pRenderable, pRenderDestinationAddress, pRecord, pContent)\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onAfterRender:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers after the view is rendered (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonAfterRenderAsync(fCallback)\n\t{\n\t\treturn fCallback();\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*                            Code Section: Solver                            */\n\t/* -------------------------------------------------------------------------- */\n\t/**\n\t * Lifecycle hook that triggers before the view is solved.\n\t */\n\tonBeforeSolve()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onBeforeSolve:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers before the view is solved (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonBeforeSolveAsync(fCallback)\n\t{\n\t\tthis.onBeforeSolve();\n\t\treturn fCallback();\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers when the view is solved.\n\t */\n\tonSolve()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onSolve:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers when the view is solved (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonSolveAsync(fCallback)\n\t{\n\t\tthis.onSolve();\n\t\treturn fCallback();\n\t}\n\n\t/**\n\t * Performs view solving and triggers lifecycle hooks.\n\t *\n\t * @return {boolean} - True if the view was solved successfully, false otherwise.\n\t */\n\tsolve()\n\t{\n\t\tif (this.pict.LogNoisiness > 2)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} executing solve() function...`);\n\t\t}\n\t\tthis.onBeforeSolve();\n\t\tthis.onSolve();\n\t\tthis.onAfterSolve();\n\t\tthis.lastSolvedTimestamp = this.pict.log.getTimeStamp();\n\t\treturn true;\n\t}\n\n\t/**\n\t * Performs view solving and triggers lifecycle hooks (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tsolveAsync(fCallback)\n\t{\n\t\tlet tmpAnticipate = this.pict.instantiateServiceProviderWithoutRegistration('Anticipate');\n\n\t\t/** @type {ErrorCallback} */\n\t\tlet tmpCallback = (typeof(fCallback) === 'function') ? fCallback : null;\n\t\tif (!tmpCallback)\n\t\t{\n\t\t\tthis.log.warn(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.Name} solveAsync was called without a valid callback.  A callback will be generated but this could lead to race conditions.`);\n\t\t\ttmpCallback = (pError) =>\n\t\t\t\t{\n\t\t\t\t\tif (pError)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.Name} solveAsync Auto Callback Error: ${pError}`, pError);\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t}\n\n\t\ttmpAnticipate.anticipate(this.onBeforeSolveAsync.bind(this));\n\t\ttmpAnticipate.anticipate(this.onSolveAsync.bind(this));\n\t\ttmpAnticipate.anticipate(this.onAfterSolveAsync.bind(this));\n\n\t\ttmpAnticipate.wait(\n\t\t\t(pError) =>\n\t\t\t{\n\t\t\t\tif (this.pict.LogNoisiness > 2)\n\t\t\t\t{\n\t\t\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} solveAsync() complete.`);\n\t\t\t\t}\n\t\t\t\tthis.lastSolvedTimestamp = this.pict.log.getTimeStamp();\n\t\t\t\treturn tmpCallback(pError);\n\t\t\t});\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers after the view is solved.\n\t */\n\tonAfterSolve()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onAfterSolve:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers after the view is solved (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonAfterSolveAsync(fCallback)\n\t{\n\t\tthis.onAfterSolve();\n\t\treturn fCallback();\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*                     Code Section: Marshal From View                        */\n\t/* -------------------------------------------------------------------------- */\n\t/**\n\t * Lifecycle hook that triggers before data is marshaled from the view.\n\t *\n\t * @return {boolean} - True if the operation was successful, false otherwise.\n\t */\n\tonBeforeMarshalFromView()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onBeforeMarshalFromView:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers before data is marshaled from the view (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonBeforeMarshalFromViewAsync(fCallback)\n\t{\n\t\tthis.onBeforeMarshalFromView();\n\t\treturn fCallback();\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers when data is marshaled from the view.\n\t */\n\tonMarshalFromView()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onMarshalFromView:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers when data is marshaled from the view (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonMarshalFromViewAsync(fCallback)\n\t{\n\n\t\tthis.onMarshalFromView();\n\t\treturn fCallback();\n\t}\n\n\t/**\n\t * Marshals data from the view.\n\t *\n\t * @return {boolean} - True if the operation was successful, false otherwise.\n\t */\n\tmarshalFromView()\n\t{\n\t\tif (this.pict.LogNoisiness > 2)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} executing solve() function...`);\n\t\t}\n\t\tthis.onBeforeMarshalFromView();\n\t\tthis.onMarshalFromView();\n\t\tthis.onAfterMarshalFromView();\n\t\tthis.lastMarshalFromViewTimestamp = this.pict.log.getTimeStamp();\n\t\treturn true;\n\t}\n\n\t/**\n\t * Marshals data from the view (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tmarshalFromViewAsync(fCallback)\n\t{\n\t\tlet tmpAnticipate = this.pict.instantiateServiceProviderWithoutRegistration('Anticipate');\n\n\t\t/** @type {ErrorCallback} */\n\t\tlet tmpCallback = (typeof(fCallback) === 'function') ? fCallback : null;\n\t\tif (!tmpCallback)\n\t\t{\n\t\t\tthis.log.warn(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.Name} marshalFromViewAsync was called without a valid callback.  A callback will be generated but this could lead to race conditions.`);\n\t\t\ttmpCallback = (pError) =>\n\t\t\t\t{\n\t\t\t\t\tif (pError)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.Name} marshalFromViewAsync Auto Callback Error: ${pError}`, pError);\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t}\n\n\t\ttmpAnticipate.anticipate(this.onBeforeMarshalFromViewAsync.bind(this));\n\t\ttmpAnticipate.anticipate(this.onMarshalFromViewAsync.bind(this));\n\t\ttmpAnticipate.anticipate(this.onAfterMarshalFromViewAsync.bind(this));\n\n\t\ttmpAnticipate.wait(\n\t\t\t(pError) =>\n\t\t\t{\n\t\t\t\tif (this.pict.LogNoisiness > 2)\n\t\t\t\t{\n\t\t\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} marshalFromViewAsync() complete.`);\n\t\t\t\t}\n\t\t\t\tthis.lastMarshalFromViewTimestamp = this.pict.log.getTimeStamp();\n\t\t\t\treturn tmpCallback(pError);\n\t\t\t});\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers after data is marshaled from the view.\n\t */\n\tonAfterMarshalFromView()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onAfterMarshalFromView:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers after data is marshaled from the view (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonAfterMarshalFromViewAsync(fCallback)\n\t{\n\t\tthis.onAfterMarshalFromView();\n\t\treturn fCallback();\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*                     Code Section: Marshal To View                          */\n\t/* -------------------------------------------------------------------------- */\n\t/**\n\t * Lifecycle hook that triggers before data is marshaled into the view.\n\t */\n\tonBeforeMarshalToView()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onBeforeMarshalToView:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers before data is marshaled into the view (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonBeforeMarshalToViewAsync(fCallback)\n\t{\n\t\tthis.onBeforeMarshalToView();\n\t\treturn fCallback();\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers when data is marshaled into the view.\n\t */\n\tonMarshalToView()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onMarshalToView:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers when data is marshaled into the view (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonMarshalToViewAsync(fCallback)\n\t{\n\t\tthis.onMarshalToView();\n\t\treturn fCallback();\n\t}\n\n\t/**\n\t * Marshals data into the view.\n\t *\n\t * @return {boolean} - True if the operation was successful, false otherwise.\n\t */\n\tmarshalToView()\n\t{\n\t\tif (this.pict.LogNoisiness > 2)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} executing solve() function...`);\n\t\t}\n\t\tthis.onBeforeMarshalToView();\n\t\tthis.onMarshalToView();\n\t\tthis.onAfterMarshalToView();\n\t\tthis.lastMarshalToViewTimestamp = this.pict.log.getTimeStamp();\n\t\treturn true;\n\t}\n\n\t/**\n\t * Marshals data into the view (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tmarshalToViewAsync(fCallback)\n\t{\n\t\tlet tmpAnticipate = this.pict.instantiateServiceProviderWithoutRegistration('Anticipate');\n\n\n\t\t/** @type {ErrorCallback} */\n\t\tlet tmpCallback = (typeof(fCallback) === 'function') ? fCallback : null;\n\t\tif (!tmpCallback)\n\t\t{\n\t\t\tthis.log.warn(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.Name} marshalToViewAsync was called without a valid callback.  A callback will be generated but this could lead to race conditions.`);\n\t\t\ttmpCallback = (pError) =>\n\t\t\t\t{\n\t\t\t\t\tif (pError)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.Name} marshalToViewAsync Auto Callback Error: ${pError}`, pError);\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t}\n\t\ttmpAnticipate.anticipate(this.onBeforeMarshalToViewAsync.bind(this));\n\t\ttmpAnticipate.anticipate(this.onMarshalToViewAsync.bind(this));\n\t\ttmpAnticipate.anticipate(this.onAfterMarshalToViewAsync.bind(this));\n\n\t\ttmpAnticipate.wait(\n\t\t\t(pError) =>\n\t\t\t{\n\t\t\t\tif (this.pict.LogNoisiness > 2)\n\t\t\t\t{\n\t\t\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} marshalToViewAsync() complete.`);\n\t\t\t\t}\n\t\t\t\tthis.lastMarshalToViewTimestamp = this.pict.log.getTimeStamp();\n\t\t\t\treturn tmpCallback(pError);\n\t\t\t});\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers after data is marshaled into the view.\n\t */\n\tonAfterMarshalToView()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onAfterMarshalToView:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers after data is marshaled into the view (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonAfterMarshalToViewAsync(fCallback)\n\t{\n\t\tthis.onAfterMarshalToView();\n\t\treturn fCallback();\n\t}\n\n\t/** @return {boolean} - True if the object is a PictView. */\n\tget isPictView()\n\t{\n\t\treturn true;\n\t}\n}\n\nmodule.exports = PictView;\n\n},{\"../package.json\":3,\"fable-serviceproviderbase\":2}],5:[function(require,module,exports){\nmodule.exports={\n\t\"RenderOnLoad\": true,\n\n\t\"GridWidth\": \"auto\",\n\t\"GridRowHeight\": 40,\n\n\t\"GridBodyHeight\": \"auto\",\n\t\"GridBodyMinHeight\": 130,\n\n\t\"GridColumnMinWidth\": 50,\n\t\"GridColumnWidthResizable\": true,\n\t\"GridColumnHeightResizable\": false,\n\n\t\"GridColumnFrozenCount\": 0,\n\t\"GridColumnFrozenBorderWidth\": 3,\n\n\t\"GridScrollX\": true,\n\t\"GridScrollY\": true,\n\n\t\"GridShowDummyRows\": false,\n\t\"GridDraggableRows\": false,\n\n\t\"GridSelectionUnit\": \"cell\",\n\n\t\"DefaultRenderable\": \"TuiGrid-Wrap\",\n\t\"DefaultDestinationAddress\": \"#TuiGrid-Container-Div\",\n\n\t\"Templates\": [\n\t\t{\n\t\t\t\"Hash\": \"TuiGrid-Container\",\n\t\t\t\"Template\": \"<!-- TuiGrid-Container Rendering Soon -->\"\n\t\t}\n\t],\n\n\t\"Renderables\": [\n\t\t{\n\t\t\t\"RenderableHash\": \"TuiGrid-Wrap\",\n\t\t\t\"TemplateHash\": \"TuiGrid-Container\",\n\t\t\t\"DestinationAddress\": \"#TuiGrid-Container-Div\"\n\t\t}\n\t],\n\n\t\"TargetElementAddress\": \"#TuiGrid-Container-Div\",\n\n\t\"GridDataAddress\": false,\n\n\t\"GridData\": [\n\t\t{\n\t\t\t\"idrecord\": 1,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 1\",\n\t\t\t\"description\": \"description 1\"\n\t\t},\n\t\t{\n\t\t\t\"idrecord\": 2,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 2\",\n\t\t\t\"description\": \"description 2\"\n\t\t},\n\t\t{\n\t\t\t\"idrecord\": 3,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 3\",\n\t\t\t\"description\": \"description 3\"\n\t\t},\n\t\t{\n\t\t\t\"idrecord\": 4,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 4\",\n\t\t\t\"description\": \"description 4\"\n\t\t},\n\t\t{\n\t\t\t\"idrecord\": 5,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 5\",\n\t\t\t\"description\": \"description 5\"\n\t\t},\n\t\t{\n\t\t\t\"idrecord\": 6,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 6\",\n\t\t\t\"description\": \"description 6\"\n\t\t},\n\t\t{\n\t\t\t\"idrecord\": 7,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 7\",\n\t\t\t\"description\": \"description 7\"\n\t\t},\n\t\t{\n\t\t\t\"idrecord\": 8,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 8\",\n\t\t\t\"description\": \"description 8\"\n\t\t},\n\t\t{\n\t\t\t\"idrecord\": 9,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 9\",\n\t\t\t\"description\": \"description 9\"\n\t\t}\n\t],\n\t\"ColumnsToSolveOnChange\": {},\n\t\"TuiColumnSchema\": [\n\t\t{\n\t\t\t\"header\": \"IDRecord\",\n\t\t\t\"name\": \"idrecord\",\n\t\t\t\"PictTriggerSolveOnChange\": true\n\t\t},\n\t\t{\n\t\t\t\"header\": \"Entity\",\n\t\t\t\"name\": \"entity\",\n\t\t\t\"PictTriggerSolveOnChange\": true\n\t\t},\n\t\t{\n\t\t\t\"header\": \"Name\",\n\t\t\t\"name\": \"name\",\n\t\t\t\"editor\": \"text\"\n\t\t},\n\t\t{\n\t\t\t\"header\": \"Description\",\n\t\t\t\"name\": \"description\",\n\t\t\t\"editor\": \"text\"\n\t\t}\n\t]\n}\n\n},{}],6:[function(require,module,exports){\nconst libPictViewClass = require('pict-view');\n\n/**\n * @typedef {typeof import('tui-grid').default} TuiGridClass\n * @typedef {import('tui-grid').default} TuiGrid\n */\n\nclass PictSectionTuiGrid extends libPictViewClass\n{\n\tconstructor(pFable, pOptions, pServiceHash)\n\t{\n\t\tlet tmpOptions = Object.assign({}, require('./Pict-Section-TuiGrid-DefaultConfiguration.json'), pOptions);\n\n\t\tsuper(pFable, tmpOptions, pServiceHash);\n\n\t\t/** @type {{ [key: string]: any }} */\n\t\tthis.services;\n\t\tthis.dateFormatter = this.fable.instantiateServiceProviderWithoutRegistration('Dates');\n\n\t\tthis.initialRenderComplete = false;\n\n\t\tthis.customFormatters = {};\n\t}\n\n\tonBeforeInitialize()\n\t{\n\t\tsuper.onBeforeInitialize();\n\n\t\t/** @type {TuiGridClass} */\n\t\tthis._tuiGridPrototype = null;\n\n\t\t/** @type {TuiGrid} */\n\t\tthis.tuiGrid = null;\n\n\t\tthis.customHeaders = require('./Pict-TuiGrid-Headers.js');\n\t\tthis.customEditors = require('./Pict-TuiGrid-Editors.js');\n\t\tthis.initializeCustomFormatters();\n\n\t\tthis.columnSchema = false;\n\t\tthis.targetElementAddress = false;\n\t\t/** @type {Array<any>} */\n\t\tthis.gridData = null;\n\n\t\treturn super.onBeforeInitialize();\n\t}\n\n\tinitializeCustomFormatters()\n\t{\n\t\tthis.customFormatters.FormatterTwoDigitNumber = (pCell) =>\n\t\t\t{\n\t\t\t\tlet tmpCellValue = Number.parseFloat(pCell.value);\n\t\t\t\tlet tmpPrecision = pCell?.decimalPrecision ?? 2;\n\t\t\t\tif (isNaN(tmpCellValue))\n\t\t\t\t{\n\t\t\t\t\treturn '';\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\treturn this.fable.Math.roundPrecise(pCell.value, tmpPrecision);\n\t\t\t\t}\n\t\t\t};\n\t\tthis.customFormatters.FormatterCurrencyNumber = (pCell) =>\n\t\t\t{\n\t\t\t\tlet tmpPrecision = pCell?.decimalPrecision ?? 2;\n\t\t\t\tlet tmpCellValue = this.fable.DataFormat.formatterDollars(pCell.value, tmpPrecision);\n\t\t\t\treturn tmpCellValue;\n\t\t\t};\n\n\t\tthis.customFormatters.FormatterRoundedNumber = (pCell) =>\n\t\t\t{\n\t\t\t\tlet tmpCellValue = Number.parseFloat(pCell.value);\n\t\t\t\tlet tmpPrecision = pCell?.decimalPrecision ?? 2;\n\t\t\t\tif (isNaN(tmpCellValue))\n\t\t\t\t{\n\t\t\t\t\treturn '';\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\treturn this.fable.Math.roundPrecise(pCell.value, tmpPrecision);\n\t\t\t\t}\n\t\t\t};\n\n\t\tthis.customFormatters.FormatterDate = (pCell) =>\n\t\t\t{\n\t\t\t\tlet tmpDate = this.fable.Dates.dayJS.utc(pCell.value);\n\t\t\t\tif (pCell.dateformat)\n\t\t\t\t{\n\t\t\t\t\treturn tmpDate.format(pCell.dateformat);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\treturn tmpDate.format();\n\t\t\t\t}\n\t\t\t};\n\t}\n\n\t/**\n\t * Construct a tuiGrid instance and connect it to the browser's dom object for the grid.  If the\n\t * prototype is not passed in, try to find a window.tui (where the library puts itself) in the window\n\t * object.\n\t *\n\t * @param {TuiGridClass} [pTuiGridPrototype] - The TuiGrid prototype class expected to be loaded in the browser\n\t * @returns\n\t */\n\tconnectTuiGridPrototype(pTuiGridPrototype)\n\t{\n\t\tif (typeof (pTuiGridPrototype) != 'undefined')\n\t\t{\n\t\t\tthis._tuiGridPrototype = pTuiGridPrototype;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.log.trace(`PICT-TuiGrid No TuiGrid Prototype defined or explicitly set; looking for it in the window object.`);\n\t\t\tif (typeof (window) != 'undefined')\n\t\t\t{\n\t\t\t\tif ((typeof (window.tui) != 'undefined') && (typeof (window.tui.Grid) != 'undefined'))\n\t\t\t\t{\n\t\t\t\t\tthis.log.trace(`PICT-TuiGrid Found TuiGrid Prototype in window.tuiGrid.`);\n\t\t\t\t\tthis.connectTuiGridPrototype(window.tui.Grid);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.log.error(`PICT-TuiGrid No TuiGrid Prototype found in window.tuiGrid.`);\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.log.error(`PICT-TuiGrid No TuiGrid Prototype found in window.tuiGrid -- window object unavailable.`);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @typedef {Object} TUIGridCellChange\n\t * @property {any} rowKey - The key of the row that changed.\n\t * @property {string} columnName - The name of the column that changed.\n\t * @property {any} value - The \"current\" value of the cell. Slightly different meaning in preChangeHandler vs changeHandler (before / after the change is applied).\n\t * @property {any} [nextValue] - The value that the cell will have after the change. Only populated in preChangeHandler (not changeHandler).\n\t * @property {any} [prevValue] - The value that the cell had before the change. Only populated in changeHandler (not preChangeHandler).\n\t */\n\n\t/**\n\t * @typedef {Object} TUIGridChangeEvent\n\t * @property {TuiGrid} instance - The TuiGrid instance that fired the event.\n\t * @property {TUIGridCellChange[]} changes - An array of objects representing the changes to grid cell values.\n\t */\n\n\t/**\n\t * Interface method for handling changesets from the TuiGrid control. Invoked before the change has been applied to the affected cells.\n\t *\n\t * * The pre-change cell value is stored in value while the new cell value is stored in nextValue.\n\t * * Any changes made to nextValue in this method will be reflected in the grid for that cell.\n\t *\n\t * @param {TUIGridChangeEvent} pChangeData - An event containing an array of objects representing the changes to grid cell values.\n\t */\n\tpreChangeHandler(pChangeData)\n\t{\n\t}\n\n\t/**\n\t * Interface method for handling changesets from the TuiGrid control. Invoked after the change has been applied to the affected cells.\n\t *\n\t * * Performs solver trigger for changes to any columns configured in \"ColumnsToSolveOnChange\" or with \"PictTriggerSolveOnChange\": true on a specific row.\n\t * * The previous cell value is stored in prevValue while the next cell value is stored in value.\n\t *\n\t * @param {TUIGridChangeEvent} pChangeData - An event object containing an array of objects representing the changes to grid cell values.\n\t */\n\tchangeHandler(pChangeData)\n\t{\n\t\tlet tmpSolverNecessary = false;\n\n\t\tfor (let i = 0; i < pChangeData.changes.length; i++)\n\t\t{\n\t\t\tlet tmpEntity = pChangeData.instance.getValue(pChangeData.changes[i].rowKey, 'entity');\n\t\t\tlet tmpIDRecord = pChangeData.instance.getValue(pChangeData.changes[i].rowKey, 'idrecord');\n\n\t\t\tthis.log.trace(`Generic Change Handler for TuiGrid Fired, Entity ${tmpEntity} IDRecord ${tmpIDRecord} setting Column [${pChangeData.changes[i].value}] to new Value [${pChangeData.changes[i].value}]`);\n\n\t\t\tif (this.options.ColumnsToSolveOnChange.hasOwnProperty(pChangeData.changes[i].columnName))\n\t\t\t{\n\t\t\t\ttmpSolverNecessary = true;\n\t\t\t}\n\t\t}\n\n\t\tif (tmpSolverNecessary)\n\t\t{\n\t\t\tthis.services.PictApplication.solve();\n\t\t}\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers after the view is rendered.\n\t *\n\t * @param {import('pict-view').Renderable} pRenderable - The renderable that was rendered.\n\t * @param {string} pRenderDestinationAddress - The address where the renderable was rendered.\n\t * @param {any} pRecord - The record (data) that was used by the renderable.\n\t * @param {string} pContent - The content that was rendered.\n\t */\n\tonAfterRender(pRenderable, pRenderDestinationAddress, pRecord, pContent)\n\t{\n\t\tif (!this.initialRenderComplete)\n\t\t{\n\t\t\tthis.onAfterInitialRender();\n\t\t\tthis.initialRenderComplete = true;\n\t\t}\n\t\treturn super.onAfterRender(pRenderable, pRenderDestinationAddress, pRecord, pContent);\n\t}\n\n\tonAfterInitialRender()\n\t{\n\t\t// This is where we wire up and initialize the tuigrid control -- the initial render has put the placeholder content in place.\n\t\t// Check for a tuigrid prototype, and find it in the window object it if it doesn't exist\n\t\tif (!this._tuiGridPrototype)\n\t\t{\n\t\t\tthis.connectTuiGridPrototype();\n\t\t}\n\t\t// This is where we wire up and initialize the tuigrid control\n\t\tif (this.tuiGrid)\n\t\t{\n\t\t\t// The grid is already initialized.\n\t\t\tthis.log.error(`TuiGrid going to ${this.options.TargetElementAddress} is already initialized!`);\n\t\t\treturn false;\n\t\t}\n\n\t\tif (this.options.GridDataAddress)\n\t\t{\n\t\t\tconst tmpAddressSpace =\n\t\t\t{\n\t\t\t\tFable: this.fable,\n\t\t\t\tPict: this.fable,\n\t\t\t\tAppData: this.AppData,\n\t\t\t\tBundle: this.Bundle,\n\t\t\t\tOptions: this.options,\n\t\t\t};\n\t\t\tlet tmpAddressedData = this.fable.manifest.getValueByHash(tmpAddressSpace, this.options.GridDataAddress);\n\t\t\tif (typeof (tmpAddressedData) != 'object')\n\t\t\t{\n\t\t\t\tthis.log.error(`Address for GridData [${this.options.GridDataAddress}] did not return an object; it was a ${typeof (tmpAddressedData)}.`);\n\t\t\t\tthis.gridData = [];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.gridData = JSON.parse(JSON.stringify(tmpAddressedData));\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.gridData = [];\n\t\t}\n\n\t\tlet tmpTargetElementSet = this.services.ContentAssignment.getElement(this.options.TargetElementAddress);\n\t\tif (tmpTargetElementSet.length < 1)\n\t\t{\n\t\t\tthis.log.error(`Could not find target element [${this.options.TargetElementAddress}] for TuiGrid!  Rendering won't function properly.`);\n\t\t\tthis.targetElement = false;\n\t\t\treturn false;\n\t\t}\n\n\t\t// Just go for the first one.\n\t\tthis.targetElement = tmpTargetElementSet[0];\n\n\t\t// Check to see if there are any custom formatters.\n\t\tthis.columnSchema = this.options.TuiColumnSchema;\n\t\t// Setup the solver and custom schema handlers.\n\t\tfor (let i = 0; i < this.columnSchema.length; i++)\n\t\t{\n\t\t\tlet tmpColumn = this.columnSchema[i];\n\t\t\t// If this bit is set on a column, the Form solver will trigger each time a change happens to that column.\n\t\t\tif (tmpColumn.PictTriggerSolveOnChange)\n\t\t\t{\n\t\t\t\tthis.options.ColumnsToSolveOnChange[tmpColumn.name] = tmpColumn;\n\t\t\t}\n\t\t\t// Look to see if there is an internal formatter that matches the type\n\t\t\tif ((tmpColumn.hasOwnProperty('formatter')) && (this.customFormatters.hasOwnProperty(tmpColumn.formatter)))\n\t\t\t{\n\t\t\t\t// Assign our special formatter to the column.\n\t\t\t\ttmpColumn.formatter = this.customFormatters[tmpColumn.formatter];\n\t\t\t}\n\t\t\t// Look to see if there is an editor stanza\n\t\t\tif (tmpColumn.hasOwnProperty('editor'))\n\t\t\t{\n\t\t\t\t// Look to see if there is an internal editor that matches the type\n\t\t\t\tif ((tmpColumn.editor.hasOwnProperty('type'))\n\t\t\t\t\t&& (typeof (tmpColumn.editor.type) == 'string')\n\t\t\t\t\t&& (this.customEditors.hasOwnProperty(tmpColumn.editor.type)))\n\t\t\t\t{\n\t\t\t\t\t// Assign our special editor to the column.\n\t\t\t\t\ttmpColumn.editor.type = this.customEditors[tmpColumn.editor.type];\n\t\t\t\t}\n\n\t\t\t\t// Look to see if there is an internal editor that matches the type\n\t\t\t\tif ((tmpColumn.editor.hasOwnProperty('options'))\n\t\t\t\t\t&& (typeof (tmpColumn.editor.options) == 'object')\n\t\t\t\t\t&& (tmpColumn.editor.options.hasOwnProperty('listItems'))\n\t\t\t\t\t&& (typeof (tmpColumn.editor.options.listItems) == 'string'))\n\t\t\t\t{\n\t\t\t\t\t// Look for this address!  For the Record object, we will pass in the options.\n\t\t\t\t\tconst tmpAddressSpace =\n\t\t\t\t\t{\n\t\t\t\t\t\tFable: this.fable,\n\t\t\t\t\t\tPict: this.fable,\n\t\t\t\t\t\tAppData: this.AppData,\n\t\t\t\t\t\tBundle: this.Bundle,\n\t\t\t\t\t\tOptions: this.options,\n\t\t\t\t\t};\n\t\t\t\t\tlet tmpListItems = this.fable.manifest.getValueByHash(tmpAddressSpace, tmpColumn.editor.options.listItems);\n\t\t\t\t\tif (typeof (tmpListItems) == 'object')\n\t\t\t\t\t{\n\t\t\t\t\t\ttmpColumn.editor.options.listItems = tmpListItems;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.log.warn(`Pict TuiGrid for column [${tmpColumn.name}] had [${tmpColumn.editor.options.listItems}] as a listItems address, but it didn't return an object.  It was a [${typeof (tmpListItems)}].  Setting to empty list.`);\n\t\t\t\t\t\ttmpColumn.editor.options.listItems = [];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.gridSettings = {\n\t\t\t\tdata: this.gridData,\n\t\t\t\tel: this.targetElement,\n\t\t\t\tcolumns: this.columnSchema,\n\n\t\t\t\t// This is no bueno, yo\n\t\t\t\tusageStatistics: false,\n\n\t\t\t\tscrollY: this.options.GridScrollY,\n\n\t\t\t\tcolumnOptions:\n\t\t\t\t{\n\t\t\t\t\tresizable: this.options.GridColumnWidthResizable\n\t\t\t\t}\n\t\t\t};\n\n\t\tthis.customConfigureGridSettings();\n\n\t\tlet libTuiGrid = this._tuiGridPrototype;\n\t\tthis.tuiGrid = new libTuiGrid(this.gridSettings);\n\t\tthis.tuiGrid.on('beforeChange', (pChangeData) =>\n\t\t{\n\t\t\t//TODO: the exported event type from tui-grid is incomplete so mask it here\n\t\t\t/** @type {any} */\n\t\t\tconst tmpChangeData = pChangeData;\n\t\t\tthis.preChangeHandler(tmpChangeData);\n\t\t});\n\t\tthis.tuiGrid.on('afterChange', (pChangeData) =>\n\t\t{\n\t\t\t//TODO: the exported event type from tui-grid is incomplete so mask it here\n\t\t\t/** @type {any} */\n\t\t\tconst tmpChangeData = pChangeData;\n\t\t\tthis.changeHandler(tmpChangeData);\n\t\t});\n\t}\n\n\t/**\n\t * This is expected to be overloaded with anything that needs to be added to the grid configuration\n\t * before the Toast UI Grid component is initialized in the browser.\n\t */\n\tcustomConfigureGridSettings ()\n\t{\n\t\t// This can be overloaded to tweak up the this.gridSettings\n\t}\n\n\t/**\n\t * Lookup a specific record in the toast ui grid data set by value and pull the value from the map into the browser.\n\t *\n\t * This function exists because if we mutate data in the map of plain javascript records tuigrid\n\t * manages, it doesn't automatically refresh the UI.  From reading the TUIGrid documentation, this\n\t * is because they don't want to refresh until all the data has changed.\n\t *\n\t * The best practice has been to have a hidden column behind the tuigrid that maps the correct entity\n\t * value set to the record in the map (e.g. IDRecord in one column and Entity in another).\n\t *\n\t * @param {string} pCellColumnToBeSet - the Column hash to set\n\t * @param {string} pCellValueToSet - Value to be set\n\t * @param {string} pLookupValue - the Value to look up in tuigrid\n\t * @param {string} pLookupColumn - the key of the column in the tuigrid record (which are plain javascript objects defined by the tuigrid config)\n\t * @return {void}\n\t */\n\tSetGridValue(pCellColumnToBeSet, pCellValueToSet, pLookupValue, pLookupColumn)\n\t{\n\t\tif (typeof (pLookupValue) == 'undefined')\n\t\t{\n\t\t\tconsole.log(`Could not set grid value [${pCellColumnToBeSet}] = [${pCellValueToSet}] looked up by [${pLookupColumn}]::[${pLookupValue}].  No valid lookup value!`);\n\t\t\treturn;\n\t\t}\n\n\t\tif (!this.tuiGrid)\n\t\t{\n\t\t\tthis.log.warn(`Could not set grid value [${pCellColumnToBeSet}] = [${pCellValueToSet}] looked up by [${pLookupColumn}]::[${pLookupValue}].  No valid grid!`);\n\t\t\treturn;\n\t\t}\n\n\t\tconst tmpData = this.tuiGrid.getData();\n\n\t\tfor (let i = 0; i < tmpData.length; i++)\n\t\t{\n\t\t\tconst tmpRecord = tmpData[i];\n\n\t\t\tif (tmpRecord[pLookupColumn] == pLookupValue)\n\t\t\t{\n\t\t\t\tthis.tuiGrid.setValue(i, pCellColumnToBeSet, pCellValueToSet);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Lookup a specific record in the toast ui grid data set by row key and pull in a column.\n\t *\n\t * This function exists because if we mutate data in the map of plain javascript records tuigrid\n\t * manages, it doesn't automatically refresh the UI.  From reading the TUIGrid documentation, this\n\t * is because they don't want to refresh until all the data has changed.\n\t *\n\t *\n\t * @param {string} pCellColumnToBeSet - the Column hash to set\n\t * @param {string} pCellValueToSet - Value to be set\n\t * @param {string} pRowKey - the key of the row to be set\n\t * @return {boolean}\n\t */\n\tSetGridValueByRowKey(pCellColumnToBeSet, pCellValueToSet, pRowKey)\n\t{\n\t\tif (typeof (pRowKey) == 'undefined')\n\t\t{\n\t\t\tthis.log.error(`Could not set grid value [${pCellColumnToBeSet}] = [${pCellValueToSet}] looked up by row key [${pRowKey}].  No valid row key!`);\n\t\t\treturn false;\n\t\t}\n\n\t\tif (!this.tuiGrid)\n\t\t{\n\t\t\tthis.log.warn(`Could not set grid value [${pCellColumnToBeSet}] = [${pCellValueToSet}] looked up by row key [${pRowKey}].  No valid grid!`);\n\t\t\treturn false;\n\t\t}\n\n\t\tthis.tuiGrid.setValue(pRowKey, pCellColumnToBeSet, pCellValueToSet);\n\t\treturn true;\n\t}\n}\n\nmodule.exports = PictSectionTuiGrid;\n\n/** @type {Record<string, any>} */\nmodule.exports.default_configuration = require('./Pict-Section-TuiGrid-DefaultConfiguration.json');\n\n},{\"./Pict-Section-TuiGrid-DefaultConfiguration.json\":5,\"./Pict-TuiGrid-Editors.js\":9,\"./Pict-TuiGrid-Headers.js\":10,\"pict-view\":4}],7:[function(require,module,exports){\n// Custom number editor class with an option for precision\nclass tuiCustomEditorNumber\n{\n\tconstructor(pProperties)\n\t{\n\t\tconst tmpElement = document.createElement('input');\n\n\t\tconst decimalPrecision = (pProperties.columnInfo.editor.options.decimalPrecision) ? pProperties.columnInfo.editor.options.decimalPrecision : 3;\n\n\t\ttmpElement.type = 'number';\n\t\ttmpElement.value = String(pProperties.value);\n\t\ttmpElement.oninput = (pElement) =>\n\t\t{\n\t\t\tif (pElement.target instanceof HTMLInputElement)\n\t\t\t{\n\t\t\t\tconst tmpCastNumber = parseFloat(pElement.target.value).toFixed(decimalPrecision).toString()\n\t\t\t\tif (tmpCastNumber.length < parseFloat(pElement.target.value).toString().length)\n\t\t\t\t{\n\t\t\t\t\tpElement.target.value = tmpCastNumber;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tthis.Element = tmpElement;\n\t}\n\n\tgetElement()\n\t{\n\t\treturn this.Element;\n\t}\n\n\tgetValue()\n\t{\n\t\treturn this.Element.value;\n\t}\n\n\tmounted()\n\t{\n\t\tthis.Element.select();\n\t}\n}\n\nmodule.exports = tuiCustomEditorNumber;\n\n},{}],8:[function(require,module,exports){\n// Custom number editor class with an option for precision\nclass tuiCustomEditorText\n{\n\tconstructor(pProperties)\n\t{\n\t\tconst tmpElement = document.createElement('input');\n\n\t\ttmpElement.type = 'text';\n\t\ttmpElement.value = String(pProperties.value);\n\t\ttmpElement.placeholder =  pProperties.columnInfo.editor.options.placeholder || '';\n\t\ttmpElement.pattern = pProperties.columnInfo.editor.options.pattern || '';\n\t\ttmpElement.minLength = pProperties.columnInfo.editor.options.minLength || '';\n\t\ttmpElement.maxLength = pProperties.columnInfo.editor.options.maxLength || '';\n\t\ttmpElement.required = pProperties.columnInfo.editor.options.required || '';\n\n\t\tthis.Element = tmpElement;\n\t}\n\n\tgetElement()\n\t{\n\t\treturn this.Element;\n\t}\n\n\tgetValue()\n\t{\n\t\treturn this.Element.value;\n\t}\n\n\tmounted()\n\t{\n\t\tthis.Element.select();\n\t}\n}\n\nmodule.exports = tuiCustomEditorText;\n\n},{}],9:[function(require,module,exports){\nmodule.exports =\n{\n\tEditorNumber: require('./Pict-TuiGrid-Editor-Number.js'),\n\tEditorText: require('./Pict-TuiGrid-Editor-Text.js'),\n};\n\n},{\"./Pict-TuiGrid-Editor-Number.js\":7,\"./Pict-TuiGrid-Editor-Text.js\":8}],10:[function(require,module,exports){\n// Custom column header where the header is hidden\nclass tuiCustomColumnHeaderNone\n{\n\tconstructor()\n\t{\n\t\tlet tmpElement = document.createElement('input');\n\t\ttmpElement.type = 'hidden';\n\t\ttmpElement.value = '';\n\t\tthis.Element = tmpElement;\n\t}\n\n\tgetElement()\n\t{\n\t\treturn this.Element;\n\t}\n\n\trender()\n\t{\n\t\t// Noop!\n\t}\n}\n\nmodule.exports =\n{\n\tCustomColumnHeaderNone: tuiCustomColumnHeaderNone,\n};\n\n},{}]},{},[6])(6)\n});\n\n","/**\n* Fable Service Base\n* @author <steven@velozo.com>\n*/\n\nconst libPackage = require('../package.json');\n\nclass FableServiceProviderBase\n{\n\t// The constructor can be used in two ways:\n\t// 1) With a fable, options object and service hash (the options object and service hash are optional)\n\t// 2) With an object or nothing as the first parameter, where it will be treated as the options object\n\tconstructor(pFable, pOptions, pServiceHash)\n\t{\n\t\t// Check if a fable was passed in; connect it if so\n\t\tif ((typeof(pFable) === 'object') && pFable.isFable)\n\t\t{\n\t\t\tthis.connectFable(pFable);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.fable = false;\n\t\t}\n\n\t\t// Initialize the services map if it wasn't passed in\n\t\t/** @type {Object} */\n\t\tthis._PackageFableServiceProvider = libPackage;\n\n\t\t// initialize options and UUID based on whether the fable was passed in or not.\n\t\tif (this.fable)\n\t\t{\n\t\t\tthis.UUID = pFable.getUUID();\n\t\t\tthis.options = (typeof(pOptions) === 'object') ? pOptions\n\t\t\t\t\t\t\t: {};\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// With no fable, check to see if there was an object passed into either of the first two\n\t\t\t// Parameters, and if so, treat it as the options object\n\t\t\tthis.options = ((typeof(pFable) === 'object') && !pFable.isFable) ? pFable\n\t\t\t\t\t\t\t: (typeof(pOptions) === 'object') ? pOptions\n\t\t\t\t\t\t\t: {};\n\t\t\tthis.UUID = `CORE-SVC-${Math.floor((Math.random() * (99999 - 10000)) + 10000)}`\n\t\t}\n\n\t\t// It's expected that the deriving class will set this\n\t\tthis.serviceType = `Unknown-${this.UUID}`;\n\n\t\t// The service hash is used to identify the specific instantiation of the service in the services map\n\t\tthis.Hash = (typeof(pServiceHash) === 'string') ? pServiceHash \n\t\t\t\t\t: (!this.fable && (typeof(pOptions) === 'string')) ? pOptions\n\t\t\t\t\t: `${this.UUID}`;\n\t}\n\n\tconnectFable(pFable)\n\t{\n\t\tif ((typeof(pFable) !== 'object') || (!pFable.isFable))\n\t\t{\n\t\t\tlet tmpErrorMessage = `Fable Service Provider Base: Cannot connect to Fable, invalid Fable object passed in.  The pFable parameter was a [${typeof(pFable)}].}`;\n\t\t\tconsole.log(tmpErrorMessage);\n\t\t\treturn new Error(tmpErrorMessage);\n\t\t}\n\n\t\tif (!this.fable)\n\t\t{\n\t\t\tthis.fable = pFable;\n\t\t}\n\n\t\tif (!this.log)\n\t\t{\n\t\t\tthis.log = this.fable.Logging;\n\t\t}\n\t\tif (!this.services)\n\t\t{\n\t\t\tthis.services = this.fable.services;\n\t\t}\n\n\t\tif (!this.servicesMap)\n\t\t{\n\t\t\tthis.servicesMap = this.fable.servicesMap;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tstatic isFableService = true;\n}\n\nmodule.exports = FableServiceProviderBase;\n\n// This is left here in case we want to go back to having different code/base class for \"core\" services\nmodule.exports.CoreServiceProviderBase = FableServiceProviderBase;","module.exports={\n    \"name\": \"pict-view\",\n    \"version\": \"1.0.61\",\n    \"description\": \"Pict View Base Class\",\n    \"main\": \"source/Pict-View.js\",\n    \"scripts\": {\n        \"test\": \"./node_modules/.bin/mocha -u tdd -R spec\",\n        \"start\": \"node source/Pict-View.js\",\n        \"coverage\": \"./node_modules/.bin/nyc --reporter=lcov --reporter=text-lcov ./node_modules/mocha/bin/_mocha -- -u tdd -R spec\",\n        \"build\": \"npx quack build\",\n        \"docker-dev-build\": \"docker build ./ -f Dockerfile_LUXURYCode -t pict-view-image:local\",\n        \"docker-dev-run\": \"docker run -it -d --name pict-view-dev -p 30001:8080 -p 38086:8086 -v \\\"$PWD/.config:/home/coder/.config\\\"  -v \\\"$PWD:/home/coder/pict-view\\\" -u \\\"$(id -u):$(id -g)\\\" -e \\\"DOCKER_USER=$USER\\\" pict-view-image:local\",\n        \"docker-dev-shell\": \"docker exec -it pict-view-dev /bin/bash\",\n        \"types\": \"tsc -p .\",\n        \"lint\": \"eslint source/**\"\n    },\n    \"types\": \"types/source/Pict-View.d.ts\",\n    \"repository\": {\n        \"type\": \"git\",\n        \"url\": \"git+https://github.com/stevenvelozo/pict-view.git\"\n    },\n    \"author\": \"steven velozo <steven@velozo.com>\",\n    \"license\": \"MIT\",\n    \"bugs\": {\n        \"url\": \"https://github.com/stevenvelozo/pict-view/issues\"\n    },\n    \"homepage\": \"https://github.com/stevenvelozo/pict-view#readme\",\n    \"devDependencies\": {\n        \"@eslint/js\": \"^9.28.0\",\n        \"browser-env\": \"^3.3.0\",\n        \"eslint\": \"^9.28.0\",\n        \"pict\": \"^1.0.272\",\n        \"quackage\": \"^1.0.41\",\n        \"typescript\": \"^5.8.3\"\n    },\n    \"mocha\": {\n        \"diff\": true,\n        \"extension\": [\n            \"js\"\n        ],\n        \"package\": \"./package.json\",\n        \"reporter\": \"spec\",\n        \"slow\": \"75\",\n        \"timeout\": \"5000\",\n        \"ui\": \"tdd\",\n        \"watch-files\": [\n            \"source/**/*.js\",\n            \"test/**/*.js\"\n        ],\n        \"watch-ignore\": [\n            \"lib/vendor\"\n        ]\n    },\n    \"dependencies\": {\n        \"fable\": \"^3.1.11\",\n        \"fable-serviceproviderbase\": \"^3.0.15\"\n    }\n}\n","\nconst libFableServiceBase = require('fable-serviceproviderbase');\n\nconst libPackage = require('../package.json');\n\nconst defaultPictViewSettings = (\n\t{\n\t\tDefaultRenderable: false,\n\t\tDefaultDestinationAddress: false,\n\t\tDefaultTemplateRecordAddress: false,\n\n\t\tViewIdentifier: false,\n\n\t\t// If this is set to true, when the App initializes this will.\n\t\t// After the App initializes, initialize will be called as soon as it's added.\n\t\tAutoInitialize: true,\n\t\tAutoInitializeOrdinal: 0,\n\n\t\t// If this is set to true, when the App autorenders (on load) this will.\n\t\t// After the App initializes, render will be called as soon as it's added.\n\t\tAutoRender: true,\n\t\tAutoRenderOrdinal: 0,\n\n\t\tAutoSolveWithApp: true,\n\t\tAutoSolveOrdinal: 0,\n\n\t\tCSSHash: false,\n\t\tCSS: false,\n\t\tCSSProvider: false,\n\t\tCSSPriority: 500,\n\n\t\tTemplates: [],\n\n\t\tDefaultTemplates: [],\n\n\t\tRenderables: [],\n\n\t\tManifests: {}\n\t});\n\n/** @typedef {(error?: Error) => void} ErrorCallback */\n/** @typedef {number | boolean} PictTimestamp */\n\n/**\n * @typedef {'replace' | 'append' | 'prepend' | 'append_once'} RenderMethod\n */\n/**\n * @typedef {Object} Renderable\n *\n * @property {string} RenderableHash - A unique hash for the renderable.\n * @property {string} TemplateHash] - The hash of the template to use for rendering this renderable.\n * @property {string} [DefaultTemplateRecordAddress] - The default address for resolving the data record for this renderable.\n * @property {string} [ContentDestinationAddress] - The default address (DOM CSS selector) for rendering the content of this renderable.\n * @property {RenderMethod} [RenderMethod=replace] - The method to use when projecting the renderable to the DOM ('replace', 'append', 'prepend', 'append_once').\n * @property {string} [TestAddress] - The address to use for testing the renderable.\n */\n\n/**\n * Represents a view in the Pict ecosystem.\n */\nclass PictView extends libFableServiceBase\n{\n\t/**\n\t * @param {any} pFable - The Fable object that this service is attached to.\n\t * @param {any} [pOptions] - (optional) The options for this service.\n\t * @param {string} [pServiceHash] - (optional) The hash of the service.\n\t */\n\tconstructor(pFable, pOptions, pServiceHash)\n\t{\n\t\t// Intersect default options, parent constructor, service information\n\t\tlet tmpOptions = Object.assign({}, JSON.parse(JSON.stringify(defaultPictViewSettings)), pOptions);\n\t\tsuper(pFable, tmpOptions, pServiceHash);\n\t\t//FIXME: add types to fable and ancillaries\n\t\t/** @type {any} */\n\t\tthis.fable;\n\t\t/** @type {any} */\n\t\tthis.options;\n\t\t/** @type {String} */\n\t\tthis.UUID;\n\t\t/** @type {String} */\n\t\tthis.Hash;\n\t\t/** @type {any} */\n\t\tthis.log;\n\n\t\tif (!this.options.ViewIdentifier)\n\t\t{\n\t\t\tthis.options.ViewIdentifier = `AutoViewID-${this.fable.getUUID()}`;\n\t\t}\n\t\tthis.serviceType = 'PictView';\n\t\t/** @type {Record<string, any>} */\n\t\tthis._Package = libPackage;\n\t\t// Convenience and consistency naming\n\t\t/** @type {import('pict') & { log: any, instantiateServiceProviderWithoutRegistration: (hash: String) => any }} */\n\t\tthis.pict = this.fable;\n\t\t// Wire in the essential Pict application state\n\t\tthis.AppData = this.pict.AppData;\n\t\tthis.Bundle = this.pict.Bundle;\n\n\t\t/** @type {PictTimestamp} */\n\t\tthis.initializeTimestamp = false;\n\t\t/** @type {PictTimestamp} */\n\t\tthis.lastSolvedTimestamp = false;\n\t\t/** @type {PictTimestamp} */\n\t\tthis.lastRenderedTimestamp = false;\n\t\t/** @type {PictTimestamp} */\n\t\tthis.lastMarshalFromViewTimestamp = false;\n\t\t/** @type {PictTimestamp} */\n\t\tthis.lastMarshalToViewTimestamp = false;\n\n\t\t// Load all templates from the array in the options\n\t\t// Templates are in the form of {Hash:'Some-Template-Hash',Template:'Template content',Source:'TemplateSource'}\n\t\tfor (let i = 0; i < this.options.Templates.length; i++)\n\t\t{\n\t\t\tlet tmpTemplate = this.options.Templates[i];\n\n\t\t\tif (!('Hash' in tmpTemplate) || !('Template' in tmpTemplate))\n\t\t\t{\n\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not load Template ${i} in the options array.`, tmpTemplate);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (!tmpTemplate.Source)\n\t\t\t\t{\n\t\t\t\t\ttmpTemplate.Source = `PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} options object.`;\n\t\t\t\t}\n\t\t\t\tthis.pict.TemplateProvider.addTemplate(tmpTemplate.Hash, tmpTemplate.Template, tmpTemplate.Source);\n\t\t\t}\n\t\t}\n\n\t\t// Load all default templates from the array in the options\n\t\t// Templates are in the form of {Prefix:'',Postfix:'-List-Row',Template:'Template content',Source:'TemplateSourceString'}\n\t\tfor (let i = 0; i < this.options.DefaultTemplates.length; i++)\n\t\t{\n\t\t\tlet tmpDefaultTemplate = this.options.DefaultTemplates[i];\n\n\t\t\tif (!('Postfix' in tmpDefaultTemplate) || !('Template' in tmpDefaultTemplate))\n\t\t\t{\n\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not load Default Template ${i} in the options array.`, tmpDefaultTemplate);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (!tmpDefaultTemplate.Source)\n\t\t\t\t{\n\t\t\t\t\ttmpDefaultTemplate.Source = `PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} options object.`;\n\t\t\t\t}\n\t\t\t\tthis.pict.TemplateProvider.addDefaultTemplate(tmpDefaultTemplate.Prefix, tmpDefaultTemplate.Postfix, tmpDefaultTemplate.Template, tmpDefaultTemplate.Source);\n\t\t\t}\n\t\t}\n\n\t\t// Load the CSS if it's available\n\t\tif (this.options.CSS)\n\t\t{\n\t\t\tlet tmpCSSHash = this.options.CSSHash ? this.options.CSSHash : `View-${this.options.ViewIdentifier}`;\n\t\t\tlet tmpCSSProvider = this.options.CSSProvider ? this.options.CSSProvider : tmpCSSHash;\n\t\t\tthis.pict.CSSMap.addCSS(tmpCSSHash, this.options.CSS, tmpCSSProvider, this.options.CSSPriority);\n\t\t}\n\n\t\t// Load all renderables\n\t\t// Renderables are launchable renderable instructions with templates\n\t\t// They look as such: {Identifier:'ContentEntry', TemplateHash:'Content-Entry-Section-Main', ContentDestinationAddress:'#ContentSection', RecordAddress:'AppData.Content.DefaultText', ManifestTransformation:'ManyfestHash', ManifestDestinationAddress:'AppData.Content.DataToTransformContent'}\n\t\t// The only parts that are necessary are Identifier and Template\n\t\t// A developer can then do render('ContentEntry') and it just kinda works.  Or they can override the ContentDestinationAddress\n\t\t/** @type {Object<String, Renderable>} */\n\t\tthis.renderables = {};\n\t\tfor (let i = 0; i < this.options.Renderables.length; i++)\n\t\t{\n\t\t\t/** @type {Renderable} */\n\t\t\tlet tmpRenderable = this.options.Renderables[i];\n\t\t\tthis.addRenderable(tmpRenderable);\n\t\t}\n\t}\n\n\t/**\n\t * Adds a renderable to the view.\n\t *\n\t * @param {string | Renderable} pRenderableHash - The hash of the renderable, or a renderable object.\n\t * @param {string} [pTemplateHash] - (optional) The hash of the template for the renderable.\n\t * @param {string} [pDefaultTemplateRecordAddress] - (optional) The default data address for the template.\n\t * @param {string} [pDefaultDestinationAddress] - (optional) The default destination address for the renderable.\n\t * @param {RenderMethod} [pRenderMethod=replace] - (optional) The method to use when rendering the renderable (ex. 'replace').\n\t */\n\taddRenderable(pRenderableHash, pTemplateHash, pDefaultTemplateRecordAddress, pDefaultDestinationAddress, pRenderMethod)\n\t{\n\t\t/** @type {Renderable} */\n\t\tlet tmpRenderable;\n\n\t\tif (typeof(pRenderableHash) == 'object')\n\t\t{\n\t\t\t// The developer passed in the renderable as an object.\n\t\t\t// Use theirs instead!\n\t\t\ttmpRenderable = pRenderableHash;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t/** @type {RenderMethod} */\n\t\t\tlet tmpRenderMethod = (typeof(pRenderMethod) !== 'string') ? pRenderMethod : 'replace';\n\t\t\ttmpRenderable = (\n\t\t\t\t{\n\t\t\t\t\tRenderableHash: pRenderableHash,\n\t\t\t\t\tTemplateHash: pTemplateHash,\n\t\t\t\t\tDefaultTemplateRecordAddress: pDefaultTemplateRecordAddress,\n\t\t\t\t\tContentDestinationAddress: pDefaultDestinationAddress,\n\t\t\t\t\tRenderMethod: tmpRenderMethod\n\t\t\t\t});\n\t\t}\n\n\t\tif ((typeof(tmpRenderable.RenderableHash) != 'string') || (typeof(tmpRenderable.TemplateHash) != 'string'))\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not load Renderable; RenderableHash or TemplateHash are invalid.`, tmpRenderable);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (this.pict.LogNoisiness > 0)\n\t\t\t{\n\t\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} adding renderable [${tmpRenderable.RenderableHash}] pointed to template ${tmpRenderable.TemplateHash}.`);\n\t\t\t}\n\n\t\t\tthis.renderables[tmpRenderable.RenderableHash] = tmpRenderable;\n\t\t}\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*                        Code Section: Initialization                        */\n\t/* -------------------------------------------------------------------------- */\n\t/**\n\t * Lifecycle hook that triggers before the view is initialized.\n\t */\n\tonBeforeInitialize()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onBeforeInitialize:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers before the view is initialized (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonBeforeInitializeAsync(fCallback)\n\t{\n\t\tthis.onBeforeInitialize();\n\t\treturn fCallback();\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers when the view is initialized.\n\t */\n\tonInitialize()\n\t{\n\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onInitialize:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers when the view is initialized (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonInitializeAsync(fCallback)\n\t{\n\t\tthis.onInitialize();\n\t\treturn fCallback();\n\t}\n\n\t/**\n\t * Performs view initialization.\n\t */\n\tinitialize()\n\t{\n\t\tif (this.pict.LogControlFlow)\n\t\t{\n\t\t\tthis.log.trace(`PICT-ControlFlow VIEW [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} initialize:`);\n\t\t}\n\n\t\tif (!this.initializeTimestamp)\n\t\t{\n\t\t\tthis.onBeforeInitialize();\n\t\t\tthis.onInitialize();\n\t\t\tthis.onAfterInitialize();\n\t\t\tthis.initializeTimestamp = this.pict.log.getTimeStamp();\n\t\t\treturn true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.log.warn(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} initialize called but initialization is already completed.  Aborting.`);\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * Performs view initialization (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tinitializeAsync(fCallback)\n\t{\n\t\tif (this.pict.LogControlFlow)\n\t\t{\n\t\t\tthis.log.trace(`PICT-ControlFlow VIEW [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} initializeAsync:`);\n\t\t}\n\n\t\tif (!this.initializeTimestamp)\n\t\t{\n\t\t\tlet tmpAnticipate = this.pict.instantiateServiceProviderWithoutRegistration('Anticipate');\n\n\t\t\tif (this.pict.LogNoisiness > 0)\n\t\t\t{\n\t\t\t\tthis.log.info(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} beginning initialization...`);\n\t\t\t}\n\n\t\t\ttmpAnticipate.anticipate(this.onBeforeInitializeAsync.bind(this));\n\t\t\ttmpAnticipate.anticipate(this.onInitializeAsync.bind(this));\n\t\t\ttmpAnticipate.anticipate(this.onAfterInitializeAsync.bind(this));\n\n\t\t\ttmpAnticipate.wait(\n\t\t\t\t/** @param {Error} pError */\n\t\t\t\t(pError) =>\n\t\t\t\t{\n\t\t\t\t\tif (pError)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} initialization failed: ${pError.message || pError}`, { stack: pError.stack });\n\t\t\t\t\t}\n\t\t\t\t\tthis.initializeTimestamp = this.pict.log.getTimeStamp();\n\t\t\t\t\tif (this.pict.LogNoisiness > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.log.info(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} initialization complete.`);\n\t\t\t\t\t}\n\t\t\t\t\treturn fCallback();\n\t\t\t\t});\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.log.warn(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} async initialize called but initialization is already completed.  Aborting.`);\n\t\t\t// TODO: Should this be an error?\n\t\t\treturn fCallback();\n\t\t}\n\t}\n\n\tonAfterInitialize()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onAfterInitialize:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers after the view is initialized (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonAfterInitializeAsync(fCallback)\n\t{\n\t\tthis.onAfterInitialize();\n\t\treturn fCallback();\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*                            Code Section: Render                            */\n\t/* -------------------------------------------------------------------------- */\n\t/**\n\t * Lifecycle hook that triggers before the view is rendered.\n\t *\n\t * @param {Renderable} pRenderable - The renderable that will be rendered.\n\t * @param {string} pRenderDestinationAddress - The address where the renderable will be rendered.\n\t * @param {any} pRecord - The record (data) that will be used to render the renderable.\n\t */\n\tonBeforeRender(pRenderable, pRenderDestinationAddress, pRecord)\n\t{\n\t\t// Overload this to mess with stuff before the content gets generated from the template\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onBeforeRender:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers before the view is rendered (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonBeforeRenderAsync(fCallback)\n\t{\n\t\treturn fCallback();\n\t}\n\n\t/**\n\t * Builds the render options for a renderable.\n\t *\n\t * For DRY purposes on the three flavors of render.\n\t *\n\t * @param {string|ErrorCallback} [pRenderableHash] - The hash of the renderable to render.\n\t * @param {string|ErrorCallback} [pRenderDestinationAddress] - The address where the renderable will be rendered.\n\t * @param {string|object|ErrorCallback} [pTemplateRecordAddress] - The address of (or actual obejct) where the data for the template is stored.\n\t */\n\tbuildRenderOptions(pRenderableHash, pRenderDestinationAddress, pTemplateRecordAddress)\n\t{\n\t\tlet tmpRenderOptions = {Valid: true};\n\t\ttmpRenderOptions.RenderableHash = (typeof (pRenderableHash) === 'string') ? pRenderableHash :\n\t\t\t\t\t\t\t\t(typeof (this.options.DefaultRenderable) == 'string') ?\n\t\t\t\t\t\t\t\tthis.options.DefaultRenderable : false;\n\t\tif (!tmpRenderOptions.RenderableHash)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not find a suitable RenderableHash ${tmpRenderOptions.RenderableHash} (param ${pRenderableHash}because it is not a valid renderable.`);\n\t\t\ttmpRenderOptions.Valid = false;\n\t\t}\n\n\t\ttmpRenderOptions.Renderable = this.renderables[tmpRenderOptions.RenderableHash];\n\t\tif (!tmpRenderOptions.Renderable)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderOptions.RenderableHash} (param ${pRenderableHash}) because it does not exist.`);\n\t\t\ttmpRenderOptions.Valid = false;\n\t\t}\n\n\t\ttmpRenderOptions.DestinationAddress = (typeof (pRenderDestinationAddress) === 'string') ? pRenderDestinationAddress :\n\t\t\t(typeof (tmpRenderOptions.Renderable.ContentDestinationAddress) === 'string') ? tmpRenderOptions.Renderable.ContentDestinationAddress :\n\t\t\t\t(typeof (this.options.DefaultDestinationAddress) === 'string') ? this.options.DefaultDestinationAddress : false;\n\t\tif (!tmpRenderOptions.DestinationAddress)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderOptions.RenderableHash} (param ${pRenderableHash}) because it does not have a valid destination address (param ${pRenderDestinationAddress}).`);\n\t\t\ttmpRenderOptions.Valid = false;\n\t\t}\n\n\t\tif (typeof(pTemplateRecordAddress) === 'object')\n\t\t{\n\t\t\ttmpRenderOptions.RecordAddress = 'Passed in as object';\n\t\t\ttmpRenderOptions.Record = pTemplateRecordAddress;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttmpRenderOptions.RecordAddress = (typeof (pTemplateRecordAddress) === 'string') ? pTemplateRecordAddress :\n\t\t\t\t(typeof (tmpRenderOptions.Renderable.DefaultTemplateRecordAddress) === 'string') ? tmpRenderOptions.Renderable.DefaultTemplateRecordAddress :\n\t\t\t\t(typeof (this.options.DefaultTemplateRecordAddress) === 'string') ? this.options.DefaultTemplateRecordAddress : false;\n\t\t\ttmpRenderOptions.Record = (typeof (tmpRenderOptions.RecordAddress) === 'string') ? this.pict.DataProvider.getDataByAddress(tmpRenderOptions.RecordAddress) : undefined;\n\t\t}\n\n\t\treturn tmpRenderOptions;\n\t}\n\n\t/**\n\t * Assigns the content to the destination address.\n\t *\n\t * For DRY purposes on the three flavors of render.\n\t *\n\t * @param {Renderable} pRenderable - The renderable to render.\n\t * @param {string} pRenderDestinationAddress - The address where the renderable will be rendered.\n\t * @param {string} pContent - The content to render.\n\t * @returns {boolean} - Returns true if the content was assigned successfully.\n\t * @memberof PictView\n\t */\n\tassignRenderContent(pRenderable, pRenderDestinationAddress, pContent)\n\t{\n\t\treturn this.pict.ContentAssignment.projectContent(pRenderable.RenderMethod, pRenderDestinationAddress, pContent, pRenderable.TestAddress);\n\t}\n\n\t/**\n\t * Render a renderable from this view.\n\t *\n\t * @param {string} [pRenderable] - The hash of the renderable to render.\n\t * @param {string} [pRenderDestinationAddress] - The address where the renderable will be rendered.\n\t * @param {string|object} [pTemplateRecordAddress] - The address where the data for the template is stored.\n\t * @return {boolean}\n\t */\n\trender(pRenderable, pRenderDestinationAddress, pTemplateRecordAddress)\n\t{\n\t\tlet tmpRenderableHash = (typeof (pRenderable) === 'string') ? pRenderable :\n\t\t\t(typeof (this.options.DefaultRenderable) == 'string') ? this.options.DefaultRenderable : false;\n\t\tif (!tmpRenderableHash)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderable}) because it is not a valid renderable.`);\n\t\t\treturn false;\n\t\t}\n\n\t\tlet tmpRenderable;\n\t\tif (tmpRenderableHash == '__Virtual')\n\t\t{\n\t\t\ttmpRenderable = {\n\t\t\t\t\tRenderableHash: '__Virtual',\n\t\t\t\t\tTemplateHash: this.renderables[this.options.DefaultRenderable].TemplateHash,\n\t\t\t\t\tDestinationAddress: pRenderDestinationAddress,\n\t\t\t\t\tRenderMethod: 'virtual-assignment'\n\t\t\t\t};\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttmpRenderable = this.renderables[tmpRenderableHash];\n\t\t}\n\n\t\tif (!tmpRenderable)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderable}) because it does not exist.`);\n\t\t\treturn false;\n\t\t}\n\n\t\tlet tmpRenderDestinationAddress = (typeof (pRenderDestinationAddress) === 'string') ? pRenderDestinationAddress :\n\t\t\t(typeof (tmpRenderable.ContentDestinationAddress) === 'string') ? tmpRenderable.ContentDestinationAddress :\n\t\t\t\t(typeof (this.options.DefaultDestinationAddress) === 'string') ? this.options.DefaultDestinationAddress : false;\n\n\t\tif (!tmpRenderDestinationAddress)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderable}) because it does not have a valid destination address.`);\n\t\t\treturn false;\n\t\t}\n\n\t\tlet tmpRecordAddress;\n\t\tlet tmpRecord;\n\n\t\tif (typeof(pTemplateRecordAddress) === 'object')\n\t\t{\n\t\t\ttmpRecord = pTemplateRecordAddress;\n\t\t\ttmpRecordAddress = 'Passed in as object';\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttmpRecordAddress = (typeof (pTemplateRecordAddress) === 'string') ? pTemplateRecordAddress :\n\t\t\t\t(typeof (tmpRenderable.DefaultTemplateRecordAddress) === 'string') ? tmpRenderable.DefaultTemplateRecordAddress :\n\t\t\t\t\t(typeof (this.options.DefaultTemplateRecordAddress) === 'string') ? this.options.DefaultTemplateRecordAddress : false;\n\n\t\t\ttmpRecord = (typeof (tmpRecordAddress) === 'string') ? this.pict.DataProvider.getDataByAddress(tmpRecordAddress) : undefined;\n\t\t}\n\n\t\t// Execute the developer-overridable pre-render behavior\n\t\tthis.onBeforeRender(tmpRenderable, tmpRenderDestinationAddress, tmpRecord);\n\n\t\tif (this.pict.LogControlFlow)\n\t\t{\n\t\t\tthis.log.trace(`PICT-ControlFlow VIEW [${this.UUID}]::[${this.Hash}] Renderable[${tmpRenderableHash}] Destination[${tmpRenderDestinationAddress}] TemplateRecordAddress[${tmpRecordAddress}] render:`);\n\t\t}\n\t\tif (this.pict.LogNoisiness > 0)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} Beginning Render of Renderable[${tmpRenderableHash}] to Destination [${tmpRenderDestinationAddress}]...`);\n\t\t}\n\t\t// Generate the content output from the template and data\n\t\tlet tmpContent = this.pict.parseTemplateByHash(tmpRenderable.TemplateHash, tmpRecord, null, [this]);\n\n\t\tif (this.pict.LogNoisiness > 0)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} Assigning Renderable[${tmpRenderableHash}] content length ${tmpContent.length} to Destination [${tmpRenderDestinationAddress}] using render method [${tmpRenderable.RenderMethod}].`);\n\t\t}\n\n\t\t// Assign the content to the destination address\n\t\tthis.pict.ContentAssignment.projectContent(tmpRenderable.RenderMethod, tmpRenderDestinationAddress, tmpContent, tmpRenderable.TestAddress);\n\n\t\t// Execute the developer-overridable post-render behavior\n\t\tthis.onAfterRender(tmpRenderable, tmpRenderDestinationAddress, tmpRecord, tmpContent);\n\n\t\tthis.lastRenderedTimestamp = this.pict.log.getTimeStamp();\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Render a renderable from this view.\n\t *\n\t * @param {string|ErrorCallback} [pRenderableHash] - The hash of the renderable to render.\n\t * @param {string|ErrorCallback} [pRenderDestinationAddress] - The address where the renderable will be rendered.\n\t * @param {string|object|ErrorCallback} [pTemplateRecordAddress] - The address where the data for the template is stored.\n\t * @param {ErrorCallback} [fCallback] - The callback to call when the async operation is complete.\n\t *\n\t * @return {void}\n\t */\n\trenderAsync(pRenderableHash, pRenderDestinationAddress, pTemplateRecordAddress, fCallback)\n\t{\n\t\tlet tmpRenderableHash = (typeof (pRenderableHash) === 'string') ? pRenderableHash :\n\t\t\t(typeof (this.options.DefaultRenderable) == 'string') ? this.options.DefaultRenderable : false;\n\n\t\t// Allow the callback to be passed in as the last parameter no matter what\n\t\t/** @type {ErrorCallback} */\n\t\tlet tmpCallback = (typeof(fCallback) === 'function') ? fCallback :\n\t\t\t\t\t\t\t(typeof(pTemplateRecordAddress) === 'function') ? pTemplateRecordAddress :\n\t\t\t\t\t\t\t(typeof(pRenderDestinationAddress) === 'function') ? pRenderDestinationAddress :\n\t\t\t\t\t\t\t(typeof(pRenderableHash) === 'function') ? pRenderableHash :\n\t\t\t\t\t\t\tnull;\n\n\t\tif (!tmpCallback)\n\t\t{\n\t\t\tthis.log.warn(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.Name} renderAsync was called without a valid callback.  A callback will be generated but this could lead to race conditions.`);\n\t\t\ttmpCallback = (pError) =>\n\t\t\t\t{\n\t\t\t\t\tif (pError)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.Name} renderAsync Auto Callback Error: ${pError}`, pError);\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t}\n\n\t\tif (!tmpRenderableHash)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not asynchronously render ${tmpRenderableHash} (param ${pRenderableHash}because it is not a valid renderable.`);\n\t\t\treturn tmpCallback(new Error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not asynchronously render ${tmpRenderableHash} (param ${pRenderableHash}because it is not a valid renderable.`));\n\t\t}\n\n\t\tlet tmpRenderable;\n\t\tif (tmpRenderableHash == '__Virtual')\n\t\t{\n\t\t\ttmpRenderable = {\n\t\t\t\t\tRenderableHash: '__Virtual',\n\t\t\t\t\tTemplateHash: this.renderables[this.options.DefaultRenderable].TemplateHash,\n\t\t\t\t\tDestinationAddress: pRenderDestinationAddress,\n\t\t\t\t\tRenderMethod: 'virtual-assignment'\n\t\t\t\t};\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttmpRenderable = this.renderables[tmpRenderableHash];\n\t\t}\n\n\t\tif (!tmpRenderable)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderableHash}) because it does not exist.`);\n\t\t\treturn tmpCallback(new Error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderableHash}) because it does not exist.`));\n\t\t}\n\n\t\tlet tmpRenderDestinationAddress = (typeof (pRenderDestinationAddress) === 'string') ? pRenderDestinationAddress :\n\t\t\t(typeof (tmpRenderable.ContentDestinationAddress) === 'string') ? tmpRenderable.ContentDestinationAddress :\n\t\t\t\t(typeof (this.options.DefaultDestinationAddress) === 'string') ? this.options.DefaultDestinationAddress : false;\n\n\t\tif (!tmpRenderDestinationAddress)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderableHash}) because it does not have a valid destination address.`);\n\t\t\treturn tmpCallback(new Error(`Could not render ${tmpRenderableHash}`));\n\t\t}\n\n\t\tlet tmpRecordAddress;\n\t\tlet tmpRecord;\n\n\t\tif (typeof(pTemplateRecordAddress) === 'object')\n\t\t{\n\t\t\ttmpRecord = pTemplateRecordAddress;\n\t\t\ttmpRecordAddress = 'Passed in as object';\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttmpRecordAddress = (typeof (pTemplateRecordAddress) === 'string') ? pTemplateRecordAddress :\n\t\t\t\t(typeof (tmpRenderable.DefaultTemplateRecordAddress) === 'string') ? tmpRenderable.DefaultTemplateRecordAddress :\n\t\t\t\t\t(typeof (this.options.DefaultTemplateRecordAddress) === 'string') ? this.options.DefaultTemplateRecordAddress : false;\n\n\t\t\ttmpRecord = (typeof (tmpRecordAddress) === 'string') ? this.pict.DataProvider.getDataByAddress(tmpRecordAddress) : undefined;\n\t\t}\n\n\t\tif (this.pict.LogControlFlow)\n\t\t{\n\t\t\tthis.log.trace(`PICT-ControlFlow VIEW [${this.UUID}]::[${this.Hash}] Renderable[${tmpRenderableHash}] Destination[${tmpRenderDestinationAddress}] TemplateRecordAddress[${tmpRecordAddress}] renderAsync:`);\n\t\t}\n\t\tif (this.pict.LogNoisiness > 2)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} Beginning Asynchronous Render (callback-style)...`);\n\t\t}\n\n\t\tlet tmpAnticipate = this.fable.newAnticipate();\n\n\t\ttmpAnticipate.anticipate(\n\t\t\t(fOnBeforeRenderCallback) =>\n\t\t\t{\n\t\t\t\tthis.onBeforeRender(tmpRenderable, tmpRenderDestinationAddress, tmpRecord);\n\t\t\t\tthis.onBeforeRenderAsync(fOnBeforeRenderCallback);\n\t\t\t});\n\n\t\tlet tmpContent;\n\t\ttmpAnticipate.anticipate(\n\t\t\t(fAsyncTemplateCallback) =>\n\t\t\t{\n\t\t\t\t// Render the template (asynchronously)\n\t\t\t\tthis.pict.parseTemplateByHash(tmpRenderable.TemplateHash, tmpRecord,\n\t\t\t\t\t(pError, pContent) =>\n\t\t\t\t\t{\n\t\t\t\t\t\tif (pError)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render (asynchronously) ${tmpRenderableHash} (param ${pRenderableHash}) because it did not parse the template.`, pError);\n\t\t\t\t\t\t\treturn fAsyncTemplateCallback(pError);\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttmpContent = pContent;\n\n\t\t\t\t\t\tif (this.pict.LogNoisiness > 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} Assigning Renderable[${tmpRenderableHash}] content length ${pContent.length} to Destination [${tmpRenderDestinationAddress}] using Async render method ${tmpRenderable.RenderMethod}.`);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthis.pict.ContentAssignment.projectContent(tmpRenderable.RenderMethod, tmpRenderDestinationAddress, pContent, tmpRenderable.TestAddress);\n\n\t\t\t\t\t\t// Execute the developer-overridable asynchronous post-render behavior\n\t\t\t\t\t\tthis.lastRenderedTimestamp = this.pict.log.getTimeStamp();\n\t\t\t\t\t\treturn fAsyncTemplateCallback();\n\t\t\t\t\t}, [this]);\n\t\t\t});\n\n\t\ttmpAnticipate.anticipate(\n\t\t\t(fOnAfterRenderCallback) =>\n\t\t\t{\n\t\t\t\tthis.onAfterRender(tmpRenderable, tmpRenderDestinationAddress, tmpRecord, tmpContent);\n\t\t\t\tthis.onAfterRenderAsync(fOnAfterRenderCallback);\n\t\t\t});\n\n\t\ttmpAnticipate.wait(tmpCallback);\n\t}\n\n\t/**\n\t * Renders the default renderable.\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\trenderDefaultAsync(fCallback)\n\t{\n\t\t// Render the default renderable\n\t\tthis.renderAsync(fCallback);\n\t}\n\n\t/**\n\t * @param {string} [pRenderableHash] - The hash of the renderable to render.\n\t * @param {string} [pRenderDestinationAddress] - The address where the renderable will be rendered.\n\t * @param {string|object} [pTemplateRecordAddress] - The address of (or actual obejct) where the data for the template is stored.\n\t */\n\tbasicRender(pRenderableHash, pRenderDestinationAddress, pTemplateRecordAddress)\n\t{\n\t\tlet tmpRenderOptions = this.buildRenderOptions(pRenderableHash, pRenderDestinationAddress, pTemplateRecordAddress);\n\t\tif (tmpRenderOptions.Valid)\n\t\t{\n\t\t\tthis.assignRenderContent(tmpRenderOptions.Renderable, tmpRenderOptions.DestinationAddress, this.pict.parseTemplateByHash(tmpRenderOptions.Renderable.TemplateHash, tmpRenderOptions.Record, null, [this]));\n\t\t\treturn true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not perform a basic render of ${tmpRenderOptions.RenderableHash} because it is not valid.`);\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * @param {string|ErrorCallback} [pRenderableHash] - The hash of the renderable to render.\n\t * @param {string|ErrorCallback} [pRenderDestinationAddress] - The address where the renderable will be rendered.\n\t * @param {string|Object|ErrorCallback} [pTemplateRecordAddress] - The address of (or actual obejct) where the data for the template is stored.\n\t * @param {ErrorCallback} [fCallback] - The callback to call when the async operation is complete.\n\t */\n\tbasicRenderAsync(pRenderableHash, pRenderDestinationAddress, pTemplateRecordAddress, fCallback)\n\t{\n\t\t// Allow the callback to be passed in as the last parameter no matter what\n\t\t/** @type {ErrorCallback} */\n\t\tlet tmpCallback = (typeof(fCallback) === 'function') ? fCallback :\n\t\t\t\t\t\t\t(typeof(pTemplateRecordAddress) === 'function') ? pTemplateRecordAddress :\n\t\t\t\t\t\t\t(typeof(pRenderDestinationAddress) === 'function') ? pRenderDestinationAddress :\n\t\t\t\t\t\t\t(typeof(pRenderableHash) === 'function') ? pRenderableHash :\n\t\t\t\t\t\t\tnull;\n\t\tif (!tmpCallback)\n\t\t{\n\t\t\tthis.log.warn(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.Name} basicRenderAsync was called without a valid callback.  A callback will be generated but this could lead to race conditions.`);\n\t\t\ttmpCallback = (pError) =>\n\t\t\t\t{\n\t\t\t\t\tif (pError)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.Name} basicRenderAsync Auto Callback Error: ${pError}`, pError);\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t}\n\n\t\tconst tmpRenderOptions = this.buildRenderOptions(pRenderableHash, pRenderDestinationAddress, pTemplateRecordAddress);\n\t\tif (tmpRenderOptions.Valid)\n\t\t{\n\t\t\tthis.pict.parseTemplateByHash(tmpRenderOptions.Renderable.TemplateHash, tmpRenderOptions.Record,\n\t\t\t\t/**\n\t\t\t\t * @param {Error} [pError] - The error that occurred during template parsing.\n\t\t\t\t * @param {string} [pContent] - The content that was rendered from the template.\n\t\t\t\t */\n\t\t\t\t(pError, pContent) =>\n\t\t\t\t{\n\t\t\t\t\tif (pError)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render (asynchronously) ${tmpRenderOptions.RenderableHash} because it did not parse the template.`, pError);\n\t\t\t\t\t\treturn tmpCallback(pError);\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.assignRenderContent(tmpRenderOptions.Renderable, tmpRenderOptions.DestinationAddress, pContent);\n\t\t\t\t\treturn tmpCallback();\n\t\t\t\t}, [this]);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlet tmpErrorMessage = `PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not perform a basic render of ${tmpRenderOptions.RenderableHash} because it is not valid.`;\n\t\t\tthis.log.error(tmpErrorMessage);\n\t\t\treturn tmpCallback(new Error(tmpErrorMessage));\n\t\t}\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers after the view is rendered.\n\t *\n\t * @param {Renderable} pRenderable - The renderable that was rendered.\n\t * @param {string} pRenderDestinationAddress - The address where the renderable was rendered.\n\t * @param {any} pRecord - The record (data) that was used by the renderable.\n\t * @param {string} pContent - The content that was rendered.\n\t */\n\tonAfterRender(pRenderable, pRenderDestinationAddress, pRecord, pContent)\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onAfterRender:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers after the view is rendered (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonAfterRenderAsync(fCallback)\n\t{\n\t\treturn fCallback();\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*                            Code Section: Solver                            */\n\t/* -------------------------------------------------------------------------- */\n\t/**\n\t * Lifecycle hook that triggers before the view is solved.\n\t */\n\tonBeforeSolve()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onBeforeSolve:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers before the view is solved (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonBeforeSolveAsync(fCallback)\n\t{\n\t\tthis.onBeforeSolve();\n\t\treturn fCallback();\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers when the view is solved.\n\t */\n\tonSolve()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onSolve:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers when the view is solved (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonSolveAsync(fCallback)\n\t{\n\t\tthis.onSolve();\n\t\treturn fCallback();\n\t}\n\n\t/**\n\t * Performs view solving and triggers lifecycle hooks.\n\t *\n\t * @return {boolean} - True if the view was solved successfully, false otherwise.\n\t */\n\tsolve()\n\t{\n\t\tif (this.pict.LogNoisiness > 2)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} executing solve() function...`);\n\t\t}\n\t\tthis.onBeforeSolve();\n\t\tthis.onSolve();\n\t\tthis.onAfterSolve();\n\t\tthis.lastSolvedTimestamp = this.pict.log.getTimeStamp();\n\t\treturn true;\n\t}\n\n\t/**\n\t * Performs view solving and triggers lifecycle hooks (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tsolveAsync(fCallback)\n\t{\n\t\tlet tmpAnticipate = this.pict.instantiateServiceProviderWithoutRegistration('Anticipate');\n\n\t\t/** @type {ErrorCallback} */\n\t\tlet tmpCallback = (typeof(fCallback) === 'function') ? fCallback : null;\n\t\tif (!tmpCallback)\n\t\t{\n\t\t\tthis.log.warn(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.Name} solveAsync was called without a valid callback.  A callback will be generated but this could lead to race conditions.`);\n\t\t\ttmpCallback = (pError) =>\n\t\t\t\t{\n\t\t\t\t\tif (pError)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.Name} solveAsync Auto Callback Error: ${pError}`, pError);\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t}\n\n\t\ttmpAnticipate.anticipate(this.onBeforeSolveAsync.bind(this));\n\t\ttmpAnticipate.anticipate(this.onSolveAsync.bind(this));\n\t\ttmpAnticipate.anticipate(this.onAfterSolveAsync.bind(this));\n\n\t\ttmpAnticipate.wait(\n\t\t\t(pError) =>\n\t\t\t{\n\t\t\t\tif (this.pict.LogNoisiness > 2)\n\t\t\t\t{\n\t\t\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} solveAsync() complete.`);\n\t\t\t\t}\n\t\t\t\tthis.lastSolvedTimestamp = this.pict.log.getTimeStamp();\n\t\t\t\treturn tmpCallback(pError);\n\t\t\t});\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers after the view is solved.\n\t */\n\tonAfterSolve()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onAfterSolve:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers after the view is solved (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonAfterSolveAsync(fCallback)\n\t{\n\t\tthis.onAfterSolve();\n\t\treturn fCallback();\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*                     Code Section: Marshal From View                        */\n\t/* -------------------------------------------------------------------------- */\n\t/**\n\t * Lifecycle hook that triggers before data is marshaled from the view.\n\t *\n\t * @return {boolean} - True if the operation was successful, false otherwise.\n\t */\n\tonBeforeMarshalFromView()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onBeforeMarshalFromView:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers before data is marshaled from the view (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonBeforeMarshalFromViewAsync(fCallback)\n\t{\n\t\tthis.onBeforeMarshalFromView();\n\t\treturn fCallback();\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers when data is marshaled from the view.\n\t */\n\tonMarshalFromView()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onMarshalFromView:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers when data is marshaled from the view (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonMarshalFromViewAsync(fCallback)\n\t{\n\n\t\tthis.onMarshalFromView();\n\t\treturn fCallback();\n\t}\n\n\t/**\n\t * Marshals data from the view.\n\t *\n\t * @return {boolean} - True if the operation was successful, false otherwise.\n\t */\n\tmarshalFromView()\n\t{\n\t\tif (this.pict.LogNoisiness > 2)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} executing solve() function...`);\n\t\t}\n\t\tthis.onBeforeMarshalFromView();\n\t\tthis.onMarshalFromView();\n\t\tthis.onAfterMarshalFromView();\n\t\tthis.lastMarshalFromViewTimestamp = this.pict.log.getTimeStamp();\n\t\treturn true;\n\t}\n\n\t/**\n\t * Marshals data from the view (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tmarshalFromViewAsync(fCallback)\n\t{\n\t\tlet tmpAnticipate = this.pict.instantiateServiceProviderWithoutRegistration('Anticipate');\n\n\t\t/** @type {ErrorCallback} */\n\t\tlet tmpCallback = (typeof(fCallback) === 'function') ? fCallback : null;\n\t\tif (!tmpCallback)\n\t\t{\n\t\t\tthis.log.warn(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.Name} marshalFromViewAsync was called without a valid callback.  A callback will be generated but this could lead to race conditions.`);\n\t\t\ttmpCallback = (pError) =>\n\t\t\t\t{\n\t\t\t\t\tif (pError)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.Name} marshalFromViewAsync Auto Callback Error: ${pError}`, pError);\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t}\n\n\t\ttmpAnticipate.anticipate(this.onBeforeMarshalFromViewAsync.bind(this));\n\t\ttmpAnticipate.anticipate(this.onMarshalFromViewAsync.bind(this));\n\t\ttmpAnticipate.anticipate(this.onAfterMarshalFromViewAsync.bind(this));\n\n\t\ttmpAnticipate.wait(\n\t\t\t(pError) =>\n\t\t\t{\n\t\t\t\tif (this.pict.LogNoisiness > 2)\n\t\t\t\t{\n\t\t\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} marshalFromViewAsync() complete.`);\n\t\t\t\t}\n\t\t\t\tthis.lastMarshalFromViewTimestamp = this.pict.log.getTimeStamp();\n\t\t\t\treturn tmpCallback(pError);\n\t\t\t});\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers after data is marshaled from the view.\n\t */\n\tonAfterMarshalFromView()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onAfterMarshalFromView:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers after data is marshaled from the view (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonAfterMarshalFromViewAsync(fCallback)\n\t{\n\t\tthis.onAfterMarshalFromView();\n\t\treturn fCallback();\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*                     Code Section: Marshal To View                          */\n\t/* -------------------------------------------------------------------------- */\n\t/**\n\t * Lifecycle hook that triggers before data is marshaled into the view.\n\t */\n\tonBeforeMarshalToView()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onBeforeMarshalToView:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers before data is marshaled into the view (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonBeforeMarshalToViewAsync(fCallback)\n\t{\n\t\tthis.onBeforeMarshalToView();\n\t\treturn fCallback();\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers when data is marshaled into the view.\n\t */\n\tonMarshalToView()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onMarshalToView:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers when data is marshaled into the view (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonMarshalToViewAsync(fCallback)\n\t{\n\t\tthis.onMarshalToView();\n\t\treturn fCallback();\n\t}\n\n\t/**\n\t * Marshals data into the view.\n\t *\n\t * @return {boolean} - True if the operation was successful, false otherwise.\n\t */\n\tmarshalToView()\n\t{\n\t\tif (this.pict.LogNoisiness > 2)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} executing solve() function...`);\n\t\t}\n\t\tthis.onBeforeMarshalToView();\n\t\tthis.onMarshalToView();\n\t\tthis.onAfterMarshalToView();\n\t\tthis.lastMarshalToViewTimestamp = this.pict.log.getTimeStamp();\n\t\treturn true;\n\t}\n\n\t/**\n\t * Marshals data into the view (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tmarshalToViewAsync(fCallback)\n\t{\n\t\tlet tmpAnticipate = this.pict.instantiateServiceProviderWithoutRegistration('Anticipate');\n\n\n\t\t/** @type {ErrorCallback} */\n\t\tlet tmpCallback = (typeof(fCallback) === 'function') ? fCallback : null;\n\t\tif (!tmpCallback)\n\t\t{\n\t\t\tthis.log.warn(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.Name} marshalToViewAsync was called without a valid callback.  A callback will be generated but this could lead to race conditions.`);\n\t\t\ttmpCallback = (pError) =>\n\t\t\t\t{\n\t\t\t\t\tif (pError)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.Name} marshalToViewAsync Auto Callback Error: ${pError}`, pError);\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t}\n\t\ttmpAnticipate.anticipate(this.onBeforeMarshalToViewAsync.bind(this));\n\t\ttmpAnticipate.anticipate(this.onMarshalToViewAsync.bind(this));\n\t\ttmpAnticipate.anticipate(this.onAfterMarshalToViewAsync.bind(this));\n\n\t\ttmpAnticipate.wait(\n\t\t\t(pError) =>\n\t\t\t{\n\t\t\t\tif (this.pict.LogNoisiness > 2)\n\t\t\t\t{\n\t\t\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} marshalToViewAsync() complete.`);\n\t\t\t\t}\n\t\t\t\tthis.lastMarshalToViewTimestamp = this.pict.log.getTimeStamp();\n\t\t\t\treturn tmpCallback(pError);\n\t\t\t});\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers after data is marshaled into the view.\n\t */\n\tonAfterMarshalToView()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onAfterMarshalToView:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers after data is marshaled into the view (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonAfterMarshalToViewAsync(fCallback)\n\t{\n\t\tthis.onAfterMarshalToView();\n\t\treturn fCallback();\n\t}\n\n\t/** @return {boolean} - True if the object is a PictView. */\n\tget isPictView()\n\t{\n\t\treturn true;\n\t}\n}\n\nmodule.exports = PictView;\n","module.exports={\n\t\"RenderOnLoad\": true,\n\n\t\"GridWidth\": \"auto\",\n\t\"GridRowHeight\": 40,\n\n\t\"GridBodyHeight\": \"auto\",\n\t\"GridBodyMinHeight\": 130,\n\n\t\"GridColumnMinWidth\": 50,\n\t\"GridColumnWidthResizable\": true,\n\t\"GridColumnHeightResizable\": false,\n\n\t\"GridColumnFrozenCount\": 0,\n\t\"GridColumnFrozenBorderWidth\": 3,\n\n\t\"GridScrollX\": true,\n\t\"GridScrollY\": true,\n\n\t\"GridShowDummyRows\": false,\n\t\"GridDraggableRows\": false,\n\n\t\"GridSelectionUnit\": \"cell\",\n\n\t\"DefaultRenderable\": \"TuiGrid-Wrap\",\n\t\"DefaultDestinationAddress\": \"#TuiGrid-Container-Div\",\n\n\t\"Templates\": [\n\t\t{\n\t\t\t\"Hash\": \"TuiGrid-Container\",\n\t\t\t\"Template\": \"<!-- TuiGrid-Container Rendering Soon -->\"\n\t\t}\n\t],\n\n\t\"Renderables\": [\n\t\t{\n\t\t\t\"RenderableHash\": \"TuiGrid-Wrap\",\n\t\t\t\"TemplateHash\": \"TuiGrid-Container\",\n\t\t\t\"DestinationAddress\": \"#TuiGrid-Container-Div\"\n\t\t}\n\t],\n\n\t\"TargetElementAddress\": \"#TuiGrid-Container-Div\",\n\n\t\"GridDataAddress\": false,\n\n\t\"GridData\": [\n\t\t{\n\t\t\t\"idrecord\": 1,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 1\",\n\t\t\t\"description\": \"description 1\"\n\t\t},\n\t\t{\n\t\t\t\"idrecord\": 2,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 2\",\n\t\t\t\"description\": \"description 2\"\n\t\t},\n\t\t{\n\t\t\t\"idrecord\": 3,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 3\",\n\t\t\t\"description\": \"description 3\"\n\t\t},\n\t\t{\n\t\t\t\"idrecord\": 4,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 4\",\n\t\t\t\"description\": \"description 4\"\n\t\t},\n\t\t{\n\t\t\t\"idrecord\": 5,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 5\",\n\t\t\t\"description\": \"description 5\"\n\t\t},\n\t\t{\n\t\t\t\"idrecord\": 6,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 6\",\n\t\t\t\"description\": \"description 6\"\n\t\t},\n\t\t{\n\t\t\t\"idrecord\": 7,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 7\",\n\t\t\t\"description\": \"description 7\"\n\t\t},\n\t\t{\n\t\t\t\"idrecord\": 8,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 8\",\n\t\t\t\"description\": \"description 8\"\n\t\t},\n\t\t{\n\t\t\t\"idrecord\": 9,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 9\",\n\t\t\t\"description\": \"description 9\"\n\t\t}\n\t],\n\t\"ColumnsToSolveOnChange\": {},\n\t\"TuiColumnSchema\": [\n\t\t{\n\t\t\t\"header\": \"IDRecord\",\n\t\t\t\"name\": \"idrecord\",\n\t\t\t\"PictTriggerSolveOnChange\": true\n\t\t},\n\t\t{\n\t\t\t\"header\": \"Entity\",\n\t\t\t\"name\": \"entity\",\n\t\t\t\"PictTriggerSolveOnChange\": true\n\t\t},\n\t\t{\n\t\t\t\"header\": \"Name\",\n\t\t\t\"name\": \"name\",\n\t\t\t\"editor\": \"text\"\n\t\t},\n\t\t{\n\t\t\t\"header\": \"Description\",\n\t\t\t\"name\": \"description\",\n\t\t\t\"editor\": \"text\"\n\t\t}\n\t]\n}\n","const libPictViewClass = require('pict-view');\n\n/**\n * @typedef {typeof import('tui-grid').default} TuiGridClass\n * @typedef {import('tui-grid').default} TuiGrid\n */\n\nclass PictSectionTuiGrid extends libPictViewClass\n{\n\tconstructor(pFable, pOptions, pServiceHash)\n\t{\n\t\tlet tmpOptions = Object.assign({}, require('./Pict-Section-TuiGrid-DefaultConfiguration.json'), pOptions);\n\n\t\tsuper(pFable, tmpOptions, pServiceHash);\n\n\t\t/** @type {{ [key: string]: any }} */\n\t\tthis.services;\n\t\tthis.dateFormatter = this.fable.instantiateServiceProviderWithoutRegistration('Dates');\n\n\t\tthis.initialRenderComplete = false;\n\n\t\tthis.customFormatters = {};\n\t}\n\n\tonBeforeInitialize()\n\t{\n\t\tsuper.onBeforeInitialize();\n\n\t\t/** @type {TuiGridClass} */\n\t\tthis._tuiGridPrototype = null;\n\n\t\t/** @type {TuiGrid} */\n\t\tthis.tuiGrid = null;\n\n\t\tthis.customHeaders = require('./Pict-TuiGrid-Headers.js');\n\t\tthis.customEditors = require('./Pict-TuiGrid-Editors.js');\n\t\tthis.initializeCustomFormatters();\n\n\t\tthis.columnSchema = false;\n\t\tthis.targetElementAddress = false;\n\t\t/** @type {Array<any>} */\n\t\tthis.gridData = null;\n\n\t\treturn super.onBeforeInitialize();\n\t}\n\n\tinitializeCustomFormatters()\n\t{\n\t\tthis.customFormatters.FormatterTwoDigitNumber = (pCell) =>\n\t\t\t{\n\t\t\t\tlet tmpCellValue = Number.parseFloat(pCell.value);\n\t\t\t\tlet tmpPrecision = pCell?.decimalPrecision ?? 2;\n\t\t\t\tif (isNaN(tmpCellValue))\n\t\t\t\t{\n\t\t\t\t\treturn '';\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\treturn this.fable.Math.roundPrecise(pCell.value, tmpPrecision);\n\t\t\t\t}\n\t\t\t};\n\t\tthis.customFormatters.FormatterCurrencyNumber = (pCell) =>\n\t\t\t{\n\t\t\t\tlet tmpPrecision = pCell?.decimalPrecision ?? 2;\n\t\t\t\tlet tmpCellValue = this.fable.DataFormat.formatterDollars(pCell.value, tmpPrecision);\n\t\t\t\treturn tmpCellValue;\n\t\t\t};\n\n\t\tthis.customFormatters.FormatterRoundedNumber = (pCell) =>\n\t\t\t{\n\t\t\t\tlet tmpCellValue = Number.parseFloat(pCell.value);\n\t\t\t\tlet tmpPrecision = pCell?.decimalPrecision ?? 2;\n\t\t\t\tif (isNaN(tmpCellValue))\n\t\t\t\t{\n\t\t\t\t\treturn '';\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\treturn this.fable.Math.roundPrecise(pCell.value, tmpPrecision);\n\t\t\t\t}\n\t\t\t};\n\n\t\tthis.customFormatters.FormatterDate = (pCell) =>\n\t\t\t{\n\t\t\t\tlet tmpDate = this.fable.Dates.dayJS.utc(pCell.value);\n\t\t\t\tif (pCell.dateformat)\n\t\t\t\t{\n\t\t\t\t\treturn tmpDate.format(pCell.dateformat);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\treturn tmpDate.format();\n\t\t\t\t}\n\t\t\t};\n\t}\n\n\t/**\n\t * Construct a tuiGrid instance and connect it to the browser's dom object for the grid.  If the\n\t * prototype is not passed in, try to find a window.tui (where the library puts itself) in the window\n\t * object.\n\t *\n\t * @param {TuiGridClass} [pTuiGridPrototype] - The TuiGrid prototype class expected to be loaded in the browser\n\t * @returns\n\t */\n\tconnectTuiGridPrototype(pTuiGridPrototype)\n\t{\n\t\tif (typeof (pTuiGridPrototype) != 'undefined')\n\t\t{\n\t\t\tthis._tuiGridPrototype = pTuiGridPrototype;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.log.trace(`PICT-TuiGrid No TuiGrid Prototype defined or explicitly set; looking for it in the window object.`);\n\t\t\tif (typeof (window) != 'undefined')\n\t\t\t{\n\t\t\t\tif ((typeof (window.tui) != 'undefined') && (typeof (window.tui.Grid) != 'undefined'))\n\t\t\t\t{\n\t\t\t\t\tthis.log.trace(`PICT-TuiGrid Found TuiGrid Prototype in window.tuiGrid.`);\n\t\t\t\t\tthis.connectTuiGridPrototype(window.tui.Grid);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.log.error(`PICT-TuiGrid No TuiGrid Prototype found in window.tuiGrid.`);\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.log.error(`PICT-TuiGrid No TuiGrid Prototype found in window.tuiGrid -- window object unavailable.`);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @typedef {Object} TUIGridCellChange\n\t * @property {any} rowKey - The key of the row that changed.\n\t * @property {string} columnName - The name of the column that changed.\n\t * @property {any} value - The \"current\" value of the cell. Slightly different meaning in preChangeHandler vs changeHandler (before / after the change is applied).\n\t * @property {any} [nextValue] - The value that the cell will have after the change. Only populated in preChangeHandler (not changeHandler).\n\t * @property {any} [prevValue] - The value that the cell had before the change. Only populated in changeHandler (not preChangeHandler).\n\t */\n\n\t/**\n\t * @typedef {Object} TUIGridChangeEvent\n\t * @property {TuiGrid} instance - The TuiGrid instance that fired the event.\n\t * @property {TUIGridCellChange[]} changes - An array of objects representing the changes to grid cell values.\n\t */\n\n\t/**\n\t * Interface method for handling changesets from the TuiGrid control. Invoked before the change has been applied to the affected cells.\n\t *\n\t * * The pre-change cell value is stored in value while the new cell value is stored in nextValue.\n\t * * Any changes made to nextValue in this method will be reflected in the grid for that cell.\n\t *\n\t * @param {TUIGridChangeEvent} pChangeData - An event containing an array of objects representing the changes to grid cell values.\n\t */\n\tpreChangeHandler(pChangeData)\n\t{\n\t}\n\n\t/**\n\t * Interface method for handling changesets from the TuiGrid control. Invoked after the change has been applied to the affected cells.\n\t *\n\t * * Performs solver trigger for changes to any columns configured in \"ColumnsToSolveOnChange\" or with \"PictTriggerSolveOnChange\": true on a specific row.\n\t * * The previous cell value is stored in prevValue while the next cell value is stored in value.\n\t *\n\t * @param {TUIGridChangeEvent} pChangeData - An event object containing an array of objects representing the changes to grid cell values.\n\t */\n\tchangeHandler(pChangeData)\n\t{\n\t\tlet tmpSolverNecessary = false;\n\n\t\tfor (let i = 0; i < pChangeData.changes.length; i++)\n\t\t{\n\t\t\tlet tmpEntity = pChangeData.instance.getValue(pChangeData.changes[i].rowKey, 'entity');\n\t\t\tlet tmpIDRecord = pChangeData.instance.getValue(pChangeData.changes[i].rowKey, 'idrecord');\n\n\t\t\tthis.log.trace(`Generic Change Handler for TuiGrid Fired, Entity ${tmpEntity} IDRecord ${tmpIDRecord} setting Column [${pChangeData.changes[i].value}] to new Value [${pChangeData.changes[i].value}]`);\n\n\t\t\tif (this.options.ColumnsToSolveOnChange.hasOwnProperty(pChangeData.changes[i].columnName))\n\t\t\t{\n\t\t\t\ttmpSolverNecessary = true;\n\t\t\t}\n\t\t}\n\n\t\tif (tmpSolverNecessary)\n\t\t{\n\t\t\tthis.services.PictApplication.solve();\n\t\t}\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers after the view is rendered.\n\t *\n\t * @param {import('pict-view').Renderable} pRenderable - The renderable that was rendered.\n\t * @param {string} pRenderDestinationAddress - The address where the renderable was rendered.\n\t * @param {any} pRecord - The record (data) that was used by the renderable.\n\t * @param {string} pContent - The content that was rendered.\n\t */\n\tonAfterRender(pRenderable, pRenderDestinationAddress, pRecord, pContent)\n\t{\n\t\tif (!this.initialRenderComplete)\n\t\t{\n\t\t\tthis.onAfterInitialRender();\n\t\t\tthis.initialRenderComplete = true;\n\t\t}\n\t\treturn super.onAfterRender(pRenderable, pRenderDestinationAddress, pRecord, pContent);\n\t}\n\n\tonAfterInitialRender()\n\t{\n\t\t// This is where we wire up and initialize the tuigrid control -- the initial render has put the placeholder content in place.\n\t\t// Check for a tuigrid prototype, and find it in the window object it if it doesn't exist\n\t\tif (!this._tuiGridPrototype)\n\t\t{\n\t\t\tthis.connectTuiGridPrototype();\n\t\t}\n\t\t// This is where we wire up and initialize the tuigrid control\n\t\tif (this.tuiGrid)\n\t\t{\n\t\t\t// The grid is already initialized.\n\t\t\tthis.log.error(`TuiGrid going to ${this.options.TargetElementAddress} is already initialized!`);\n\t\t\treturn false;\n\t\t}\n\n\t\tif (this.options.GridDataAddress)\n\t\t{\n\t\t\tconst tmpAddressSpace =\n\t\t\t{\n\t\t\t\tFable: this.fable,\n\t\t\t\tPict: this.fable,\n\t\t\t\tAppData: this.AppData,\n\t\t\t\tBundle: this.Bundle,\n\t\t\t\tOptions: this.options,\n\t\t\t};\n\t\t\tlet tmpAddressedData = this.fable.manifest.getValueByHash(tmpAddressSpace, this.options.GridDataAddress);\n\t\t\tif (typeof (tmpAddressedData) != 'object')\n\t\t\t{\n\t\t\t\tthis.log.error(`Address for GridData [${this.options.GridDataAddress}] did not return an object; it was a ${typeof (tmpAddressedData)}.`);\n\t\t\t\tthis.gridData = [];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.gridData = JSON.parse(JSON.stringify(tmpAddressedData));\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.gridData = [];\n\t\t}\n\n\t\tlet tmpTargetElementSet = this.services.ContentAssignment.getElement(this.options.TargetElementAddress);\n\t\tif (tmpTargetElementSet.length < 1)\n\t\t{\n\t\t\tthis.log.error(`Could not find target element [${this.options.TargetElementAddress}] for TuiGrid!  Rendering won't function properly.`);\n\t\t\tthis.targetElement = false;\n\t\t\treturn false;\n\t\t}\n\n\t\t// Just go for the first one.\n\t\tthis.targetElement = tmpTargetElementSet[0];\n\n\t\t// Check to see if there are any custom formatters.\n\t\tthis.columnSchema = this.options.TuiColumnSchema;\n\t\t// Setup the solver and custom schema handlers.\n\t\tfor (let i = 0; i < this.columnSchema.length; i++)\n\t\t{\n\t\t\tlet tmpColumn = this.columnSchema[i];\n\t\t\t// If this bit is set on a column, the Form solver will trigger each time a change happens to that column.\n\t\t\tif (tmpColumn.PictTriggerSolveOnChange)\n\t\t\t{\n\t\t\t\tthis.options.ColumnsToSolveOnChange[tmpColumn.name] = tmpColumn;\n\t\t\t}\n\t\t\t// Look to see if there is an internal formatter that matches the type\n\t\t\tif ((tmpColumn.hasOwnProperty('formatter')) && (this.customFormatters.hasOwnProperty(tmpColumn.formatter)))\n\t\t\t{\n\t\t\t\t// Assign our special formatter to the column.\n\t\t\t\ttmpColumn.formatter = this.customFormatters[tmpColumn.formatter];\n\t\t\t}\n\t\t\t// Look to see if there is an editor stanza\n\t\t\tif (tmpColumn.hasOwnProperty('editor'))\n\t\t\t{\n\t\t\t\t// Look to see if there is an internal editor that matches the type\n\t\t\t\tif ((tmpColumn.editor.hasOwnProperty('type'))\n\t\t\t\t\t&& (typeof (tmpColumn.editor.type) == 'string')\n\t\t\t\t\t&& (this.customEditors.hasOwnProperty(tmpColumn.editor.type)))\n\t\t\t\t{\n\t\t\t\t\t// Assign our special editor to the column.\n\t\t\t\t\ttmpColumn.editor.type = this.customEditors[tmpColumn.editor.type];\n\t\t\t\t}\n\n\t\t\t\t// Look to see if there is an internal editor that matches the type\n\t\t\t\tif ((tmpColumn.editor.hasOwnProperty('options'))\n\t\t\t\t\t&& (typeof (tmpColumn.editor.options) == 'object')\n\t\t\t\t\t&& (tmpColumn.editor.options.hasOwnProperty('listItems'))\n\t\t\t\t\t&& (typeof (tmpColumn.editor.options.listItems) == 'string'))\n\t\t\t\t{\n\t\t\t\t\t// Look for this address!  For the Record object, we will pass in the options.\n\t\t\t\t\tconst tmpAddressSpace =\n\t\t\t\t\t{\n\t\t\t\t\t\tFable: this.fable,\n\t\t\t\t\t\tPict: this.fable,\n\t\t\t\t\t\tAppData: this.AppData,\n\t\t\t\t\t\tBundle: this.Bundle,\n\t\t\t\t\t\tOptions: this.options,\n\t\t\t\t\t};\n\t\t\t\t\tlet tmpListItems = this.fable.manifest.getValueByHash(tmpAddressSpace, tmpColumn.editor.options.listItems);\n\t\t\t\t\tif (typeof (tmpListItems) == 'object')\n\t\t\t\t\t{\n\t\t\t\t\t\ttmpColumn.editor.options.listItems = tmpListItems;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.log.warn(`Pict TuiGrid for column [${tmpColumn.name}] had [${tmpColumn.editor.options.listItems}] as a listItems address, but it didn't return an object.  It was a [${typeof (tmpListItems)}].  Setting to empty list.`);\n\t\t\t\t\t\ttmpColumn.editor.options.listItems = [];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.gridSettings = {\n\t\t\t\tdata: this.gridData,\n\t\t\t\tel: this.targetElement,\n\t\t\t\tcolumns: this.columnSchema,\n\n\t\t\t\t// This is no bueno, yo\n\t\t\t\tusageStatistics: false,\n\n\t\t\t\tscrollY: this.options.GridScrollY,\n\n\t\t\t\tcolumnOptions:\n\t\t\t\t{\n\t\t\t\t\tresizable: this.options.GridColumnWidthResizable\n\t\t\t\t}\n\t\t\t};\n\n\t\tthis.customConfigureGridSettings();\n\n\t\tlet libTuiGrid = this._tuiGridPrototype;\n\t\tthis.tuiGrid = new libTuiGrid(this.gridSettings);\n\t\tthis.tuiGrid.on('beforeChange', (pChangeData) =>\n\t\t{\n\t\t\t//TODO: the exported event type from tui-grid is incomplete so mask it here\n\t\t\t/** @type {any} */\n\t\t\tconst tmpChangeData = pChangeData;\n\t\t\tthis.preChangeHandler(tmpChangeData);\n\t\t});\n\t\tthis.tuiGrid.on('afterChange', (pChangeData) =>\n\t\t{\n\t\t\t//TODO: the exported event type from tui-grid is incomplete so mask it here\n\t\t\t/** @type {any} */\n\t\t\tconst tmpChangeData = pChangeData;\n\t\t\tthis.changeHandler(tmpChangeData);\n\t\t});\n\t}\n\n\t/**\n\t * This is expected to be overloaded with anything that needs to be added to the grid configuration\n\t * before the Toast UI Grid component is initialized in the browser.\n\t */\n\tcustomConfigureGridSettings ()\n\t{\n\t\t// This can be overloaded to tweak up the this.gridSettings\n\t}\n\n\t/**\n\t * Lookup a specific record in the toast ui grid data set by value and pull the value from the map into the browser.\n\t *\n\t * This function exists because if we mutate data in the map of plain javascript records tuigrid\n\t * manages, it doesn't automatically refresh the UI.  From reading the TUIGrid documentation, this\n\t * is because they don't want to refresh until all the data has changed.\n\t *\n\t * The best practice has been to have a hidden column behind the tuigrid that maps the correct entity\n\t * value set to the record in the map (e.g. IDRecord in one column and Entity in another).\n\t *\n\t * @param {string} pCellColumnToBeSet - the Column hash to set\n\t * @param {string} pCellValueToSet - Value to be set\n\t * @param {string} pLookupValue - the Value to look up in tuigrid\n\t * @param {string} pLookupColumn - the key of the column in the tuigrid record (which are plain javascript objects defined by the tuigrid config)\n\t * @return {void}\n\t */\n\tSetGridValue(pCellColumnToBeSet, pCellValueToSet, pLookupValue, pLookupColumn)\n\t{\n\t\tif (typeof (pLookupValue) == 'undefined')\n\t\t{\n\t\t\tconsole.log(`Could not set grid value [${pCellColumnToBeSet}] = [${pCellValueToSet}] looked up by [${pLookupColumn}]::[${pLookupValue}].  No valid lookup value!`);\n\t\t\treturn;\n\t\t}\n\n\t\tif (!this.tuiGrid)\n\t\t{\n\t\t\tthis.log.warn(`Could not set grid value [${pCellColumnToBeSet}] = [${pCellValueToSet}] looked up by [${pLookupColumn}]::[${pLookupValue}].  No valid grid!`);\n\t\t\treturn;\n\t\t}\n\n\t\tconst tmpData = this.tuiGrid.getData();\n\n\t\tfor (let i = 0; i < tmpData.length; i++)\n\t\t{\n\t\t\tconst tmpRecord = tmpData[i];\n\n\t\t\tif (tmpRecord[pLookupColumn] == pLookupValue)\n\t\t\t{\n\t\t\t\tthis.tuiGrid.setValue(i, pCellColumnToBeSet, pCellValueToSet);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Lookup a specific record in the toast ui grid data set by row key and pull in a column.\n\t *\n\t * This function exists because if we mutate data in the map of plain javascript records tuigrid\n\t * manages, it doesn't automatically refresh the UI.  From reading the TUIGrid documentation, this\n\t * is because they don't want to refresh until all the data has changed.\n\t *\n\t *\n\t * @param {string} pCellColumnToBeSet - the Column hash to set\n\t * @param {string} pCellValueToSet - Value to be set\n\t * @param {string} pRowKey - the key of the row to be set\n\t * @return {boolean}\n\t */\n\tSetGridValueByRowKey(pCellColumnToBeSet, pCellValueToSet, pRowKey)\n\t{\n\t\tif (typeof (pRowKey) == 'undefined')\n\t\t{\n\t\t\tthis.log.error(`Could not set grid value [${pCellColumnToBeSet}] = [${pCellValueToSet}] looked up by row key [${pRowKey}].  No valid row key!`);\n\t\t\treturn false;\n\t\t}\n\n\t\tif (!this.tuiGrid)\n\t\t{\n\t\t\tthis.log.warn(`Could not set grid value [${pCellColumnToBeSet}] = [${pCellValueToSet}] looked up by row key [${pRowKey}].  No valid grid!`);\n\t\t\treturn false;\n\t\t}\n\n\t\tthis.tuiGrid.setValue(pRowKey, pCellColumnToBeSet, pCellValueToSet);\n\t\treturn true;\n\t}\n}\n\nmodule.exports = PictSectionTuiGrid;\n\n/** @type {Record<string, any>} */\nmodule.exports.default_configuration = require('./Pict-Section-TuiGrid-DefaultConfiguration.json');\n","// Custom number editor class with an option for precision\nclass tuiCustomEditorNumber\n{\n\tconstructor(pProperties)\n\t{\n\t\tconst tmpElement = document.createElement('input');\n\n\t\tconst decimalPrecision = (pProperties.columnInfo.editor.options.decimalPrecision) ? pProperties.columnInfo.editor.options.decimalPrecision : 3;\n\n\t\ttmpElement.type = 'number';\n\t\ttmpElement.value = String(pProperties.value);\n\t\ttmpElement.oninput = (pElement) =>\n\t\t{\n\t\t\tif (pElement.target instanceof HTMLInputElement)\n\t\t\t{\n\t\t\t\tconst tmpCastNumber = parseFloat(pElement.target.value).toFixed(decimalPrecision).toString()\n\t\t\t\tif (tmpCastNumber.length < parseFloat(pElement.target.value).toString().length)\n\t\t\t\t{\n\t\t\t\t\tpElement.target.value = tmpCastNumber;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tthis.Element = tmpElement;\n\t}\n\n\tgetElement()\n\t{\n\t\treturn this.Element;\n\t}\n\n\tgetValue()\n\t{\n\t\treturn this.Element.value;\n\t}\n\n\tmounted()\n\t{\n\t\tthis.Element.select();\n\t}\n}\n\nmodule.exports = tuiCustomEditorNumber;\n","// Custom number editor class with an option for precision\nclass tuiCustomEditorText\n{\n\tconstructor(pProperties)\n\t{\n\t\tconst tmpElement = document.createElement('input');\n\n\t\ttmpElement.type = 'text';\n\t\ttmpElement.value = String(pProperties.value);\n\t\ttmpElement.placeholder =  pProperties.columnInfo.editor.options.placeholder || '';\n\t\ttmpElement.pattern = pProperties.columnInfo.editor.options.pattern || '';\n\t\ttmpElement.minLength = pProperties.columnInfo.editor.options.minLength || '';\n\t\ttmpElement.maxLength = pProperties.columnInfo.editor.options.maxLength || '';\n\t\ttmpElement.required = pProperties.columnInfo.editor.options.required || '';\n\n\t\tthis.Element = tmpElement;\n\t}\n\n\tgetElement()\n\t{\n\t\treturn this.Element;\n\t}\n\n\tgetValue()\n\t{\n\t\treturn this.Element.value;\n\t}\n\n\tmounted()\n\t{\n\t\tthis.Element.select();\n\t}\n}\n\nmodule.exports = tuiCustomEditorText;\n","module.exports =\n{\n\tEditorNumber: require('./Pict-TuiGrid-Editor-Number.js'),\n\tEditorText: require('./Pict-TuiGrid-Editor-Text.js'),\n};\n","// Custom column header where the header is hidden\nclass tuiCustomColumnHeaderNone\n{\n\tconstructor()\n\t{\n\t\tlet tmpElement = document.createElement('input');\n\t\ttmpElement.type = 'hidden';\n\t\ttmpElement.value = '';\n\t\tthis.Element = tmpElement;\n\t}\n\n\tgetElement()\n\t{\n\t\treturn this.Element;\n\t}\n\n\trender()\n\t{\n\t\t// Noop!\n\t}\n}\n\nmodule.exports =\n{\n\tCustomColumnHeaderNone: tuiCustomColumnHeaderNone,\n};\n"]}