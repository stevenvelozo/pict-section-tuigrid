{"version":3,"sources":["pict-section-tuigrid.compatible.min.js","node_modules/browser-pack/_prelude.js","node_modules/fable-serviceproviderbase/source/Fable-ServiceProviderBase.js","node_modules/pict-view/source/Pict-View.js","source/Pict-Section-TuiGrid-DefaultConfiguration.json","source/Pict-Section-TuiGrid.js","source/Pict-TuiGrid-Editor-Number.js","source/Pict-TuiGrid-Editors.js","source/Pict-TuiGrid-Formatters.js","source/Pict-TuiGrid-Headers.js"],"names":["_get","Reflect","get","bind","target","property","receiver","base","_superPropBase","desc","Object","getOwnPropertyDescriptor","call","arguments","length","value","apply","this","object","prototype","hasOwnProperty","_getPrototypeOf","_callSuper","t","o","e","_possibleConstructorReturn","_isNativeReflectConstruct","construct","constructor","self","_typeof","TypeError","_assertThisInitialized","ReferenceError","Boolean","valueOf","setPrototypeOf","getPrototypeOf","__proto__","_inherits","subClass","superClass","create","writable","configurable","defineProperty","_setPrototypeOf","p","_classCallCheck","instance","Constructor","_defineProperties","props","i","descriptor","enumerable","_toPropertyKey","key","_createClass","protoProps","staticProps","_defineProperty","obj","_toPrimitive","r","Symbol","toPrimitive","String","Number","iterator","f","exports","module","define","amd","window","global","PictSectionTuigrid","n","c","require","u","a","Error","code","FableServiceProviderBase","pFable","pOptions","pServiceHash","isFable","connectFable","fable","UUID","getUUID","options","concat","Math","floor","random","serviceType","Hash","tmpErrorMessage","console","log","Logging","services","servicesMap","CoreServiceProviderBase","libFableServiceBase","defaultPictViewSettings","DefaultRenderable","DefaultDestinationAddress","DefaultTemplateRecordAddress","ViewIdentifier","AutoInitialize","AutoInitializeOrdinal","AutoRender","AutoRenderOrdinal","AutoSolveWithApp","AutoSolveOrdinal","CSSHash","CSS","CSSProvider","CSSPriority","Templates","DefaultTemplates","Renderables","Manifests","PictView","_libFableServiceBase","_this","assign","JSON","parse","stringify","pict","AppData","initializeTimestamp","lastSolvedTimestamp","lastRenderedTimestamp","lastMarshalFromViewTimestamp","lastMarshalToViewTimestamp","tmpTemplate","Source","TemplateProvider","addTemplate","Template","error","tmpDefaultTemplate","addDefaultTemplate","Prefix","Postfix","tmpCSSHash","tmpCSSProvider","CSSMap","addCSS","renderables","addRenderable","pRenderableHash","pTemplateHash","pDefaultTemplateDataAddress","pDefaultDestinationAddress","pRenderMethod","tmpRenderable","RenderableHash","TemplateHash","DefaultTemplateDataAddress","RenderMethod","LogNoisiness","trace","fCallback","onBeforeInitialize","onInitialize","LogControlFlow","warn","onAfterInitialize","getTimeStamp","_this2","tmpAnticipate","instantiateServiceProviderWithoutRegistration","info","anticipate","onBeforeInitializeAsync","onInitializeAsync","onAfterInitializeAsync","wait","pError","pRenderable","pRenderDestinationAddress","pData","pTemplateDataAddress","tmpRenderableHash","tmpDataAddress","tmpData","tmpRenderDestinationAddress","ContentDestinationAddress","DataProvider","getDataByAddress","undefined","onBeforeRender","tmpContent","parseTemplateByHash","ContentAssignment","appendContent","prependContent","getElement","assignContent","onAfterRender","_this3","newAnticipate","fOnBeforeRenderCallback","onBeforeRenderAsync","fAsyncTemplateCallback","pContent","fOnAfterRenderCallback","onAfterRenderAsync","renderAsync","onBeforeSolve","onSolve","onAfterSolve","_this4","onBeforeSolveAsync","onSolveAsync","onAfterSolveAsync","onBeforeMarshalFromView","onMarshalFromView","onAfterMarshalFromView","_this5","onBeforeMarshalFromViewAsync","onMarshalFromViewAsync","onAfterMarshalFromViewAsync","onBeforeMarshalToView","onMarshalToView","onAfterMarshalToView","_this6","onBeforeMarshalToViewAsync","onMarshalToViewAsync","onAfterMarshalToViewAsync","RenderOnLoad","GridWidth","GridRowHeight","GridBodyHeight","GridBodyMinHeight","GridColumnMinWidth","GridColumnWidthResizable","GridColumnHeightResizable","GridColumnFrozenCount","GridColumnFrozenBorderWidth","GridScrollX","GridScrollY","GridShowDummyRows","GridDraggableRows","GridSelectionUnit","DestinationAddress","TargetElementAddress","GridDataAddress","GridData","idrecord","entity","name","description","ColumnsToSolveOnChange","TuiColumnSchema","header","PictTriggerSolveOnChange","editor","PictSectionTuiGrid","_libPictViewClass","_this7","initialRenderComplete","_tuiGridPrototype","tuiGrid","customHeaders","customEditors","customFormatters","columnSchema","targetElementAddress","gridData","pTuiGridPrototype","tui","Grid","connectTuiGridPrototype","pChangeData","tmpSolverNecessary","changes","tmpEntity","getValue","rowKey","tmpIDRecord","columnName","PictApplication","solve","onAfterInitialRender","_this8","tmpAddressedData","manifest","getValueByHash","tmpTargetElementSet","targetElement","tmpColumn","formatter","type","listItems","tmpListItems","Options","gridSettings","data","el","columns","usageStatistics","scrollY","columnOptions","resizable","customConfigureGridSettings","libTuiGrid","on","preChangeHandler","changeHandler","pCellColumnToBeSet","pCellValueToSet","pLookupValue","pLookupColumn","getData","setValue","pRowKey","default_configuration","tuiCustomEditorNumber","pProperties","tmpElement","document","createElement","decimalPrecision","columnInfo","oninput","pElement","tmpCastNumber","parseFloat","toFixed","toString","Element","select","tuiGridHeaders","EditorNumber","tuiGridFormatters","pCell","tmpCellValue","isNaN","FormatterTwoDigitNumber","tuiCustomColumnHeaderNone","CustomColumnHeaderNone"],"mappings":"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","file":"pict-section-tuigrid.compatible.min.js","sourcesContent":["(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.PictSectionTuigrid = f()}})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){\n/**\n* Fable Service Base\n* @author <steven@velozo.com>\n*/\n\nclass FableServiceProviderBase\n{\n\t// The constructor can be used in two ways:\n\t// 1) With a fable, options object and service hash (the options object and service hash are optional)\n\t// 2) With an object or nothing as the first parameter, where it will be treated as the options object\n\tconstructor(pFable, pOptions, pServiceHash)\n\t{\n\t\t// Check if a fable was passed in; connect it if so\n\t\tif ((typeof(pFable) === 'object') && pFable.isFable)\n\t\t{\n\t\t\tthis.connectFable(pFable);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.fable = false;\n\t\t}\n\n\t\t// initialize options and UUID based on whether the fable was passed in or not.\n\t\tif (this.fable)\n\t\t{\n\t\t\tthis.UUID = pFable.getUUID();\n\t\t\tthis.options = (typeof(pOptions) === 'object') ? pOptions\n\t\t\t\t\t\t\t: {};\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// With no fable, check to see if there was an object passed into either of the first two\n\t\t\t// Parameters, and if so, treat it as the options object\n\t\t\tthis.options = ((typeof(pFable) === 'object') && !pFable.isFable) ? pFable\n\t\t\t\t\t\t\t: (typeof(pOptions) === 'object') ? pOptions\n\t\t\t\t\t\t\t: {};\n\t\t\tthis.UUID = `CORE-SVC-${Math.floor((Math.random() * (99999 - 10000)) + 10000)}`\n\t\t}\n\n\t\t// It's expected that the deriving class will set this\n\t\tthis.serviceType = `Unknown-${this.UUID}`;\n\n\t\t// The service hash is used to identify the specific instantiation of the service in the services map\n\t\tthis.Hash = (typeof(pServiceHash) === 'string') ? pServiceHash \n\t\t\t\t\t: (!this.fable && (typeof(pOptions) === 'string')) ? pOptions\n\t\t\t\t\t: `${this.UUID}`;\n\t}\n\n\tconnectFable(pFable)\n\t{\n\t\tif ((typeof(pFable) !== 'object') || (!pFable.isFable))\n\t\t{\n\t\t\tlet tmpErrorMessage = `Fable Service Provider Base: Cannot connect to Fable, invalid Fable object passed in.  The pFable parameter was a [${typeof(pFable)}].}`;\n\t\t\tconsole.log(tmpErrorMessage);\n\t\t\treturn new Error(tmpErrorMessage);\n\t\t}\n\n\t\tif (!this.fable)\n\t\t{\n\t\t\tthis.fable = pFable;\n\t\t}\n\n\t\tif (!this.log)\n\t\t{\n\t\t\tthis.log = this.fable.Logging;\n\t\t}\n\t\tif (!this.services)\n\t\t{\n\t\t\tthis.services = this.fable.services;\n\t\t}\n\n\t\tif (!this.servicesMap)\n\t\t{\n\t\t\tthis.servicesMap = this.fable.servicesMap;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tstatic isFableService = true;\n}\n\nmodule.exports = FableServiceProviderBase;\n\n// This is left here in case we want to go back to having different code/base class for \"core\" services\nmodule.exports.CoreServiceProviderBase = FableServiceProviderBase;\n},{}],2:[function(require,module,exports){\nconst libFableServiceBase = require('fable-serviceproviderbase');\n\nconst defaultPictViewSettings = (\n\t{\n\t\tDefaultRenderable: false,\n\t\tDefaultDestinationAddress: false,\n\t\tDefaultTemplateRecordAddress: false,\n\n\t\tViewIdentifier: false,\n\n\t\t// If this is set to true, when the App initializes this will.\n\t\t// After the App initializes, initialize will be called as soon as it's added.\n\t\tAutoInitialize: true,\n\t\tAutoInitializeOrdinal: 0,\n\n\t\t// If this is set to true, when the App autorenders (on load) this will.\n\t\t// After the App initializes, render will be called as soon as it's added.\n\t\tAutoRender: true,\n\t\tAutoRenderOrdinal: 0,\n\n\t\tAutoSolveWithApp: true,\n\t\tAutoSolveOrdinal: 0,\n\n\t\tCSSHash: false,\n\t\tCSS: false,\n\t\tCSSProvider: false,\n\t\tCSSPriority: 500,\n\n\t\tTemplates: [],\n\n\t\tDefaultTemplates: [],\n\n\t\tRenderables: [],\n\n\t\tManifests: {}\n\t});\n\nclass PictView extends libFableServiceBase\n{\n\tconstructor(pFable, pOptions, pServiceHash)\n\t{\n\t\t// Intersect default options, parent constructor, service information\n\t\tlet tmpOptions = Object.assign({}, JSON.parse(JSON.stringify(defaultPictViewSettings)), pOptions);\n\t\tsuper(pFable, tmpOptions, pServiceHash);\n\t\tif (!this.options.ViewIdentifier)\n\t\t{\n\t\t\tthis.options.ViewIdentifier = `AutoViewID-${this.fable.getUUID()}`;\n\t\t}\n\t\tthis.serviceType = 'PictView';\n\t\t// Convenience and consistency naming\n\t\tthis.pict = this.fable;\n\t\t// Wire in the essential Pict application state\n\t\tthis.AppData = this.pict.AppData;\n\n\t\tthis.initializeTimestamp = false;\n\t\tthis.lastSolvedTimestamp = false;\n\t\tthis.lastRenderedTimestamp = false;\n\t\tthis.lastMarshalFromViewTimestamp = false;\n\t\tthis.lastMarshalToViewTimestamp = false;\n\n\t\t// Load all templates from the array in the options\n\t\t// Templates are in the form of {Hash:'Some-Template-Hash',Template:'Template content',Source:'TemplateSource'}\n\t\tfor (let i = 0; i < this.options.Templates.length; i++)\n\t\t{\n\t\t\tlet tmpTemplate = this.options.Templates[i];\n\n\t\t\tif (!tmpTemplate.hasOwnProperty('Hash') || !tmpTemplate.hasOwnProperty('Template'))\n\t\t\t{\n\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not load Template ${i} in the options array.`, tmpTemplate);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (!tmpTemplate.Source)\n\t\t\t\t{\n\t\t\t\t\ttmpTemplate.Source = `PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} options object.`;\n\t\t\t\t}\n\t\t\t\tthis.pict.TemplateProvider.addTemplate(tmpTemplate.Hash, tmpTemplate.Template, tmpTemplate.Source);\n\t\t\t}\n\t\t}\n\n\t\t// Load all default templates from the array in the options\n\t\t// Templates are in the form of {Prefix:'',Postfix:'-List-Row',Template:'Template content',Source:'TemplateSourceString'}\n\t\tfor (let i = 0; i < this.options.DefaultTemplates.length; i++)\n\t\t{\n\t\t\tlet tmpDefaultTemplate = this.options.DefaultTemplates[i];\n\n\t\t\tif (!tmpDefaultTemplate.hasOwnProperty('Postfix') || !tmpDefaultTemplate.hasOwnProperty('Template'))\n\t\t\t{\n\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not load Default Template ${i} in the options array.`, tmpDefaultTemplate);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (!tmpDefaultTemplate.Source)\n\t\t\t\t{\n\t\t\t\t\ttmpDefaultTemplate.Source = `PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} options object.`;\n\t\t\t\t}\n\t\t\t\tthis.pict.TemplateProvider.addDefaultTemplate(tmpDefaultTemplate.Prefix, tmpDefaultTemplate.Postfix, tmpDefaultTemplate.Template, tmpDefaultTemplate.Source);\n\t\t\t}\n\t\t}\n\n\t\t// Load the CSS if it's available\n\t\tif (this.options.CSS)\n\t\t{\n\t\t\tlet tmpCSSHash = this.options.CSSHash ? this.options.CSSHash : `View-${this.options.ViewIdentifier}`;\n\t\t\tlet tmpCSSProvider = this.options.CSSProvider ? this.options.CSSProvider : tmpCSSHash;\n\t\t\tthis.pict.CSSMap.addCSS(tmpCSSHash, this.options.CSS, tmpCSSProvider, this.options.CSSPriority);\n\t\t}\n\n\t\t// Load all renderables\n\t\t// Renderables are launchable renderable instructions with templates\n\t\t// They look as such: {Identifier:'ContentEntry', TemplateHash:'Content-Entry-Section-Main', ContentDestinationAddress:'#ContentSection', RecordAddress:'AppData.Content.DefaultText', ManifestTransformation:'ManyfestHash', ManifestDestinationAddress:'AppData.Content.DataToTransformContent'}\n\t\t// The only parts that are necessary are Identifier and Template\n\t\t// A developer can then do render('ContentEntry') and it just kinda works.  Or they can override the ContentDestinationAddress\n\t\tthis.renderables = {};\n\t\tfor (let i = 0; i < this.options.Renderables.length; i++)\n\t\t{\n\t\t\tlet tmpRenderable = this.options.Renderables[i];\n\t\t\tthis.addRenderable(this.options.Renderables[i]);\n\t\t}\n\t}\n\n\taddRenderable(pRenderableHash, pTemplateHash, pDefaultTemplateDataAddress, pDefaultDestinationAddress, pRenderMethod)\n\t{\n\t\tlet tmpRenderable = false;\n\n\t\tif (typeof(pRenderableHash) == 'object')\n\t\t{\n\t\t\t// The developer passed in the renderable as an object.\n\t\t\t// Use theirs instead!\n\t\t\ttmpRenderable = pRenderableHash;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlet tmpRenderMethod = (typeof(pRenderMethod) !== 'string') ? pRenderMethod : 'replace';\n\t\t\ttmpRenderable = (\n\t\t\t\t{\n\t\t\t\t\tRenderableHash: pRenderableHash,\n\t\t\t\t\tTemplateHash: pTemplateHash,\n\t\t\t\t\tDefaultTemplateDataAddress: pDefaultTemplateDataAddress,\n\t\t\t\t\tDefaultDestinationAddress: pDefaultDestinationAddress,\n\t\t\t\t\tRenderMethod: tmpRenderMethod\n\t\t\t\t});\n\t\t}\n\n\t\tif ((typeof(tmpRenderable.RenderableHash) != 'string') || (typeof(tmpRenderable.TemplateHash) != 'string'))\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not load Renderable; RenderableHash or TemplateHash are invalid.`, tmpRenderable);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (this.pict.LogNoisiness > 0)\n\t\t\t{\n\t\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} adding renderable [${tmpRenderable.RenderableHash}] pointed to template ${tmpRenderable.TemplateHash}.`);\n\t\t\t}\n\n\t\t\tthis.renderables[tmpRenderable.RenderableHash] = tmpRenderable;\n\t\t}\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*                        Code Section: Initialization                        */\n\t/* -------------------------------------------------------------------------- */\n\tonBeforeInitialize()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onBeforeInitialize:`);\n\t\t}\n\t\treturn true;\n\t}\n\tonBeforeInitializeAsync(fCallback)\n\t{\n\t\tthis.onBeforeInitialize();\n\t\treturn fCallback();\n\t}\n\n\tonInitialize()\n\t{\n\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onInitialize:`);\n\t\t}\n\t\treturn true;\n\t}\n\tonInitializeAsync(fCallback)\n\t{\n\t\tthis.onInitialize();\n\t\treturn fCallback();\n\t}\n\n\tinitialize()\n\t{\n\t\tif (this.pict.LogControlFlow)\n\t\t{\n\t\t\tthis.log.trace(`PICT-ControlFlow VIEW [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} initialize:`);\n\t\t}\n\n\t\tif (!this.initializeTimestamp)\n\t\t{\n\t\t\tthis.onBeforeInitialize();\n\t\t\tthis.onInitialize();\n\t\t\tthis.onAfterInitialize();\n\t\t\tthis.initializeTimestamp = this.pict.log.getTimeStamp();\n\t\t\treturn true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.log.warn(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} initialize called but initialization is already completed.  Aborting.`);\n\t\t\treturn false;\n\t\t}\n\t}\n\tinitializeAsync(fCallback)\n\t{\n\t\tif (this.pict.LogControlFlow)\n\t\t{\n\t\t\tthis.log.trace(`PICT-ControlFlow VIEW [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} initializeAsync:`);\n\t\t}\n\n\t\tif (!this.initializeTimestamp)\n\t\t{\n\t\t\tlet tmpAnticipate = this.pict.instantiateServiceProviderWithoutRegistration('Anticipate');\n\n\t\t\tif (this.pict.LogNoisiness > 0)\n\t\t\t{\n\t\t\t\tthis.log.info(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} beginning initialization...`);\n\t\t\t}\n\n\t\t\ttmpAnticipate.anticipate(this.onBeforeInitializeAsync.bind(this));\n\t\t\ttmpAnticipate.anticipate(this.onInitializeAsync.bind(this));\n\t\t\ttmpAnticipate.anticipate(this.onAfterInitializeAsync.bind(this));\n\n\t\t\ttmpAnticipate.wait(\n\t\t\t\t(pError) =>\n\t\t\t\t{\n\t\t\t\t\tthis.initializeTimestamp = this.pict.log.getTimeStamp();\n\t\t\t\t\tif (this.pict.LogNoisiness > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.log.info(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} initialization complete.`);\n\t\t\t\t\t}\n\t\t\t\t\treturn fCallback();\n\t\t\t\t})\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.log.warn(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} async initialize called but initialization is already completed.  Aborting.`);\n\t\t\t// TODO: Should this be an error?\n\t\t\treturn fCallback();\n\t\t}\n\t}\n\n\tonAfterInitialize()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onAfterInitialize:`);\n\t\t}\n\t\treturn true;\n\t}\n\tonAfterInitializeAsync(fCallback)\n\t{\n\t\tthis.onAfterInitialize();\n\t\treturn fCallback();\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*                            Code Section: Render                            */\n\t/* -------------------------------------------------------------------------- */\n\tonBeforeRender(pRenderable, pRenderDestinationAddress, pData)\n\t{\n\t\t// Overload this to mess with stuff before the content gets generated from the template\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onBeforeRender:`);\n\t\t}\n\t\treturn true;\n\t}\n\tonBeforeRenderAsync(fCallback)\n\t{\n\t\treturn fCallback();\n\t}\n\n\trender(pRenderable, pRenderDestinationAddress, pTemplateDataAddress)\n\t{\n\t\tlet tmpRenderableHash = (typeof (pRenderable) === 'string') ? pRenderable :\n\t\t\t(typeof (this.options.DefaultRenderable) == 'string') ? this.options.DefaultRenderable : false;\n\t\tif (!tmpRenderableHash)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderable}) because it is not a valid renderable.`);\n\t\t\treturn false;\n\t\t}\n\n\t\tlet tmpRenderable = this.renderables[tmpRenderableHash];\n\n\t\tif (!tmpRenderable)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderable}) because it does not exist.`);\n\t\t\treturn false;\n\t\t}\n\n\t\tlet tmpRenderDestinationAddress = (typeof (pRenderDestinationAddress) === 'string') ? pRenderDestinationAddress :\n\t\t\t(typeof (tmpRenderable.ContentDestinationAddress) === 'string') ? tmpRenderable.ContentDestinationAddress :\n\t\t\t\t(typeof (this.options.DefaultDestinationAddress) === 'string') ? this.options.DefaultDestinationAddress : false;\n\n\t\tif (!tmpRenderDestinationAddress)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderable}) because it does not have a valid destination address.`);\n\t\t\treturn false;\n\t\t}\n\n\t\tlet tmpDataAddress;\n\t\tlet tmpData;\n\n\t\tif (typeof(pTemplateDataAddress) === 'object')\n\t\t{\n\t\t\ttmpData = pTemplateDataAddress;\n\t\t\ttmpDataAddress = 'Passed in as object';\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttmpDataAddress = (typeof (pTemplateDataAddress) === 'string') ? pTemplateDataAddress :\n\t\t\t\t(typeof (tmpRenderable.DefaultTemplateRecordAddress) === 'string') ? tmpRenderable.DefaultTemplateRecordAddress :\n\t\t\t\t\t(typeof (this.options.DefaultTemplateRecordAddress) === 'string') ? this.options.DefaultTemplateRecordAddress : false;\n\n\t\t\ttmpData = (typeof (tmpDataAddress) === 'string') ? this.pict.DataProvider.getDataByAddress(tmpDataAddress) : undefined;\n\t\t}\n\n\t\t// Execute the developer-overridable pre-render behavior\n\t\tthis.onBeforeRender(tmpRenderable, tmpRenderDestinationAddress, tmpData);\n\n\t\tif (this.pict.LogControlFlow)\n\t\t{\n\t\t\tthis.log.trace(`PICT-ControlFlow VIEW [${this.UUID}]::[${this.Hash}] Renderable[${tmpRenderableHash}] Destination[${tmpRenderDestinationAddress}] TemplateDataAddress[${tmpDataAddress}] render:`);\n\t\t}\n\n\t\t// Generate the content output from the template and data\n\t\tlet tmpContent = this.pict.parseTemplateByHash(tmpRenderable.TemplateHash, tmpData)\n\n\t\t// Assign the content to the destination address\n\t\tswitch(tmpRenderable.RenderMethod)\n\t\t{\n\t\t\tcase 'append':\n\t\t\t\tthis.pict.ContentAssignment.appendContent(tmpRenderDestinationAddress, tmpContent);\n\t\t\t\tbreak;\n\t\t\tcase 'prepend':\n\t\t\t\tthis.pict.ContentAssignment.prependContent(tmpRenderDestinationAddress, tmpContent);\n\t\t\t\tbreak;\n\t\t\tcase 'append_once':\n\t\t\t\t// Try to find the content in the destination address\n\t\t\t\tlet tmpExistingContent = this.pict.ContentAssignment.getElement(`#${tmpRenderableHash}`);\n\t\t\t\tif (tmpExistingContent.length < 1)\n\t\t\t\t{\n\t\t\t\t\tthis.pict.ContentAssignment.appendContent(tmpRenderDestinationAddress, tmpContent);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'replace':\n\t\t\t\t// TODO: Should this be the default?\n\t\t\tdefault:\n\t\t\t\tthis.pict.ContentAssignment.assignContent(tmpRenderDestinationAddress, tmpContent);\n\t\t\t\tbreak;\n\t\t}\n\n\t\t// Execute the developer-overridable post-render behavior\n\t\tthis.onAfterRender(tmpRenderable, tmpRenderDestinationAddress, tmpData, tmpContent)\n\n\t\tthis.lastRenderedTimestamp = this.pict.log.getTimeStamp();\n\n\t\treturn true;\n\t}\n\trenderAsync(pRenderable, pRenderDestinationAddress, pTemplateDataAddress, fCallback)\n\t{\n\t\tlet tmpRenderableHash = (typeof (pRenderable) === 'string') ? pRenderable :\n\t\t\t(typeof (this.options.DefaultRenderable) == 'string') ? this.options.DefaultRenderable : false;\n\t\tif (!tmpRenderableHash)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not asynchronously render ${tmpRenderableHash} (param ${pRenderable}because it is not a valid renderable.`);\n\t\t\treturn fCallback(Error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not asynchronously render ${tmpRenderableHash} (param ${pRenderable}because it is not a valid renderable.`));\n\t\t}\n\n\t\tlet tmpRenderable = this.renderables[tmpRenderableHash];\n\n\t\tif (!tmpRenderable)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderable}) because it does not exist.`);\n\t\t\treturn fCallback(Error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderable}) because it does not exist.`));\n\t\t}\n\n\t\tlet tmpRenderDestinationAddress = (typeof (pRenderDestinationAddress) === 'string') ? pRenderDestinationAddress :\n\t\t\t(typeof (tmpRenderable.ContentDestinationAddress) === 'string') ? tmpRenderable.ContentDestinationAddress :\n\t\t\t\t(typeof (this.options.DefaultDestinationAddress) === 'string') ? this.options.DefaultDestinationAddress : false;\n\n\t\tif (!tmpRenderDestinationAddress)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderable}) because it does not have a valid destination address.`);\n\t\t\treturn fCallback(Error(`Could not render ${tmpRenderableHash}`));\n\t\t}\n\n\t\tlet tmpDataAddress;\n\t\tlet tmpData;\n\n\t\tif (typeof(pTemplateDataAddress) === 'object')\n\t\t{\n\t\t\ttmpData = pTemplateDataAddress;\n\t\t\ttmpDataAddress = 'Passed in as object';\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttmpDataAddress = (typeof (pTemplateDataAddress) === 'string') ? pTemplateDataAddress :\n\t\t\t\t(typeof (tmpRenderable.DefaultTemplateRecordAddress) === 'string') ? tmpRenderable.DefaultTemplateRecordAddress :\n\t\t\t\t\t(typeof (this.options.DefaultTemplateRecordAddress) === 'string') ? this.options.DefaultTemplateRecordAddress : false;\n\n\t\t\ttmpData = (typeof (tmpDataAddress) === 'string') ? this.pict.DataProvider.getDataByAddress(tmpDataAddress) : undefined;\n\t\t}\n\n\t\tif (this.pict.LogControlFlow)\n\t\t{\n\t\t\tthis.log.trace(`PICT-ControlFlow VIEW [${this.UUID}]::[${this.Hash}] Renderable[${tmpRenderableHash}] Destination[${tmpRenderDestinationAddress}] TemplateDataAddress[${tmpDataAddress}] renderAsync:`);\n\t\t}\n\t\tif (this.pict.LogNoisiness > 2)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} Beginning Asynchronous Render (callback-style)...`);\n\t\t}\n\t\tif (this.pict.LogNoisiness > 4)\n\t\t{\n\t\t\tthis.log.trace(`At-render AppData: `, this.AppData);\n\t\t}\n\n\n\t\tlet tmpAnticipate = this.fable.newAnticipate();\n\n\t\ttmpAnticipate.anticipate(\n\t\t\t(fOnBeforeRenderCallback) =>\n\t\t\t{\n\t\t\t\tthis.onBeforeRender(tmpRenderable, tmpRenderDestinationAddress, tmpData);\n\t\t\t\tthis.onBeforeRenderAsync(fOnBeforeRenderCallback);\n\t\t\t});\n\n\t\ttmpAnticipate.anticipate(\n\t\t\t(fAsyncTemplateCallback) =>\n\t\t\t{\n\t\t\t\t// Render the template (asynchronously)\n\t\t\t\tthis.pict.parseTemplateByHash(tmpRenderable.TemplateHash, tmpData,\n\t\t\t\t\t(pError, pContent) =>\n\t\t\t\t\t{\n\t\t\t\t\t\tif (pError)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render (asynchronously) ${tmpRenderableHash} (param ${pRenderable}) because it did not parse the template.`, pError);\n\t\t\t\t\t\t\treturn fAsyncTemplateCallback(pError);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Assign the content to the destination address\n\t\t\t\t\t\tswitch(tmpRenderable.RenderMethod)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcase 'append':\n\t\t\t\t\t\t\t\tthis.pict.ContentAssignment.appendContent(tmpRenderDestinationAddress, pContent);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'prepend':\n\t\t\t\t\t\t\t\tthis.pict.ContentAssignment.prependContent(tmpRenderDestinationAddress, pContent);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'append_once':\n\t\t\t\t\t\t\t\t// Try to find the content in the destination address\n\t\t\t\t\t\t\t\tlet tmpExistingContent = this.pict.ContentAssignment.getElement(`#${tmpRenderableHash}`);\n\t\t\t\t\t\t\t\tif (tmpExistingContent.length < 1)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tthis.pict.ContentAssignment.appendContent(tmpRenderDestinationAddress, pContent);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcase 'replace':\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tthis.pict.ContentAssignment.assignContent(tmpRenderDestinationAddress, pContent);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Execute the developer-overridable asynchronous post-render behavior\n\t\t\t\t\t\tthis.lastRenderedTimestamp = this.pict.log.getTimeStamp();\n\t\t\t\t\t\treturn fAsyncTemplateCallback();\n\t\t\t\t\t});\n\t\t\t});\n\n\t\ttmpAnticipate.anticipate(\n\t\t\t(fOnAfterRenderCallback) =>\n\t\t\t{\n\t\t\t\tthis.onAfterRender(tmpRenderable, tmpRenderDestinationAddress, tmpData);\n\t\t\t\tthis.onAfterRenderAsync(fOnAfterRenderCallback);\n\t\t\t});\n\n\t\ttmpAnticipate.wait(fCallback);\n\t}\n\trenderDefaultAsync(fCallback)\n\t{\n\t\t// Render the default renderable (falses do the proper forward lookups of values from config and such)\n\t\tthis.renderAsync(false, false, false, fCallback);\n\t}\n\tonAfterRender(pRenderable, pRenderDestinationAddress, pData)\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onAfterRender:`);\n\t\t}\n\t\treturn true;\n\t}\n\tonAfterRenderAsync(fCallback)\n\t{\n\t\treturn fCallback();\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*                            Code Section: Solver                            */\n\t/* -------------------------------------------------------------------------- */\n\tonBeforeSolve()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onBeforeSolve:`);\n\t\t}\n\t\treturn true;\n\t}\n\tonBeforeSolveAsync(fCallback)\n\t{\n\t\tthis.onBeforeSolve();\n\t\treturn fCallback();\n\t}\n\n\tonSolve()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onSolve:`);\n\t\t}\n\t\treturn true;\n\t}\n\tonSolveAsync(fCallback)\n\t{\n\t\tthis.onSolve();\n\t\treturn fCallback();\n\t}\n\n\tsolve()\n\t{\n\t\tif (this.pict.LogNoisiness > 2)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} executing solve() function...`);\n\t\t}\n\t\tthis.onBeforeSolve();\n\t\tthis.onSolve();\n\t\tthis.onAfterSolve();\n\t\tthis.lastSolvedTimestamp = this.pict.log.getTimeStamp();\n\t\treturn true;\n\t}\n\n\tsolveAsync(fCallback)\n\t{\n\t\tlet tmpAnticipate = this.pict.instantiateServiceProviderWithoutRegistration('Anticipate');\n\n\t\ttmpAnticipate.anticipate(this.onBeforeSolveAsync.bind(this));\n\t\ttmpAnticipate.anticipate(this.onSolveAsync.bind(this));\n\t\ttmpAnticipate.anticipate(this.onAfterSolveAsync.bind(this));\n\n\t\ttmpAnticipate.wait(\n\t\t\t(pError) =>\n\t\t\t{\n\t\t\t\tif (this.pict.LogNoisiness > 2)\n\t\t\t\t{\n\t\t\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} solveAsync() complete.`);\n\t\t\t\t}\n\t\t\t\tthis.lastSolvedTimestamp = this.pict.log.getTimeStamp();\n\t\t\t\treturn fCallback(pError);\n\t\t\t});\n\t}\n\n\tonAfterSolve()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onAfterSolve:`);\n\t\t}\n\t\treturn true;\n\t}\n\tonAfterSolveAsync(fCallback)\n\t{\n\t\tthis.onAfterSolve();\n\t\treturn fCallback();\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*                     Code Section: Marshal From View                        */\n\t/* -------------------------------------------------------------------------- */\n\tonBeforeMarshalFromView()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onBeforeMarshalFromView:`);\n\t\t}\n\t\treturn true;\n\t}\n\tonBeforeMarshalFromViewAsync(fCallback)\n\t{\n\t\tthis.onBeforeMarshalFromView();\n\t\treturn fCallback();\n\t}\n\n\tonMarshalFromView()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onMarshalFromView:`);\n\t\t}\n\t\treturn true;\n\t}\n\tonMarshalFromViewAsync(fCallback)\n\t{\n\t\tthis.onMarshalFromView();\n\t\treturn fCallback();\n\t}\n\n\tmarshalFromView()\n\t{\n\t\tif (this.pict.LogNoisiness > 2)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} executing solve() function...`);\n\t\t}\n\t\tthis.onBeforeMarshalFromView();\n\t\tthis.onMarshalFromView();\n\t\tthis.onAfterMarshalFromView();\n\t\tthis.lastMarshalFromViewTimestamp = this.pict.log.getTimeStamp();\n\t\treturn true;\n\t}\n\n\tmarshalFromViewAsync(fCallback)\n\t{\n\t\tlet tmpAnticipate = this.pict.instantiateServiceProviderWithoutRegistration('Anticipate');\n\n\t\ttmpAnticipate.anticipate(this.onBeforeMarshalFromViewAsync.bind(this));\n\t\ttmpAnticipate.anticipate(this.onMarshalFromViewAsync.bind(this));\n\t\ttmpAnticipate.anticipate(this.onAfterMarshalFromViewAsync.bind(this));\n\n\t\ttmpAnticipate.wait(\n\t\t\t(pError) =>\n\t\t\t{\n\t\t\t\tif (this.pict.LogNoisiness > 2)\n\t\t\t\t{\n\t\t\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} solveAsync() complete.`);\n\t\t\t\t}\n\t\t\t\tthis.lastMarshalFromViewTimestamp = this.pict.log.getTimeStamp();\n\t\t\t\treturn fCallback(pError);\n\t\t\t});\n\t}\n\n\tonAfterMarshalFromView()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onAfterMarshalFromView:`);\n\t\t}\n\t\treturn true;\n\t}\n\tonAfterMarshalFromViewAsync(fCallback)\n\t{\n\t\tthis.onAfterMarshalFromView();\n\t\treturn fCallback();\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*                     Code Section: Marshal To View                          */\n\t/* -------------------------------------------------------------------------- */\n\tonBeforeMarshalToView()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onBeforeMarshalToView:`);\n\t\t}\n\t\treturn true;\n\t}\n\tonBeforeMarshalToViewAsync(fCallback)\n\t{\n\t\tthis.onBeforeMarshalToView();\n\t\treturn fCallback();\n\t}\n\n\tonMarshalToView()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onMarshalToView:`);\n\t\t}\n\t\treturn true;\n\t}\n\tonMarshalToViewAsync(fCallback)\n\t{\n\t\tthis.onMarshalToView();\n\t\treturn fCallback();\n\t}\n\n\tmarshalToView()\n\t{\n\t\tif (this.pict.LogNoisiness > 2)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} executing solve() function...`);\n\t\t}\n\t\tthis.onBeforeMarshalToView();\n\t\tthis.onMarshalToView();\n\t\tthis.onAfterMarshalToView();\n\t\tthis.lastMarshalToViewTimestamp = this.pict.log.getTimeStamp();\n\t\treturn true;\n\t}\n\n\tmarshalToViewAsync(fCallback)\n\t{\n\t\tlet tmpAnticipate = this.pict.instantiateServiceProviderWithoutRegistration('Anticipate');\n\n\t\ttmpAnticipate.anticipate(this.onBeforeMarshalToViewAsync.bind(this));\n\t\ttmpAnticipate.anticipate(this.onMarshalToViewAsync.bind(this));\n\t\ttmpAnticipate.anticipate(this.onAfterMarshalToViewAsync.bind(this));\n\n\t\ttmpAnticipate.wait(\n\t\t\t(pError) =>\n\t\t\t{\n\t\t\t\tif (this.pict.LogNoisiness > 2)\n\t\t\t\t{\n\t\t\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} solveAsync() complete.`);\n\t\t\t\t}\n\t\t\t\tthis.lastMarshalToViewTimestamp = this.pict.log.getTimeStamp();\n\t\t\t\treturn fCallback(pError);\n\t\t\t});\n\t}\n\n\tonAfterMarshalToView()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onAfterMarshalToView:`);\n\t\t}\n\t\treturn true;\n\t}\n\tonAfterMarshalToViewAsync(fCallback)\n\t{\n\t\tthis.onAfterMarshalToView();\n\t\treturn fCallback();\n\t}\n}\n\nmodule.exports = PictView;\n},{\"fable-serviceproviderbase\":1}],3:[function(require,module,exports){\nmodule.exports={\n\t\"RenderOnLoad\": true,\n\n\t\"GridWidth\": \"auto\",\n\t\"GridRowHeight\": 40,\n\t\n\t\"GridBodyHeight\": \"auto\",\n\t\"GridBodyMinHeight\": 130,\n\n\t\"GridColumnMinWidth\": 50,\n\t\"GridColumnWidthResizable\": true,\n\t\"GridColumnHeightResizable\": false,\n\n\t\"GridColumnFrozenCount\": 0,\n\t\"GridColumnFrozenBorderWidth\": 3,\n\n\t\"GridScrollX\": true,\n\t\"GridScrollY\": true,\n\n\t\"GridShowDummyRows\": false,\n\t\"GridDraggableRows\": false,\n\n\t\"GridSelectionUnit\": \"cell\",\n\n\t\"DefaultRenderable\": \"TuiGrid-Wrap\",\n\t\"DefaultDestinationAddress\": \"#TuiGrid-Container-Div\",\n\n\t\"Templates\": [\n\t\t{\n\t\t\t\"Hash\": \"TuiGrid-Container\",\n\t\t\t\"Template\": \"<!-- TuiGrid-Container Rendering Soon -->\"\n\t\t}\n\t],\n\n\t\"Renderables\": [\n\t\t{\n\t\t\t\"RenderableHash\": \"TuiGrid-Wrap\",\n\t\t\t\"TemplateHash\": \"TuiGrid-Container\",\n\t\t\t\"DestinationAddress\": \"#TuiGrid-Container-Div\"\n\t\t}\n\t],\n\n\t\"TargetElementAddress\": \"#TuiGrid-Container-Div\",\n\n\t\"GridDataAddress\": false,\n\n\t\"GridData\": [\n\t\t{\n\t\t\t\"idrecord\": 1,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 1\",\n\t\t\t\"description\": \"description 1\"\n\t\t},\n\t\t{\n\t\t\t\"idrecord\": 2,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 2\",\n\t\t\t\"description\": \"description 2\"\n\t\t},\n\t\t{\n\t\t\t\"idrecord\": 3,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 3\",\n\t\t\t\"description\": \"description 3\"\n\t\t},\n\t\t{\n\t\t\t\"idrecord\": 4,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 4\",\n\t\t\t\"description\": \"description 4\"\n\t\t},\n\t\t{\n\t\t\t\"idrecord\": 5,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 5\",\n\t\t\t\"description\": \"description 5\"\n\t\t},\n\t\t{\n\t\t\t\"idrecord\": 6,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 6\",\n\t\t\t\"description\": \"description 6\"\n\t\t},\n\t\t{\n\t\t\t\"idrecord\": 7,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 7\",\n\t\t\t\"description\": \"description 7\"\n\t\t},\n\t\t{\n\t\t\t\"idrecord\": 8,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 8\",\n\t\t\t\"description\": \"description 8\"\n\t\t},\n\t\t{\n\t\t\t\"idrecord\": 9,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 9\",\n\t\t\t\"description\": \"description 9\"\n\t\t}\n\t],\n\t\"ColumnsToSolveOnChange\": {},\n\t\"TuiColumnSchema\": [\n\t\t{\n\t\t\t\"header\": \"IDRecord\",\n\t\t\t\"name\": \"idrecord\",\n\t\t\t\"PictTriggerSolveOnChange\": true\n\t\t},\n\t\t{\n\t\t\t\"header\": \"Entity\",\n\t\t\t\"name\": \"entity\",\n\t\t\t\"PictTriggerSolveOnChange\": true\n\t\t},\n\t\t{\n\t\t\t\"header\": \"Name\",\n\t\t\t\"name\": \"name\",\n\t\t\t\"editor\": \"text\"\n\t\t},\n\t\t{\n\t\t\t\"header\": \"Description\",\n\t\t\t\"name\": \"description\",\n\t\t\t\"editor\": \"text\"\n\t\t}\n\t]\n}\n},{}],4:[function(require,module,exports){\nconst libPictViewClass = require('pict-view');\n\nclass PictSectionTuiGrid extends libPictViewClass\n{\n\tconstructor(pFable, pOptions, pServiceHash)\n\t{\n\t\tlet tmpOptions = Object.assign({}, require('./Pict-Section-TuiGrid-DefaultConfiguration.json'), pOptions);\n\n\t\tsuper(pFable, tmpOptions, pServiceHash);\n\n\t\tthis.initialRenderComplete = false;\n\t}\n\n\tonBeforeInitialize()\n\t{\n\t\tsuper.onBeforeInitialize();\n\n\t\tthis._tuiGridPrototype = false;\n\n\t\tthis.tuiGrid = false;\n\n\t\tthis.customHeaders = require('./Pict-TuiGrid-Headers.js');\n\t\tthis.customEditors = require('./Pict-TuiGrid-Editors.js');\n\t\tthis.customFormatters = require('./Pict-TuiGrid-Formatters.js');\n\n\t\tthis.columnSchema = false;\n\t\tthis.targetElementAddress = false;\n\t\tthis.gridData = false;\n\t}\n\n\t// Overload the connectTuiGrid() function to use the inline version of the TuiGrid\n\tconnectTuiGridPrototype(pTuiGridPrototype)\n\t{\n\t\tif (typeof (pTuiGridPrototype) != 'undefined')\n\t\t{\n\t\t\tthis._tuiGridPrototype = pTuiGridPrototype;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.log.trace(`PICT-TuiGrid No TuiGrid Prototype defined or explicitly set; looking for it in the window object.`);\n\t\t\tif (typeof (window) != 'undefined')\n\t\t\t{\n\t\t\t\tif ((typeof (window.tui) != 'undefined') && (typeof (window.tui.Grid) != 'undefined'))\n\t\t\t\t{\n\t\t\t\t\tthis.log.trace(`PICT-TuiGrid Found TuiGrid Prototype in window.tuiGrid.`);\n\t\t\t\t\tthis.connectTuiGridPrototype(window.tui.Grid);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.log.error(`PICT-TuiGrid No TuiGrid Prototype found in window.tuiGrid.`);\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.log.error(`PICT-TuiGrid No TuiGrid Prototype found in window.tuiGrid -- window object unavailable.`);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @typedef {Object} TUIGridCellChange\n\t * @property {any} rowKey - The key of the row that changed.\n\t * @property {string} columnName - The name of the column that changed.\n\t * @property {any} value - The \"current\" value of the cell. Slightly different meaning in preChangeHandler vs changeHandler (before / after the change is applied).\n\t * @property {any} [nextValue] - The value that the cell will have after the change. Only populated in preChangeHandler (not changeHandler).\n\t * @property {any} [prevValue] - The value that the cell had before the change. Only populated in changeHandler (not preChangeHandler).\n\t */\n\n\t/**\n\t * @typedef {Object} TUIGridChangeEvent\n\t * @property {Object} instance - The TuiGrid instance that fired the event.\n\t * @property {TUIGridCellChange[]} changes - An array of objects representing the changes to grid cell values.\n\t */\n\n\t/**\n\t * Interface method for handling changesets from the TuiGrid control. Invoked before the change has been applied to the affected cells.\n\t *\n\t * * The pre-change cell value is stored in value while the new cell value is stored in nextValue.\n\t * * Any changes made to nextValue in this method will be reflected in the grid for that cell.\n\t *\n\t * @param {TUIGridChangeEvent} pChangeData - An event containing an array of objects representing the changes to grid cell values.\n\t */\n\tpreChangeHandler(pChangeData)\n\t{\n\t}\n\n\t/**\n\t * Interface method for handling changesets from the TuiGrid control. Invoked after the change has been applied to the affected cells.\n\t *\n\t * * Performs solver trigger for changes to any columns configured in \"ColumnsToSolveOnChange\" or with \"PictTriggerSolveOnChange\": true on a specific row.\n\t * * The previous cell value is stored in prevValue while the next cell value is stored in value.\n\t *\n\t * @param {TUIGridChangeEvent} pChangeData - An event object containing an array of objects representing the changes to grid cell values.\n\t */\n\tchangeHandler(pChangeData)\n\t{\n\t\tlet tmpSolverNecessary = false;\n\n\t\tfor (let i = 0; i < pChangeData.changes.length; i++)\n\t\t{\n\t\t\tlet tmpEntity = pChangeData.instance.getValue(pChangeData.changes[i].rowKey, 'entity');\n\t\t\tlet tmpIDRecord = pChangeData.instance.getValue(pChangeData.changes[i].rowKey, 'idrecord');\n\n\t\t\tthis.log.trace(`Generic Change Handler for TuiGrid Fired, Entity ${tmpEntity} IDRecord ${tmpIDRecord} setting Column [${pChangeData.changes[i].value}] to new Value [${pChangeData.changes[i].value}]`);\n\n\t\t\t//if (pChangeData.changes[i].columnName == 'some_important_column')\n\t\t\t//{\n\t\t\t//if (pChangeData.changes[i].value > some_important_threshold)\n\t\t\t//{\n\t\t\t// Do something\n\t\t\t//}\n\t\t\t//}\n\t\t\tif (this.options.ColumnsToSolveOnChange.hasOwnProperty(pChangeData.changes[i].columnName))\n\t\t\t{\n\t\t\t\ttmpSolverNecessary = true;\n\t\t\t}\n\t\t}\n\n\t\tif (tmpSolverNecessary)\n\t\t{\n\t\t\tthis.services.PictApplication.solve();\n\t\t}\n\t}\n\n\tonAfterRender()\n\t{\n\t\tif (!this.initialRenderComplete)\n\t\t{\n\t\t\tthis.onAfterInitialRender();\n\t\t\tthis.initialRenderComplete = true;\n\t\t}\n\t}\n\n\tonAfterInitialRender()\n\t{\n\t\t// This is where we wire up and initialize the tuigrid control -- the initial render has put the placeholder content in place.\n\t\t// Check for a tuigrid prototype, and find it in the window object it if it doesn't exist\n\t\tif (!this._tuiGridPrototype)\n\t\t{\n\t\t\tthis.connectTuiGridPrototype();\n\t\t}\n\t\t// This is where we wire up and initialize the tuigrid control\n\t\tif (this.tuiGrid)\n\t\t{\n\t\t\t// The grid is already initialized.\n\t\t\tthis.log.error(`TuiGrid going to ${this.options.TargetElementAddress} is already initialized!`);\n\t\t\treturn false;\n\t\t}\n\n\t\tif (this.options.GridDataAddress)\n\t\t{\n\t\t\tlet tmpAddressedData = this.fable.manifest.getValueByHash(this.AppData, this.options.GridDataAddress);\n\t\t\tif (typeof (tmpAddressedData) != 'object')\n\t\t\t{\n\t\t\t\tthis.log.error(`Address for GridData [${this.options.GridDataAddress}] did not return an object; it was a ${typeof (tmpAddressedData)}.`);\n\t\t\t\tthis.gridData = [];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.gridData = JSON.parse(JSON.stringify(tmpAddressedData));\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.gridData = [];\n\t\t}\n\n\t\tlet tmpTargetElementSet = this.services.ContentAssignment.getElement(this.options.TargetElementAddress);\n\t\tif (tmpTargetElementSet.length < 1)\n\t\t{\n\t\t\tthis.log.error(`Could not find target element [${this.options.TargetElementAddress}] for TuiGrid!  Rendering won't function properly.`);\n\t\t\tthis.targetElement = false;\n\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Just go for the first one.\n\t\t\tthis.targetElement = tmpTargetElementSet[0];\n\t\t}\n\n\t\t// Check to see if there are any custom formatters.\n\t\tthis.columnSchema = this.options.TuiColumnSchema;\n\t\t// Setup the solver and custom schema handlers.\n\t\tfor (let i = 0; i < this.columnSchema.length; i++)\n\t\t{\n\t\t\tlet tmpColumn = this.columnSchema[i];\n\t\t\t// If this bit is set on a column, the Form solver will trigger each time a change happens to that column.\n\t\t\tif (tmpColumn.PictTriggerSolveOnChange)\n\t\t\t{\n\t\t\t\tthis.options.ColumnsToSolveOnChange[tmpColumn.name] = tmpColumn;\n\t\t\t}\n\t\t\t// Look to see if there is an internal formatter that matches the type\n\t\t\tif ((tmpColumn.hasOwnProperty('formatter')) && (this.customFormatters.hasOwnProperty(tmpColumn.formatter)))\n\t\t\t{\n\t\t\t\t// Assign our special formatter to the column.\n\t\t\t\ttmpColumn.formatter = this.customFormatters[tmpColumn.formatter];\n\t\t\t}\n\t\t\t// Look to see if there is an editor stanza\n\t\t\tif (tmpColumn.hasOwnProperty('editor'))\n\t\t\t{\n\t\t\t\t// Look to see if there is an internal editor that matches the type\n\t\t\t\tif ((tmpColumn.editor.hasOwnProperty('type'))\n\t\t\t\t\t&& (typeof (tmpColumn.editor.type) == 'string')\n\t\t\t\t\t&& (this.customEditors.hasOwnProperty(tmpColumn.editor.type)))\n\t\t\t\t{\n\t\t\t\t\t// Assign our special editor to the column.\n\t\t\t\t\ttmpColumn.editor.type = this.customEditors[tmpColumn.editor.type];\n\t\t\t\t}\n\n\t\t\t\t// Look to see if there is an internal editor that matches the type\n\t\t\t\tif ((tmpColumn.editor.hasOwnProperty('options'))\n\t\t\t\t\t&& (typeof (tmpColumn.editor.options) == 'object')\n\t\t\t\t\t&& (tmpColumn.editor.options.hasOwnProperty('listItems'))\n\t\t\t\t\t&& (typeof (tmpColumn.editor.options.listItems) == 'string'))\n\t\t\t\t{\n\t\t\t\t\t// Look for this address!  For the Record object, we will pass in the options.\n\t\t\t\t\tlet tmpListItems = this.fable.manifest.getValueByHash({ AppData: this.AppData, Options: this.options }, tmpColumn.editor.options.listItems);\n\t\t\t\t\tif (typeof (tmpListItems) == 'object')\n\t\t\t\t\t{\n\t\t\t\t\t\ttmpColumn.editor.options.listItems = tmpListItems;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.log.warn(`Pict TuiGrid for column [${tmpColumn.name}] had [${tmpColumn.editor.options.listItems}] as a listItems address, but it didn't return an object.  It was a [${typeof (tmpListItems)}].  Setting to empty list.`);\n\t\t\t\t\t\ttmpColumn.editor.options.listItems = [];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.gridSettings = {\n\t\t\t\tdata: this.gridData,\n\t\t\t\tel: this.targetElement,\n\t\t\t\tcolumns: this.columnSchema,\n\n\t\t\t\t// This is no bueno, yo\n\t\t\t\tusageStatistics: false,\n\n\t\t\t\tscrollY: this.options.GridScrollY,\n\n\t\t\t\tcolumnOptions:\n\t\t\t\t{\n\t\t\t\t\tresizable: this.options.GridColumnWidthResizable\n\t\t\t\t}\n\t\t\t};\n\n\t\tthis.customConfigureGridSettings();\n\n\t\tlet libTuiGrid = this._tuiGridPrototype;\n\t\tthis.tuiGrid = new libTuiGrid(this.gridSettings);\n\t\tthis.tuiGrid.on('beforeChange', (pChangeData) => { this.preChangeHandler(pChangeData); });\n\t\tthis.tuiGrid.on('afterChange', (pChangeData) => { this.changeHandler(pChangeData); });\n\t}\n\n\tcustomConfigureGridSettings ()\n\t{\n\t\t// This can be overloaded to tweak up the this.gridSettings\n\t}\n\n\tSetGridValue(pCellColumnToBeSet, pCellValueToSet, pLookupValue, pLookupColumn)\n\t{\n\t\tif (typeof (pLookupValue) == 'undefined')\n\t\t{\n\t\t\tconsole.log(`Could not set grid value [${pCellColumnToBeSet}] = [${pCellValueToSet}] looked up by [${pLookupColumn}]::[${pLookupValue}].  No valid lookup value!`);\n\t\t\treturn false;\n\t\t}\n\n\t\tif (this.tuiGrid)\n\t\t{\n\t\t\tlet tmpData = this.tuiGrid.getData();\n\n\t\t\tfor (let i = 0; i < tmpData.length; i++)\n\t\t\t{\n\t\t\t\tlet tmpRecord = tmpData[i];\n\n\t\t\t\tif (tmpRecord[pLookupColumn] == pLookupValue)\n\t\t\t\t{\n\t\t\t\t\tthis.tuiGrid.setValue(i, pCellColumnToBeSet, pCellValueToSet);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.log.warn(`Could not set grid value [${pCellColumnToBeSet}] = [${pCellValueToSet}] looked up by [${pLookupColumn}]::[${pLookupValue}].  No valid grid!`);\n\t\t}\n\t}\n\n\tSetGridValueByRowKey(pCellColumnToBeSet, pCellValueToSet, pRowKey)\n\t{\n\t\tif (typeof (pRowKey) == 'undefined')\n\t\t{\n\t\t\tthis.log.error(`Could not set grid value [${pCellColumnToBeSet}] = [${pCellValueToSet}] looked up by row key [${pRowKey}].  No valid row key!`);\n\t\t\treturn false;\n\t\t}\n\n\n\t\tif (this.tuiGrid)\n\t\t{\n\t\t\tthis.tuiGrid.setValue(pRowKey, pCellColumnToBeSet, pCellValueToSet);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.log.warn(`Could not set grid value [${pCellColumnToBeSet}] = [${pCellValueToSet}] looked up by [${pLookupColumn}]::[${pLookupValue}].  No valid grid!`);\n\t\t}\n\t}\n}\n\nmodule.exports = PictSectionTuiGrid;\n\nmodule.exports.default_configuration = require('./Pict-Section-TuiGrid-DefaultConfiguration.json');\n\n},{\"./Pict-Section-TuiGrid-DefaultConfiguration.json\":3,\"./Pict-TuiGrid-Editors.js\":6,\"./Pict-TuiGrid-Formatters.js\":7,\"./Pict-TuiGrid-Headers.js\":8,\"pict-view\":2}],5:[function(require,module,exports){\n// Custom number editor class with an option for precision\nclass tuiCustomEditorNumber\n{\n\tconstructor(pProperties)\n\t{\n\t\tconst tmpElement = document.createElement('input');\n\n\t\tconst decimalPrecision = (pProperties.columnInfo.editor.options.decimalPrecision) ? pProperties.columnInfo.editor.options.decimalPrecision : 3;\n\n\t\ttmpElement.type = 'number';\n\t\ttmpElement.value = String(pProperties.value);\n\t\ttmpElement.oninput = (pElement) =>\n\t\t{\n\t\t\tconst tmpCastNumber = parseFloat(pElement.target.value).toFixed(decimalPrecision).toString()\n\t\t\tif (tmpCastNumber.length < parseFloat(pElement.target.value).toString().length)\n\t\t\t{\n\t\t\t\tpElement.target.value = tmpCastNumber;\n\t\t\t}\n\t\t};\n\n\t\tthis.Element = tmpElement;\n\t}\n\n\tgetElement()\n\t{\n\t\treturn this.Element;\n\t}\n\n\tgetValue()\n\t{\n\t\treturn this.Element.value;\n\t}\n\n\tmounted()\n\t{\n\t\tthis.Element.select();\n\t}\n}\n\nmodule.exports = tuiCustomEditorNumber;\n},{}],6:[function(require,module,exports){\nconst tuiGridHeaders = {};\n\ntuiGridHeaders.EditorNumber = require('./Pict-TuiGrid-Editor-Number.js');\n\nmodule.exports = tuiGridHeaders;\n},{\"./Pict-TuiGrid-Editor-Number.js\":5}],7:[function(require,module,exports){\n// Static functions for formatting data in the grid.\nconst tuiGridFormatters = {};\n\ntuiGridFormatters.FormatterTwoDigitNumber = (pCell) =>\n\t{\n\t\tlet tmpCellValue = Number.parseFloat(pCell.value).toFixed(2);\n\t\tif (isNaN(tmpCellValue))\n\t\t{\n\t\t\treturn '';\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn tmpCellValue;\n\t\t}\n\t}\n\ntuiGridFormatters.FormatterCurrencyNumber = (pCell) =>\n\t{\n\t\tlet tmpCellValue = tuiGridFormatters.FormatterTwoDigitNumber(pCell);\n\t\tif (tmpCellValue == '')\n\t\t{\n\t\t\treturn tmpCellValue;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn `$${tmpCellValue}`;\n\t\t}\n\t}\n\nmodule.exports = tuiGridFormatters;\n},{}],8:[function(require,module,exports){\nconst tuiGridHeaders = {};\n\n// Custom column header where the header is hidden\nclass tuiCustomColumnHeaderNone\n{\n\tconstructor()\n\t{\n\t\tlet tmpElement = document.createElement('input');\n\t\ttmpElement.type = 'hidden';\n\t\ttmpElement.value = '';\n\t\tthis.Element = tmpElement;\n\t}\n\n\tgetElement()\n\t{\n\t\treturn this.Element;\n\t}\n\n\trender()\n\t{\n\t\t// Noop!\n\t}\n}\n\ntuiGridHeaders.CustomColumnHeaderNone = tuiCustomColumnHeaderNone;\n\nmodule.exports = tuiGridHeaders;\n},{}]},{},[4])(4)\n});\n\n","(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","/**\n* Fable Service Base\n* @author <steven@velozo.com>\n*/\n\nclass FableServiceProviderBase\n{\n\t// The constructor can be used in two ways:\n\t// 1) With a fable, options object and service hash (the options object and service hash are optional)\n\t// 2) With an object or nothing as the first parameter, where it will be treated as the options object\n\tconstructor(pFable, pOptions, pServiceHash)\n\t{\n\t\t// Check if a fable was passed in; connect it if so\n\t\tif ((typeof(pFable) === 'object') && pFable.isFable)\n\t\t{\n\t\t\tthis.connectFable(pFable);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.fable = false;\n\t\t}\n\n\t\t// initialize options and UUID based on whether the fable was passed in or not.\n\t\tif (this.fable)\n\t\t{\n\t\t\tthis.UUID = pFable.getUUID();\n\t\t\tthis.options = (typeof(pOptions) === 'object') ? pOptions\n\t\t\t\t\t\t\t: {};\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// With no fable, check to see if there was an object passed into either of the first two\n\t\t\t// Parameters, and if so, treat it as the options object\n\t\t\tthis.options = ((typeof(pFable) === 'object') && !pFable.isFable) ? pFable\n\t\t\t\t\t\t\t: (typeof(pOptions) === 'object') ? pOptions\n\t\t\t\t\t\t\t: {};\n\t\t\tthis.UUID = `CORE-SVC-${Math.floor((Math.random() * (99999 - 10000)) + 10000)}`\n\t\t}\n\n\t\t// It's expected that the deriving class will set this\n\t\tthis.serviceType = `Unknown-${this.UUID}`;\n\n\t\t// The service hash is used to identify the specific instantiation of the service in the services map\n\t\tthis.Hash = (typeof(pServiceHash) === 'string') ? pServiceHash \n\t\t\t\t\t: (!this.fable && (typeof(pOptions) === 'string')) ? pOptions\n\t\t\t\t\t: `${this.UUID}`;\n\t}\n\n\tconnectFable(pFable)\n\t{\n\t\tif ((typeof(pFable) !== 'object') || (!pFable.isFable))\n\t\t{\n\t\t\tlet tmpErrorMessage = `Fable Service Provider Base: Cannot connect to Fable, invalid Fable object passed in.  The pFable parameter was a [${typeof(pFable)}].}`;\n\t\t\tconsole.log(tmpErrorMessage);\n\t\t\treturn new Error(tmpErrorMessage);\n\t\t}\n\n\t\tif (!this.fable)\n\t\t{\n\t\t\tthis.fable = pFable;\n\t\t}\n\n\t\tif (!this.log)\n\t\t{\n\t\t\tthis.log = this.fable.Logging;\n\t\t}\n\t\tif (!this.services)\n\t\t{\n\t\t\tthis.services = this.fable.services;\n\t\t}\n\n\t\tif (!this.servicesMap)\n\t\t{\n\t\t\tthis.servicesMap = this.fable.servicesMap;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tstatic isFableService = true;\n}\n\nmodule.exports = FableServiceProviderBase;\n\n// This is left here in case we want to go back to having different code/base class for \"core\" services\nmodule.exports.CoreServiceProviderBase = FableServiceProviderBase;","const libFableServiceBase = require('fable-serviceproviderbase');\n\nconst defaultPictViewSettings = (\n\t{\n\t\tDefaultRenderable: false,\n\t\tDefaultDestinationAddress: false,\n\t\tDefaultTemplateRecordAddress: false,\n\n\t\tViewIdentifier: false,\n\n\t\t// If this is set to true, when the App initializes this will.\n\t\t// After the App initializes, initialize will be called as soon as it's added.\n\t\tAutoInitialize: true,\n\t\tAutoInitializeOrdinal: 0,\n\n\t\t// If this is set to true, when the App autorenders (on load) this will.\n\t\t// After the App initializes, render will be called as soon as it's added.\n\t\tAutoRender: true,\n\t\tAutoRenderOrdinal: 0,\n\n\t\tAutoSolveWithApp: true,\n\t\tAutoSolveOrdinal: 0,\n\n\t\tCSSHash: false,\n\t\tCSS: false,\n\t\tCSSProvider: false,\n\t\tCSSPriority: 500,\n\n\t\tTemplates: [],\n\n\t\tDefaultTemplates: [],\n\n\t\tRenderables: [],\n\n\t\tManifests: {}\n\t});\n\nclass PictView extends libFableServiceBase\n{\n\tconstructor(pFable, pOptions, pServiceHash)\n\t{\n\t\t// Intersect default options, parent constructor, service information\n\t\tlet tmpOptions = Object.assign({}, JSON.parse(JSON.stringify(defaultPictViewSettings)), pOptions);\n\t\tsuper(pFable, tmpOptions, pServiceHash);\n\t\tif (!this.options.ViewIdentifier)\n\t\t{\n\t\t\tthis.options.ViewIdentifier = `AutoViewID-${this.fable.getUUID()}`;\n\t\t}\n\t\tthis.serviceType = 'PictView';\n\t\t// Convenience and consistency naming\n\t\tthis.pict = this.fable;\n\t\t// Wire in the essential Pict application state\n\t\tthis.AppData = this.pict.AppData;\n\n\t\tthis.initializeTimestamp = false;\n\t\tthis.lastSolvedTimestamp = false;\n\t\tthis.lastRenderedTimestamp = false;\n\t\tthis.lastMarshalFromViewTimestamp = false;\n\t\tthis.lastMarshalToViewTimestamp = false;\n\n\t\t// Load all templates from the array in the options\n\t\t// Templates are in the form of {Hash:'Some-Template-Hash',Template:'Template content',Source:'TemplateSource'}\n\t\tfor (let i = 0; i < this.options.Templates.length; i++)\n\t\t{\n\t\t\tlet tmpTemplate = this.options.Templates[i];\n\n\t\t\tif (!tmpTemplate.hasOwnProperty('Hash') || !tmpTemplate.hasOwnProperty('Template'))\n\t\t\t{\n\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not load Template ${i} in the options array.`, tmpTemplate);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (!tmpTemplate.Source)\n\t\t\t\t{\n\t\t\t\t\ttmpTemplate.Source = `PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} options object.`;\n\t\t\t\t}\n\t\t\t\tthis.pict.TemplateProvider.addTemplate(tmpTemplate.Hash, tmpTemplate.Template, tmpTemplate.Source);\n\t\t\t}\n\t\t}\n\n\t\t// Load all default templates from the array in the options\n\t\t// Templates are in the form of {Prefix:'',Postfix:'-List-Row',Template:'Template content',Source:'TemplateSourceString'}\n\t\tfor (let i = 0; i < this.options.DefaultTemplates.length; i++)\n\t\t{\n\t\t\tlet tmpDefaultTemplate = this.options.DefaultTemplates[i];\n\n\t\t\tif (!tmpDefaultTemplate.hasOwnProperty('Postfix') || !tmpDefaultTemplate.hasOwnProperty('Template'))\n\t\t\t{\n\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not load Default Template ${i} in the options array.`, tmpDefaultTemplate);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (!tmpDefaultTemplate.Source)\n\t\t\t\t{\n\t\t\t\t\ttmpDefaultTemplate.Source = `PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} options object.`;\n\t\t\t\t}\n\t\t\t\tthis.pict.TemplateProvider.addDefaultTemplate(tmpDefaultTemplate.Prefix, tmpDefaultTemplate.Postfix, tmpDefaultTemplate.Template, tmpDefaultTemplate.Source);\n\t\t\t}\n\t\t}\n\n\t\t// Load the CSS if it's available\n\t\tif (this.options.CSS)\n\t\t{\n\t\t\tlet tmpCSSHash = this.options.CSSHash ? this.options.CSSHash : `View-${this.options.ViewIdentifier}`;\n\t\t\tlet tmpCSSProvider = this.options.CSSProvider ? this.options.CSSProvider : tmpCSSHash;\n\t\t\tthis.pict.CSSMap.addCSS(tmpCSSHash, this.options.CSS, tmpCSSProvider, this.options.CSSPriority);\n\t\t}\n\n\t\t// Load all renderables\n\t\t// Renderables are launchable renderable instructions with templates\n\t\t// They look as such: {Identifier:'ContentEntry', TemplateHash:'Content-Entry-Section-Main', ContentDestinationAddress:'#ContentSection', RecordAddress:'AppData.Content.DefaultText', ManifestTransformation:'ManyfestHash', ManifestDestinationAddress:'AppData.Content.DataToTransformContent'}\n\t\t// The only parts that are necessary are Identifier and Template\n\t\t// A developer can then do render('ContentEntry') and it just kinda works.  Or they can override the ContentDestinationAddress\n\t\tthis.renderables = {};\n\t\tfor (let i = 0; i < this.options.Renderables.length; i++)\n\t\t{\n\t\t\tlet tmpRenderable = this.options.Renderables[i];\n\t\t\tthis.addRenderable(this.options.Renderables[i]);\n\t\t}\n\t}\n\n\taddRenderable(pRenderableHash, pTemplateHash, pDefaultTemplateDataAddress, pDefaultDestinationAddress, pRenderMethod)\n\t{\n\t\tlet tmpRenderable = false;\n\n\t\tif (typeof(pRenderableHash) == 'object')\n\t\t{\n\t\t\t// The developer passed in the renderable as an object.\n\t\t\t// Use theirs instead!\n\t\t\ttmpRenderable = pRenderableHash;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlet tmpRenderMethod = (typeof(pRenderMethod) !== 'string') ? pRenderMethod : 'replace';\n\t\t\ttmpRenderable = (\n\t\t\t\t{\n\t\t\t\t\tRenderableHash: pRenderableHash,\n\t\t\t\t\tTemplateHash: pTemplateHash,\n\t\t\t\t\tDefaultTemplateDataAddress: pDefaultTemplateDataAddress,\n\t\t\t\t\tDefaultDestinationAddress: pDefaultDestinationAddress,\n\t\t\t\t\tRenderMethod: tmpRenderMethod\n\t\t\t\t});\n\t\t}\n\n\t\tif ((typeof(tmpRenderable.RenderableHash) != 'string') || (typeof(tmpRenderable.TemplateHash) != 'string'))\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not load Renderable; RenderableHash or TemplateHash are invalid.`, tmpRenderable);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (this.pict.LogNoisiness > 0)\n\t\t\t{\n\t\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} adding renderable [${tmpRenderable.RenderableHash}] pointed to template ${tmpRenderable.TemplateHash}.`);\n\t\t\t}\n\n\t\t\tthis.renderables[tmpRenderable.RenderableHash] = tmpRenderable;\n\t\t}\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*                        Code Section: Initialization                        */\n\t/* -------------------------------------------------------------------------- */\n\tonBeforeInitialize()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onBeforeInitialize:`);\n\t\t}\n\t\treturn true;\n\t}\n\tonBeforeInitializeAsync(fCallback)\n\t{\n\t\tthis.onBeforeInitialize();\n\t\treturn fCallback();\n\t}\n\n\tonInitialize()\n\t{\n\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onInitialize:`);\n\t\t}\n\t\treturn true;\n\t}\n\tonInitializeAsync(fCallback)\n\t{\n\t\tthis.onInitialize();\n\t\treturn fCallback();\n\t}\n\n\tinitialize()\n\t{\n\t\tif (this.pict.LogControlFlow)\n\t\t{\n\t\t\tthis.log.trace(`PICT-ControlFlow VIEW [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} initialize:`);\n\t\t}\n\n\t\tif (!this.initializeTimestamp)\n\t\t{\n\t\t\tthis.onBeforeInitialize();\n\t\t\tthis.onInitialize();\n\t\t\tthis.onAfterInitialize();\n\t\t\tthis.initializeTimestamp = this.pict.log.getTimeStamp();\n\t\t\treturn true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.log.warn(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} initialize called but initialization is already completed.  Aborting.`);\n\t\t\treturn false;\n\t\t}\n\t}\n\tinitializeAsync(fCallback)\n\t{\n\t\tif (this.pict.LogControlFlow)\n\t\t{\n\t\t\tthis.log.trace(`PICT-ControlFlow VIEW [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} initializeAsync:`);\n\t\t}\n\n\t\tif (!this.initializeTimestamp)\n\t\t{\n\t\t\tlet tmpAnticipate = this.pict.instantiateServiceProviderWithoutRegistration('Anticipate');\n\n\t\t\tif (this.pict.LogNoisiness > 0)\n\t\t\t{\n\t\t\t\tthis.log.info(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} beginning initialization...`);\n\t\t\t}\n\n\t\t\ttmpAnticipate.anticipate(this.onBeforeInitializeAsync.bind(this));\n\t\t\ttmpAnticipate.anticipate(this.onInitializeAsync.bind(this));\n\t\t\ttmpAnticipate.anticipate(this.onAfterInitializeAsync.bind(this));\n\n\t\t\ttmpAnticipate.wait(\n\t\t\t\t(pError) =>\n\t\t\t\t{\n\t\t\t\t\tthis.initializeTimestamp = this.pict.log.getTimeStamp();\n\t\t\t\t\tif (this.pict.LogNoisiness > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.log.info(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} initialization complete.`);\n\t\t\t\t\t}\n\t\t\t\t\treturn fCallback();\n\t\t\t\t})\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.log.warn(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} async initialize called but initialization is already completed.  Aborting.`);\n\t\t\t// TODO: Should this be an error?\n\t\t\treturn fCallback();\n\t\t}\n\t}\n\n\tonAfterInitialize()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onAfterInitialize:`);\n\t\t}\n\t\treturn true;\n\t}\n\tonAfterInitializeAsync(fCallback)\n\t{\n\t\tthis.onAfterInitialize();\n\t\treturn fCallback();\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*                            Code Section: Render                            */\n\t/* -------------------------------------------------------------------------- */\n\tonBeforeRender(pRenderable, pRenderDestinationAddress, pData)\n\t{\n\t\t// Overload this to mess with stuff before the content gets generated from the template\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onBeforeRender:`);\n\t\t}\n\t\treturn true;\n\t}\n\tonBeforeRenderAsync(fCallback)\n\t{\n\t\treturn fCallback();\n\t}\n\n\trender(pRenderable, pRenderDestinationAddress, pTemplateDataAddress)\n\t{\n\t\tlet tmpRenderableHash = (typeof (pRenderable) === 'string') ? pRenderable :\n\t\t\t(typeof (this.options.DefaultRenderable) == 'string') ? this.options.DefaultRenderable : false;\n\t\tif (!tmpRenderableHash)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderable}) because it is not a valid renderable.`);\n\t\t\treturn false;\n\t\t}\n\n\t\tlet tmpRenderable = this.renderables[tmpRenderableHash];\n\n\t\tif (!tmpRenderable)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderable}) because it does not exist.`);\n\t\t\treturn false;\n\t\t}\n\n\t\tlet tmpRenderDestinationAddress = (typeof (pRenderDestinationAddress) === 'string') ? pRenderDestinationAddress :\n\t\t\t(typeof (tmpRenderable.ContentDestinationAddress) === 'string') ? tmpRenderable.ContentDestinationAddress :\n\t\t\t\t(typeof (this.options.DefaultDestinationAddress) === 'string') ? this.options.DefaultDestinationAddress : false;\n\n\t\tif (!tmpRenderDestinationAddress)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderable}) because it does not have a valid destination address.`);\n\t\t\treturn false;\n\t\t}\n\n\t\tlet tmpDataAddress;\n\t\tlet tmpData;\n\n\t\tif (typeof(pTemplateDataAddress) === 'object')\n\t\t{\n\t\t\ttmpData = pTemplateDataAddress;\n\t\t\ttmpDataAddress = 'Passed in as object';\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttmpDataAddress = (typeof (pTemplateDataAddress) === 'string') ? pTemplateDataAddress :\n\t\t\t\t(typeof (tmpRenderable.DefaultTemplateRecordAddress) === 'string') ? tmpRenderable.DefaultTemplateRecordAddress :\n\t\t\t\t\t(typeof (this.options.DefaultTemplateRecordAddress) === 'string') ? this.options.DefaultTemplateRecordAddress : false;\n\n\t\t\ttmpData = (typeof (tmpDataAddress) === 'string') ? this.pict.DataProvider.getDataByAddress(tmpDataAddress) : undefined;\n\t\t}\n\n\t\t// Execute the developer-overridable pre-render behavior\n\t\tthis.onBeforeRender(tmpRenderable, tmpRenderDestinationAddress, tmpData);\n\n\t\tif (this.pict.LogControlFlow)\n\t\t{\n\t\t\tthis.log.trace(`PICT-ControlFlow VIEW [${this.UUID}]::[${this.Hash}] Renderable[${tmpRenderableHash}] Destination[${tmpRenderDestinationAddress}] TemplateDataAddress[${tmpDataAddress}] render:`);\n\t\t}\n\n\t\t// Generate the content output from the template and data\n\t\tlet tmpContent = this.pict.parseTemplateByHash(tmpRenderable.TemplateHash, tmpData)\n\n\t\t// Assign the content to the destination address\n\t\tswitch(tmpRenderable.RenderMethod)\n\t\t{\n\t\t\tcase 'append':\n\t\t\t\tthis.pict.ContentAssignment.appendContent(tmpRenderDestinationAddress, tmpContent);\n\t\t\t\tbreak;\n\t\t\tcase 'prepend':\n\t\t\t\tthis.pict.ContentAssignment.prependContent(tmpRenderDestinationAddress, tmpContent);\n\t\t\t\tbreak;\n\t\t\tcase 'append_once':\n\t\t\t\t// Try to find the content in the destination address\n\t\t\t\tlet tmpExistingContent = this.pict.ContentAssignment.getElement(`#${tmpRenderableHash}`);\n\t\t\t\tif (tmpExistingContent.length < 1)\n\t\t\t\t{\n\t\t\t\t\tthis.pict.ContentAssignment.appendContent(tmpRenderDestinationAddress, tmpContent);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'replace':\n\t\t\t\t// TODO: Should this be the default?\n\t\t\tdefault:\n\t\t\t\tthis.pict.ContentAssignment.assignContent(tmpRenderDestinationAddress, tmpContent);\n\t\t\t\tbreak;\n\t\t}\n\n\t\t// Execute the developer-overridable post-render behavior\n\t\tthis.onAfterRender(tmpRenderable, tmpRenderDestinationAddress, tmpData, tmpContent)\n\n\t\tthis.lastRenderedTimestamp = this.pict.log.getTimeStamp();\n\n\t\treturn true;\n\t}\n\trenderAsync(pRenderable, pRenderDestinationAddress, pTemplateDataAddress, fCallback)\n\t{\n\t\tlet tmpRenderableHash = (typeof (pRenderable) === 'string') ? pRenderable :\n\t\t\t(typeof (this.options.DefaultRenderable) == 'string') ? this.options.DefaultRenderable : false;\n\t\tif (!tmpRenderableHash)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not asynchronously render ${tmpRenderableHash} (param ${pRenderable}because it is not a valid renderable.`);\n\t\t\treturn fCallback(Error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not asynchronously render ${tmpRenderableHash} (param ${pRenderable}because it is not a valid renderable.`));\n\t\t}\n\n\t\tlet tmpRenderable = this.renderables[tmpRenderableHash];\n\n\t\tif (!tmpRenderable)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderable}) because it does not exist.`);\n\t\t\treturn fCallback(Error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderable}) because it does not exist.`));\n\t\t}\n\n\t\tlet tmpRenderDestinationAddress = (typeof (pRenderDestinationAddress) === 'string') ? pRenderDestinationAddress :\n\t\t\t(typeof (tmpRenderable.ContentDestinationAddress) === 'string') ? tmpRenderable.ContentDestinationAddress :\n\t\t\t\t(typeof (this.options.DefaultDestinationAddress) === 'string') ? this.options.DefaultDestinationAddress : false;\n\n\t\tif (!tmpRenderDestinationAddress)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderable}) because it does not have a valid destination address.`);\n\t\t\treturn fCallback(Error(`Could not render ${tmpRenderableHash}`));\n\t\t}\n\n\t\tlet tmpDataAddress;\n\t\tlet tmpData;\n\n\t\tif (typeof(pTemplateDataAddress) === 'object')\n\t\t{\n\t\t\ttmpData = pTemplateDataAddress;\n\t\t\ttmpDataAddress = 'Passed in as object';\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttmpDataAddress = (typeof (pTemplateDataAddress) === 'string') ? pTemplateDataAddress :\n\t\t\t\t(typeof (tmpRenderable.DefaultTemplateRecordAddress) === 'string') ? tmpRenderable.DefaultTemplateRecordAddress :\n\t\t\t\t\t(typeof (this.options.DefaultTemplateRecordAddress) === 'string') ? this.options.DefaultTemplateRecordAddress : false;\n\n\t\t\ttmpData = (typeof (tmpDataAddress) === 'string') ? this.pict.DataProvider.getDataByAddress(tmpDataAddress) : undefined;\n\t\t}\n\n\t\tif (this.pict.LogControlFlow)\n\t\t{\n\t\t\tthis.log.trace(`PICT-ControlFlow VIEW [${this.UUID}]::[${this.Hash}] Renderable[${tmpRenderableHash}] Destination[${tmpRenderDestinationAddress}] TemplateDataAddress[${tmpDataAddress}] renderAsync:`);\n\t\t}\n\t\tif (this.pict.LogNoisiness > 2)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} Beginning Asynchronous Render (callback-style)...`);\n\t\t}\n\t\tif (this.pict.LogNoisiness > 4)\n\t\t{\n\t\t\tthis.log.trace(`At-render AppData: `, this.AppData);\n\t\t}\n\n\n\t\tlet tmpAnticipate = this.fable.newAnticipate();\n\n\t\ttmpAnticipate.anticipate(\n\t\t\t(fOnBeforeRenderCallback) =>\n\t\t\t{\n\t\t\t\tthis.onBeforeRender(tmpRenderable, tmpRenderDestinationAddress, tmpData);\n\t\t\t\tthis.onBeforeRenderAsync(fOnBeforeRenderCallback);\n\t\t\t});\n\n\t\ttmpAnticipate.anticipate(\n\t\t\t(fAsyncTemplateCallback) =>\n\t\t\t{\n\t\t\t\t// Render the template (asynchronously)\n\t\t\t\tthis.pict.parseTemplateByHash(tmpRenderable.TemplateHash, tmpData,\n\t\t\t\t\t(pError, pContent) =>\n\t\t\t\t\t{\n\t\t\t\t\t\tif (pError)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render (asynchronously) ${tmpRenderableHash} (param ${pRenderable}) because it did not parse the template.`, pError);\n\t\t\t\t\t\t\treturn fAsyncTemplateCallback(pError);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Assign the content to the destination address\n\t\t\t\t\t\tswitch(tmpRenderable.RenderMethod)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcase 'append':\n\t\t\t\t\t\t\t\tthis.pict.ContentAssignment.appendContent(tmpRenderDestinationAddress, pContent);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'prepend':\n\t\t\t\t\t\t\t\tthis.pict.ContentAssignment.prependContent(tmpRenderDestinationAddress, pContent);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'append_once':\n\t\t\t\t\t\t\t\t// Try to find the content in the destination address\n\t\t\t\t\t\t\t\tlet tmpExistingContent = this.pict.ContentAssignment.getElement(`#${tmpRenderableHash}`);\n\t\t\t\t\t\t\t\tif (tmpExistingContent.length < 1)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tthis.pict.ContentAssignment.appendContent(tmpRenderDestinationAddress, pContent);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcase 'replace':\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tthis.pict.ContentAssignment.assignContent(tmpRenderDestinationAddress, pContent);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Execute the developer-overridable asynchronous post-render behavior\n\t\t\t\t\t\tthis.lastRenderedTimestamp = this.pict.log.getTimeStamp();\n\t\t\t\t\t\treturn fAsyncTemplateCallback();\n\t\t\t\t\t});\n\t\t\t});\n\n\t\ttmpAnticipate.anticipate(\n\t\t\t(fOnAfterRenderCallback) =>\n\t\t\t{\n\t\t\t\tthis.onAfterRender(tmpRenderable, tmpRenderDestinationAddress, tmpData);\n\t\t\t\tthis.onAfterRenderAsync(fOnAfterRenderCallback);\n\t\t\t});\n\n\t\ttmpAnticipate.wait(fCallback);\n\t}\n\trenderDefaultAsync(fCallback)\n\t{\n\t\t// Render the default renderable (falses do the proper forward lookups of values from config and such)\n\t\tthis.renderAsync(false, false, false, fCallback);\n\t}\n\tonAfterRender(pRenderable, pRenderDestinationAddress, pData)\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onAfterRender:`);\n\t\t}\n\t\treturn true;\n\t}\n\tonAfterRenderAsync(fCallback)\n\t{\n\t\treturn fCallback();\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*                            Code Section: Solver                            */\n\t/* -------------------------------------------------------------------------- */\n\tonBeforeSolve()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onBeforeSolve:`);\n\t\t}\n\t\treturn true;\n\t}\n\tonBeforeSolveAsync(fCallback)\n\t{\n\t\tthis.onBeforeSolve();\n\t\treturn fCallback();\n\t}\n\n\tonSolve()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onSolve:`);\n\t\t}\n\t\treturn true;\n\t}\n\tonSolveAsync(fCallback)\n\t{\n\t\tthis.onSolve();\n\t\treturn fCallback();\n\t}\n\n\tsolve()\n\t{\n\t\tif (this.pict.LogNoisiness > 2)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} executing solve() function...`);\n\t\t}\n\t\tthis.onBeforeSolve();\n\t\tthis.onSolve();\n\t\tthis.onAfterSolve();\n\t\tthis.lastSolvedTimestamp = this.pict.log.getTimeStamp();\n\t\treturn true;\n\t}\n\n\tsolveAsync(fCallback)\n\t{\n\t\tlet tmpAnticipate = this.pict.instantiateServiceProviderWithoutRegistration('Anticipate');\n\n\t\ttmpAnticipate.anticipate(this.onBeforeSolveAsync.bind(this));\n\t\ttmpAnticipate.anticipate(this.onSolveAsync.bind(this));\n\t\ttmpAnticipate.anticipate(this.onAfterSolveAsync.bind(this));\n\n\t\ttmpAnticipate.wait(\n\t\t\t(pError) =>\n\t\t\t{\n\t\t\t\tif (this.pict.LogNoisiness > 2)\n\t\t\t\t{\n\t\t\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} solveAsync() complete.`);\n\t\t\t\t}\n\t\t\t\tthis.lastSolvedTimestamp = this.pict.log.getTimeStamp();\n\t\t\t\treturn fCallback(pError);\n\t\t\t});\n\t}\n\n\tonAfterSolve()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onAfterSolve:`);\n\t\t}\n\t\treturn true;\n\t}\n\tonAfterSolveAsync(fCallback)\n\t{\n\t\tthis.onAfterSolve();\n\t\treturn fCallback();\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*                     Code Section: Marshal From View                        */\n\t/* -------------------------------------------------------------------------- */\n\tonBeforeMarshalFromView()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onBeforeMarshalFromView:`);\n\t\t}\n\t\treturn true;\n\t}\n\tonBeforeMarshalFromViewAsync(fCallback)\n\t{\n\t\tthis.onBeforeMarshalFromView();\n\t\treturn fCallback();\n\t}\n\n\tonMarshalFromView()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onMarshalFromView:`);\n\t\t}\n\t\treturn true;\n\t}\n\tonMarshalFromViewAsync(fCallback)\n\t{\n\t\tthis.onMarshalFromView();\n\t\treturn fCallback();\n\t}\n\n\tmarshalFromView()\n\t{\n\t\tif (this.pict.LogNoisiness > 2)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} executing solve() function...`);\n\t\t}\n\t\tthis.onBeforeMarshalFromView();\n\t\tthis.onMarshalFromView();\n\t\tthis.onAfterMarshalFromView();\n\t\tthis.lastMarshalFromViewTimestamp = this.pict.log.getTimeStamp();\n\t\treturn true;\n\t}\n\n\tmarshalFromViewAsync(fCallback)\n\t{\n\t\tlet tmpAnticipate = this.pict.instantiateServiceProviderWithoutRegistration('Anticipate');\n\n\t\ttmpAnticipate.anticipate(this.onBeforeMarshalFromViewAsync.bind(this));\n\t\ttmpAnticipate.anticipate(this.onMarshalFromViewAsync.bind(this));\n\t\ttmpAnticipate.anticipate(this.onAfterMarshalFromViewAsync.bind(this));\n\n\t\ttmpAnticipate.wait(\n\t\t\t(pError) =>\n\t\t\t{\n\t\t\t\tif (this.pict.LogNoisiness > 2)\n\t\t\t\t{\n\t\t\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} solveAsync() complete.`);\n\t\t\t\t}\n\t\t\t\tthis.lastMarshalFromViewTimestamp = this.pict.log.getTimeStamp();\n\t\t\t\treturn fCallback(pError);\n\t\t\t});\n\t}\n\n\tonAfterMarshalFromView()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onAfterMarshalFromView:`);\n\t\t}\n\t\treturn true;\n\t}\n\tonAfterMarshalFromViewAsync(fCallback)\n\t{\n\t\tthis.onAfterMarshalFromView();\n\t\treturn fCallback();\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*                     Code Section: Marshal To View                          */\n\t/* -------------------------------------------------------------------------- */\n\tonBeforeMarshalToView()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onBeforeMarshalToView:`);\n\t\t}\n\t\treturn true;\n\t}\n\tonBeforeMarshalToViewAsync(fCallback)\n\t{\n\t\tthis.onBeforeMarshalToView();\n\t\treturn fCallback();\n\t}\n\n\tonMarshalToView()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onMarshalToView:`);\n\t\t}\n\t\treturn true;\n\t}\n\tonMarshalToViewAsync(fCallback)\n\t{\n\t\tthis.onMarshalToView();\n\t\treturn fCallback();\n\t}\n\n\tmarshalToView()\n\t{\n\t\tif (this.pict.LogNoisiness > 2)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} executing solve() function...`);\n\t\t}\n\t\tthis.onBeforeMarshalToView();\n\t\tthis.onMarshalToView();\n\t\tthis.onAfterMarshalToView();\n\t\tthis.lastMarshalToViewTimestamp = this.pict.log.getTimeStamp();\n\t\treturn true;\n\t}\n\n\tmarshalToViewAsync(fCallback)\n\t{\n\t\tlet tmpAnticipate = this.pict.instantiateServiceProviderWithoutRegistration('Anticipate');\n\n\t\ttmpAnticipate.anticipate(this.onBeforeMarshalToViewAsync.bind(this));\n\t\ttmpAnticipate.anticipate(this.onMarshalToViewAsync.bind(this));\n\t\ttmpAnticipate.anticipate(this.onAfterMarshalToViewAsync.bind(this));\n\n\t\ttmpAnticipate.wait(\n\t\t\t(pError) =>\n\t\t\t{\n\t\t\t\tif (this.pict.LogNoisiness > 2)\n\t\t\t\t{\n\t\t\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} solveAsync() complete.`);\n\t\t\t\t}\n\t\t\t\tthis.lastMarshalToViewTimestamp = this.pict.log.getTimeStamp();\n\t\t\t\treturn fCallback(pError);\n\t\t\t});\n\t}\n\n\tonAfterMarshalToView()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onAfterMarshalToView:`);\n\t\t}\n\t\treturn true;\n\t}\n\tonAfterMarshalToViewAsync(fCallback)\n\t{\n\t\tthis.onAfterMarshalToView();\n\t\treturn fCallback();\n\t}\n}\n\nmodule.exports = PictView;","module.exports={\n\t\"RenderOnLoad\": true,\n\n\t\"GridWidth\": \"auto\",\n\t\"GridRowHeight\": 40,\n\t\n\t\"GridBodyHeight\": \"auto\",\n\t\"GridBodyMinHeight\": 130,\n\n\t\"GridColumnMinWidth\": 50,\n\t\"GridColumnWidthResizable\": true,\n\t\"GridColumnHeightResizable\": false,\n\n\t\"GridColumnFrozenCount\": 0,\n\t\"GridColumnFrozenBorderWidth\": 3,\n\n\t\"GridScrollX\": true,\n\t\"GridScrollY\": true,\n\n\t\"GridShowDummyRows\": false,\n\t\"GridDraggableRows\": false,\n\n\t\"GridSelectionUnit\": \"cell\",\n\n\t\"DefaultRenderable\": \"TuiGrid-Wrap\",\n\t\"DefaultDestinationAddress\": \"#TuiGrid-Container-Div\",\n\n\t\"Templates\": [\n\t\t{\n\t\t\t\"Hash\": \"TuiGrid-Container\",\n\t\t\t\"Template\": \"<!-- TuiGrid-Container Rendering Soon -->\"\n\t\t}\n\t],\n\n\t\"Renderables\": [\n\t\t{\n\t\t\t\"RenderableHash\": \"TuiGrid-Wrap\",\n\t\t\t\"TemplateHash\": \"TuiGrid-Container\",\n\t\t\t\"DestinationAddress\": \"#TuiGrid-Container-Div\"\n\t\t}\n\t],\n\n\t\"TargetElementAddress\": \"#TuiGrid-Container-Div\",\n\n\t\"GridDataAddress\": false,\n\n\t\"GridData\": [\n\t\t{\n\t\t\t\"idrecord\": 1,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 1\",\n\t\t\t\"description\": \"description 1\"\n\t\t},\n\t\t{\n\t\t\t\"idrecord\": 2,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 2\",\n\t\t\t\"description\": \"description 2\"\n\t\t},\n\t\t{\n\t\t\t\"idrecord\": 3,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 3\",\n\t\t\t\"description\": \"description 3\"\n\t\t},\n\t\t{\n\t\t\t\"idrecord\": 4,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 4\",\n\t\t\t\"description\": \"description 4\"\n\t\t},\n\t\t{\n\t\t\t\"idrecord\": 5,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 5\",\n\t\t\t\"description\": \"description 5\"\n\t\t},\n\t\t{\n\t\t\t\"idrecord\": 6,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 6\",\n\t\t\t\"description\": \"description 6\"\n\t\t},\n\t\t{\n\t\t\t\"idrecord\": 7,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 7\",\n\t\t\t\"description\": \"description 7\"\n\t\t},\n\t\t{\n\t\t\t\"idrecord\": 8,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 8\",\n\t\t\t\"description\": \"description 8\"\n\t\t},\n\t\t{\n\t\t\t\"idrecord\": 9,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 9\",\n\t\t\t\"description\": \"description 9\"\n\t\t}\n\t],\n\t\"ColumnsToSolveOnChange\": {},\n\t\"TuiColumnSchema\": [\n\t\t{\n\t\t\t\"header\": \"IDRecord\",\n\t\t\t\"name\": \"idrecord\",\n\t\t\t\"PictTriggerSolveOnChange\": true\n\t\t},\n\t\t{\n\t\t\t\"header\": \"Entity\",\n\t\t\t\"name\": \"entity\",\n\t\t\t\"PictTriggerSolveOnChange\": true\n\t\t},\n\t\t{\n\t\t\t\"header\": \"Name\",\n\t\t\t\"name\": \"name\",\n\t\t\t\"editor\": \"text\"\n\t\t},\n\t\t{\n\t\t\t\"header\": \"Description\",\n\t\t\t\"name\": \"description\",\n\t\t\t\"editor\": \"text\"\n\t\t}\n\t]\n}","const libPictViewClass = require('pict-view');\n\nclass PictSectionTuiGrid extends libPictViewClass\n{\n\tconstructor(pFable, pOptions, pServiceHash)\n\t{\n\t\tlet tmpOptions = Object.assign({}, require('./Pict-Section-TuiGrid-DefaultConfiguration.json'), pOptions);\n\n\t\tsuper(pFable, tmpOptions, pServiceHash);\n\n\t\tthis.initialRenderComplete = false;\n\t}\n\n\tonBeforeInitialize()\n\t{\n\t\tsuper.onBeforeInitialize();\n\n\t\tthis._tuiGridPrototype = false;\n\n\t\tthis.tuiGrid = false;\n\n\t\tthis.customHeaders = require('./Pict-TuiGrid-Headers.js');\n\t\tthis.customEditors = require('./Pict-TuiGrid-Editors.js');\n\t\tthis.customFormatters = require('./Pict-TuiGrid-Formatters.js');\n\n\t\tthis.columnSchema = false;\n\t\tthis.targetElementAddress = false;\n\t\tthis.gridData = false;\n\t}\n\n\t// Overload the connectTuiGrid() function to use the inline version of the TuiGrid\n\tconnectTuiGridPrototype(pTuiGridPrototype)\n\t{\n\t\tif (typeof (pTuiGridPrototype) != 'undefined')\n\t\t{\n\t\t\tthis._tuiGridPrototype = pTuiGridPrototype;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.log.trace(`PICT-TuiGrid No TuiGrid Prototype defined or explicitly set; looking for it in the window object.`);\n\t\t\tif (typeof (window) != 'undefined')\n\t\t\t{\n\t\t\t\tif ((typeof (window.tui) != 'undefined') && (typeof (window.tui.Grid) != 'undefined'))\n\t\t\t\t{\n\t\t\t\t\tthis.log.trace(`PICT-TuiGrid Found TuiGrid Prototype in window.tuiGrid.`);\n\t\t\t\t\tthis.connectTuiGridPrototype(window.tui.Grid);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.log.error(`PICT-TuiGrid No TuiGrid Prototype found in window.tuiGrid.`);\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.log.error(`PICT-TuiGrid No TuiGrid Prototype found in window.tuiGrid -- window object unavailable.`);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @typedef {Object} TUIGridCellChange\n\t * @property {any} rowKey - The key of the row that changed.\n\t * @property {string} columnName - The name of the column that changed.\n\t * @property {any} value - The \"current\" value of the cell. Slightly different meaning in preChangeHandler vs changeHandler (before / after the change is applied).\n\t * @property {any} [nextValue] - The value that the cell will have after the change. Only populated in preChangeHandler (not changeHandler).\n\t * @property {any} [prevValue] - The value that the cell had before the change. Only populated in changeHandler (not preChangeHandler).\n\t */\n\n\t/**\n\t * @typedef {Object} TUIGridChangeEvent\n\t * @property {Object} instance - The TuiGrid instance that fired the event.\n\t * @property {TUIGridCellChange[]} changes - An array of objects representing the changes to grid cell values.\n\t */\n\n\t/**\n\t * Interface method for handling changesets from the TuiGrid control. Invoked before the change has been applied to the affected cells.\n\t *\n\t * * The pre-change cell value is stored in value while the new cell value is stored in nextValue.\n\t * * Any changes made to nextValue in this method will be reflected in the grid for that cell.\n\t *\n\t * @param {TUIGridChangeEvent} pChangeData - An event containing an array of objects representing the changes to grid cell values.\n\t */\n\tpreChangeHandler(pChangeData)\n\t{\n\t}\n\n\t/**\n\t * Interface method for handling changesets from the TuiGrid control. Invoked after the change has been applied to the affected cells.\n\t *\n\t * * Performs solver trigger for changes to any columns configured in \"ColumnsToSolveOnChange\" or with \"PictTriggerSolveOnChange\": true on a specific row.\n\t * * The previous cell value is stored in prevValue while the next cell value is stored in value.\n\t *\n\t * @param {TUIGridChangeEvent} pChangeData - An event object containing an array of objects representing the changes to grid cell values.\n\t */\n\tchangeHandler(pChangeData)\n\t{\n\t\tlet tmpSolverNecessary = false;\n\n\t\tfor (let i = 0; i < pChangeData.changes.length; i++)\n\t\t{\n\t\t\tlet tmpEntity = pChangeData.instance.getValue(pChangeData.changes[i].rowKey, 'entity');\n\t\t\tlet tmpIDRecord = pChangeData.instance.getValue(pChangeData.changes[i].rowKey, 'idrecord');\n\n\t\t\tthis.log.trace(`Generic Change Handler for TuiGrid Fired, Entity ${tmpEntity} IDRecord ${tmpIDRecord} setting Column [${pChangeData.changes[i].value}] to new Value [${pChangeData.changes[i].value}]`);\n\n\t\t\t//if (pChangeData.changes[i].columnName == 'some_important_column')\n\t\t\t//{\n\t\t\t//if (pChangeData.changes[i].value > some_important_threshold)\n\t\t\t//{\n\t\t\t// Do something\n\t\t\t//}\n\t\t\t//}\n\t\t\tif (this.options.ColumnsToSolveOnChange.hasOwnProperty(pChangeData.changes[i].columnName))\n\t\t\t{\n\t\t\t\ttmpSolverNecessary = true;\n\t\t\t}\n\t\t}\n\n\t\tif (tmpSolverNecessary)\n\t\t{\n\t\t\tthis.services.PictApplication.solve();\n\t\t}\n\t}\n\n\tonAfterRender()\n\t{\n\t\tif (!this.initialRenderComplete)\n\t\t{\n\t\t\tthis.onAfterInitialRender();\n\t\t\tthis.initialRenderComplete = true;\n\t\t}\n\t}\n\n\tonAfterInitialRender()\n\t{\n\t\t// This is where we wire up and initialize the tuigrid control -- the initial render has put the placeholder content in place.\n\t\t// Check for a tuigrid prototype, and find it in the window object it if it doesn't exist\n\t\tif (!this._tuiGridPrototype)\n\t\t{\n\t\t\tthis.connectTuiGridPrototype();\n\t\t}\n\t\t// This is where we wire up and initialize the tuigrid control\n\t\tif (this.tuiGrid)\n\t\t{\n\t\t\t// The grid is already initialized.\n\t\t\tthis.log.error(`TuiGrid going to ${this.options.TargetElementAddress} is already initialized!`);\n\t\t\treturn false;\n\t\t}\n\n\t\tif (this.options.GridDataAddress)\n\t\t{\n\t\t\tlet tmpAddressedData = this.fable.manifest.getValueByHash(this.AppData, this.options.GridDataAddress);\n\t\t\tif (typeof (tmpAddressedData) != 'object')\n\t\t\t{\n\t\t\t\tthis.log.error(`Address for GridData [${this.options.GridDataAddress}] did not return an object; it was a ${typeof (tmpAddressedData)}.`);\n\t\t\t\tthis.gridData = [];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.gridData = JSON.parse(JSON.stringify(tmpAddressedData));\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.gridData = [];\n\t\t}\n\n\t\tlet tmpTargetElementSet = this.services.ContentAssignment.getElement(this.options.TargetElementAddress);\n\t\tif (tmpTargetElementSet.length < 1)\n\t\t{\n\t\t\tthis.log.error(`Could not find target element [${this.options.TargetElementAddress}] for TuiGrid!  Rendering won't function properly.`);\n\t\t\tthis.targetElement = false;\n\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Just go for the first one.\n\t\t\tthis.targetElement = tmpTargetElementSet[0];\n\t\t}\n\n\t\t// Check to see if there are any custom formatters.\n\t\tthis.columnSchema = this.options.TuiColumnSchema;\n\t\t// Setup the solver and custom schema handlers.\n\t\tfor (let i = 0; i < this.columnSchema.length; i++)\n\t\t{\n\t\t\tlet tmpColumn = this.columnSchema[i];\n\t\t\t// If this bit is set on a column, the Form solver will trigger each time a change happens to that column.\n\t\t\tif (tmpColumn.PictTriggerSolveOnChange)\n\t\t\t{\n\t\t\t\tthis.options.ColumnsToSolveOnChange[tmpColumn.name] = tmpColumn;\n\t\t\t}\n\t\t\t// Look to see if there is an internal formatter that matches the type\n\t\t\tif ((tmpColumn.hasOwnProperty('formatter')) && (this.customFormatters.hasOwnProperty(tmpColumn.formatter)))\n\t\t\t{\n\t\t\t\t// Assign our special formatter to the column.\n\t\t\t\ttmpColumn.formatter = this.customFormatters[tmpColumn.formatter];\n\t\t\t}\n\t\t\t// Look to see if there is an editor stanza\n\t\t\tif (tmpColumn.hasOwnProperty('editor'))\n\t\t\t{\n\t\t\t\t// Look to see if there is an internal editor that matches the type\n\t\t\t\tif ((tmpColumn.editor.hasOwnProperty('type'))\n\t\t\t\t\t&& (typeof (tmpColumn.editor.type) == 'string')\n\t\t\t\t\t&& (this.customEditors.hasOwnProperty(tmpColumn.editor.type)))\n\t\t\t\t{\n\t\t\t\t\t// Assign our special editor to the column.\n\t\t\t\t\ttmpColumn.editor.type = this.customEditors[tmpColumn.editor.type];\n\t\t\t\t}\n\n\t\t\t\t// Look to see if there is an internal editor that matches the type\n\t\t\t\tif ((tmpColumn.editor.hasOwnProperty('options'))\n\t\t\t\t\t&& (typeof (tmpColumn.editor.options) == 'object')\n\t\t\t\t\t&& (tmpColumn.editor.options.hasOwnProperty('listItems'))\n\t\t\t\t\t&& (typeof (tmpColumn.editor.options.listItems) == 'string'))\n\t\t\t\t{\n\t\t\t\t\t// Look for this address!  For the Record object, we will pass in the options.\n\t\t\t\t\tlet tmpListItems = this.fable.manifest.getValueByHash({ AppData: this.AppData, Options: this.options }, tmpColumn.editor.options.listItems);\n\t\t\t\t\tif (typeof (tmpListItems) == 'object')\n\t\t\t\t\t{\n\t\t\t\t\t\ttmpColumn.editor.options.listItems = tmpListItems;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.log.warn(`Pict TuiGrid for column [${tmpColumn.name}] had [${tmpColumn.editor.options.listItems}] as a listItems address, but it didn't return an object.  It was a [${typeof (tmpListItems)}].  Setting to empty list.`);\n\t\t\t\t\t\ttmpColumn.editor.options.listItems = [];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.gridSettings = {\n\t\t\t\tdata: this.gridData,\n\t\t\t\tel: this.targetElement,\n\t\t\t\tcolumns: this.columnSchema,\n\n\t\t\t\t// This is no bueno, yo\n\t\t\t\tusageStatistics: false,\n\n\t\t\t\tscrollY: this.options.GridScrollY,\n\n\t\t\t\tcolumnOptions:\n\t\t\t\t{\n\t\t\t\t\tresizable: this.options.GridColumnWidthResizable\n\t\t\t\t}\n\t\t\t};\n\n\t\tthis.customConfigureGridSettings();\n\n\t\tlet libTuiGrid = this._tuiGridPrototype;\n\t\tthis.tuiGrid = new libTuiGrid(this.gridSettings);\n\t\tthis.tuiGrid.on('beforeChange', (pChangeData) => { this.preChangeHandler(pChangeData); });\n\t\tthis.tuiGrid.on('afterChange', (pChangeData) => { this.changeHandler(pChangeData); });\n\t}\n\n\tcustomConfigureGridSettings ()\n\t{\n\t\t// This can be overloaded to tweak up the this.gridSettings\n\t}\n\n\tSetGridValue(pCellColumnToBeSet, pCellValueToSet, pLookupValue, pLookupColumn)\n\t{\n\t\tif (typeof (pLookupValue) == 'undefined')\n\t\t{\n\t\t\tconsole.log(`Could not set grid value [${pCellColumnToBeSet}] = [${pCellValueToSet}] looked up by [${pLookupColumn}]::[${pLookupValue}].  No valid lookup value!`);\n\t\t\treturn false;\n\t\t}\n\n\t\tif (this.tuiGrid)\n\t\t{\n\t\t\tlet tmpData = this.tuiGrid.getData();\n\n\t\t\tfor (let i = 0; i < tmpData.length; i++)\n\t\t\t{\n\t\t\t\tlet tmpRecord = tmpData[i];\n\n\t\t\t\tif (tmpRecord[pLookupColumn] == pLookupValue)\n\t\t\t\t{\n\t\t\t\t\tthis.tuiGrid.setValue(i, pCellColumnToBeSet, pCellValueToSet);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.log.warn(`Could not set grid value [${pCellColumnToBeSet}] = [${pCellValueToSet}] looked up by [${pLookupColumn}]::[${pLookupValue}].  No valid grid!`);\n\t\t}\n\t}\n\n\tSetGridValueByRowKey(pCellColumnToBeSet, pCellValueToSet, pRowKey)\n\t{\n\t\tif (typeof (pRowKey) == 'undefined')\n\t\t{\n\t\t\tthis.log.error(`Could not set grid value [${pCellColumnToBeSet}] = [${pCellValueToSet}] looked up by row key [${pRowKey}].  No valid row key!`);\n\t\t\treturn false;\n\t\t}\n\n\n\t\tif (this.tuiGrid)\n\t\t{\n\t\t\tthis.tuiGrid.setValue(pRowKey, pCellColumnToBeSet, pCellValueToSet);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.log.warn(`Could not set grid value [${pCellColumnToBeSet}] = [${pCellValueToSet}] looked up by [${pLookupColumn}]::[${pLookupValue}].  No valid grid!`);\n\t\t}\n\t}\n}\n\nmodule.exports = PictSectionTuiGrid;\n\nmodule.exports.default_configuration = require('./Pict-Section-TuiGrid-DefaultConfiguration.json');\n","// Custom number editor class with an option for precision\nclass tuiCustomEditorNumber\n{\n\tconstructor(pProperties)\n\t{\n\t\tconst tmpElement = document.createElement('input');\n\n\t\tconst decimalPrecision = (pProperties.columnInfo.editor.options.decimalPrecision) ? pProperties.columnInfo.editor.options.decimalPrecision : 3;\n\n\t\ttmpElement.type = 'number';\n\t\ttmpElement.value = String(pProperties.value);\n\t\ttmpElement.oninput = (pElement) =>\n\t\t{\n\t\t\tconst tmpCastNumber = parseFloat(pElement.target.value).toFixed(decimalPrecision).toString()\n\t\t\tif (tmpCastNumber.length < parseFloat(pElement.target.value).toString().length)\n\t\t\t{\n\t\t\t\tpElement.target.value = tmpCastNumber;\n\t\t\t}\n\t\t};\n\n\t\tthis.Element = tmpElement;\n\t}\n\n\tgetElement()\n\t{\n\t\treturn this.Element;\n\t}\n\n\tgetValue()\n\t{\n\t\treturn this.Element.value;\n\t}\n\n\tmounted()\n\t{\n\t\tthis.Element.select();\n\t}\n}\n\nmodule.exports = tuiCustomEditorNumber;","const tuiGridHeaders = {};\n\ntuiGridHeaders.EditorNumber = require('./Pict-TuiGrid-Editor-Number.js');\n\nmodule.exports = tuiGridHeaders;","// Static functions for formatting data in the grid.\nconst tuiGridFormatters = {};\n\ntuiGridFormatters.FormatterTwoDigitNumber = (pCell) =>\n\t{\n\t\tlet tmpCellValue = Number.parseFloat(pCell.value).toFixed(2);\n\t\tif (isNaN(tmpCellValue))\n\t\t{\n\t\t\treturn '';\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn tmpCellValue;\n\t\t}\n\t}\n\ntuiGridFormatters.FormatterCurrencyNumber = (pCell) =>\n\t{\n\t\tlet tmpCellValue = tuiGridFormatters.FormatterTwoDigitNumber(pCell);\n\t\tif (tmpCellValue == '')\n\t\t{\n\t\t\treturn tmpCellValue;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn `$${tmpCellValue}`;\n\t\t}\n\t}\n\nmodule.exports = tuiGridFormatters;","const tuiGridHeaders = {};\n\n// Custom column header where the header is hidden\nclass tuiCustomColumnHeaderNone\n{\n\tconstructor()\n\t{\n\t\tlet tmpElement = document.createElement('input');\n\t\ttmpElement.type = 'hidden';\n\t\ttmpElement.value = '';\n\t\tthis.Element = tmpElement;\n\t}\n\n\tgetElement()\n\t{\n\t\treturn this.Element;\n\t}\n\n\trender()\n\t{\n\t\t// Noop!\n\t}\n}\n\ntuiGridHeaders.CustomColumnHeaderNone = tuiCustomColumnHeaderNone;\n\nmodule.exports = tuiGridHeaders;"]}