{"version":3,"sources":["pict-section-tuigrid.compatible.min.js","node_modules/browser-pack/_prelude.js","node_modules/fable-serviceproviderbase/package.json","node_modules/fable-serviceproviderbase/source/Fable-ServiceProviderBase.js","node_modules/pict-view/package.json","node_modules/pict-view/source/Pict-View.js","source/Pict-Section-TuiGrid-DefaultConfiguration.json","source/Pict-Section-TuiGrid.js","source/Pict-TuiGrid-Editor-Number.js","source/Pict-TuiGrid-Editor-Text.js","source/Pict-TuiGrid-Editors.js","source/Pict-TuiGrid-Headers.js"],"names":["_superPropGet","t","o","e","r","p","_get","_getPrototypeOf","prototype","apply","Reflect","get","bind","_superPropBase","n","Object","getOwnPropertyDescriptor","call","arguments","length","value","hasOwnProperty","_callSuper","_possibleConstructorReturn","_isNativeReflectConstruct","construct","constructor","_typeof","TypeError","_assertThisInitialized","ReferenceError","Boolean","valueOf","setPrototypeOf","getPrototypeOf","__proto__","_inherits","create","writable","configurable","defineProperty","_setPrototypeOf","_classCallCheck","a","_defineProperties","enumerable","_toPropertyKey","key","_createClass","_defineProperty","i","_toPrimitive","Symbol","toPrimitive","String","Number","iterator","f","exports","module","define","amd","window","global","self","this","PictSectionTuigrid","c","require","u","Error","code","name","version","description","main","scripts","start","test","tests","coverage","build","mocha","diff","extension","package","reporter","slow","timeout","ui","repository","type","url","keywords","author","license","bugs","homepage","devDependencies","fable","quackage","libPackage","FableServiceProviderBase","pFable","pOptions","pServiceHash","isFable","connectFable","_PackageFableServiceProvider","UUID","getUUID","options","concat","Math","floor","random","serviceType","Hash","tmpErrorMessage","console","log","Logging","services","servicesMap","CoreServiceProviderBase","types","lint","eslint","pict","typescript","dependencies","libFableServiceBase","defaultPictViewSettings","DefaultRenderable","DefaultDestinationAddress","DefaultTemplateRecordAddress","ViewIdentifier","AutoInitialize","AutoInitializeOrdinal","AutoRender","AutoRenderOrdinal","AutoSolveWithApp","AutoSolveOrdinal","CSSHash","CSS","CSSProvider","CSSPriority","Templates","DefaultTemplates","Renderables","Manifests","PictView","_libFableServiceBase","_this","assign","JSON","parse","stringify","_Package","AppData","Bundle","initializeTimestamp","lastSolvedTimestamp","lastRenderedTimestamp","lastMarshalFromViewTimestamp","lastMarshalToViewTimestamp","tmpTemplate","Source","TemplateProvider","addTemplate","Template","error","tmpDefaultTemplate","addDefaultTemplate","Prefix","Postfix","tmpCSSHash","tmpCSSProvider","CSSMap","addCSS","renderables","tmpRenderable","addRenderable","pRenderableHash","pTemplateHash","pDefaultTemplateRecordAddress","pDefaultDestinationAddress","pRenderMethod","RenderableHash","TemplateHash","ContentDestinationAddress","RenderMethod","LogNoisiness","trace","fCallback","onBeforeInitialize","onInitialize","LogControlFlow","warn","onAfterInitialize","getTimeStamp","_this2","tmpAnticipate","instantiateServiceProviderWithoutRegistration","info","anticipate","onBeforeInitializeAsync","onInitializeAsync","onAfterInitializeAsync","wait","pError","message","stack","pRenderable","pRenderDestinationAddress","pRecord","pTemplateRecordAddress","tmpRenderOptions","Valid","Renderable","DestinationAddress","RecordAddress","Record","DataProvider","getDataByAddress","undefined","pContent","ContentAssignment","projectContent","TestAddress","tmpRenderableHash","tmpRecordAddress","tmpRecord","tmpRenderDestinationAddress","onBeforeRender","tmpContent","parseTemplateByHash","onAfterRender","_this3","tmpCallback","Name","newAnticipate","fOnBeforeRenderCallback","onBeforeRenderAsync","fAsyncTemplateCallback","fOnAfterRenderCallback","onAfterRenderAsync","renderAsync","buildRenderOptions","assignRenderContent","_this4","onBeforeSolve","onSolve","onAfterSolve","_this5","onBeforeSolveAsync","onSolveAsync","onAfterSolveAsync","onBeforeMarshalFromView","onMarshalFromView","onAfterMarshalFromView","_this6","onBeforeMarshalFromViewAsync","onMarshalFromViewAsync","onAfterMarshalFromViewAsync","onBeforeMarshalToView","onMarshalToView","onAfterMarshalToView","_this7","onBeforeMarshalToViewAsync","onMarshalToViewAsync","onAfterMarshalToViewAsync","RenderOnLoad","GridWidth","GridRowHeight","GridBodyHeight","GridBodyMinHeight","GridColumnMinWidth","GridColumnWidthResizable","GridColumnHeightResizable","GridColumnFrozenCount","GridColumnFrozenBorderWidth","GridScrollX","GridScrollY","GridShowDummyRows","GridDraggableRows","GridSelectionUnit","TargetElementAddress","GridDataAddress","GridData","idrecord","entity","ColumnsToSolveOnChange","TuiColumnSchema","header","PictTriggerSolveOnChange","editor","PictSectionTuiGrid","_libPictViewClass","_this8","dateFormatter","initialRenderComplete","customFormatters","_tuiGridPrototype","tuiGrid","customHeaders","customEditors","initializeCustomFormatters","columnSchema","targetElementAddress","gridData","_this9","FormatterTwoDigitNumber","pCell","_pCell$decimalPrecisi","tmpCellValue","parseFloat","tmpPrecision","decimalPrecision","isNaN","roundPrecise","FormatterCurrencyNumber","_pCell$decimalPrecisi2","DataFormat","formatterDollars","FormatterRoundedNumber","_pCell$decimalPrecisi3","FormatterDate","tmpDate","Dates","dayJS","utc","dateformat","format","pTuiGridPrototype","tui","Grid","connectTuiGridPrototype","pChangeData","tmpSolverNecessary","changes","tmpEntity","instance","getValue","rowKey","tmpIDRecord","columnName","PictApplication","solve","onAfterInitialRender","_this10","tmpAddressedData","manifest","getValueByHash","tmpTargetElementSet","getElement","targetElement","tmpColumn","formatter","listItems","tmpListItems","Options","gridSettings","data","el","columns","usageStatistics","scrollY","columnOptions","resizable","customConfigureGridSettings","libTuiGrid","on","tmpChangeData","preChangeHandler","changeHandler","pCellColumnToBeSet","pCellValueToSet","pLookupValue","pLookupColumn","tmpData","getData","setValue","pRowKey","default_configuration","tuiCustomEditorNumber","pProperties","tmpElement","document","createElement","columnInfo","oninput","pElement","target","HTMLInputElement","tmpCastNumber","toFixed","toString","Element","select","tuiCustomEditorText","placeholder","pattern","minLength","maxLength","required","EditorNumber","EditorText","tuiCustomColumnHeaderNone","CustomColumnHeaderNone"],"mappings":"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","file":"pict-section-tuigrid.compatible.min.js","sourcesContent":["(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.PictSectionTuigrid = f()}})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){\nmodule.exports={\n    \"name\": \"fable-serviceproviderbase\",\n    \"version\": \"3.0.15\",\n    \"description\": \"Simple base classes for fable services.\",\n    \"main\": \"source/Fable-ServiceProviderBase.js\",\n    \"scripts\": {\n        \"start\": \"node source/Fable-ServiceProviderBase.js\",\n        \"test\": \"npx mocha -u tdd -R spec\",\n        \"tests\": \"npx mocha -u tdd --exit -R spec --grep\",\n        \"coverage\": \"npx nyc --reporter=lcov --reporter=text-lcov npx mocha -- -u tdd -R spec\",\n        \"build\": \"npx quack build\"\n    },\n    \"mocha\": {\n        \"diff\": true,\n        \"extension\": [\n            \"js\"\n        ],\n        \"package\": \"./package.json\",\n        \"reporter\": \"spec\",\n        \"slow\": \"75\",\n        \"timeout\": \"5000\",\n        \"ui\": \"tdd\",\n        \"watch-files\": [\n            \"source/**/*.js\",\n            \"test/**/*.js\"\n        ],\n        \"watch-ignore\": [\n            \"lib/vendor\"\n        ]\n    },\n    \"repository\": {\n        \"type\": \"git\",\n        \"url\": \"https://github.com/stevenvelozo/fable-serviceproviderbase.git\"\n    },\n    \"keywords\": [\n        \"entity\",\n        \"behavior\"\n    ],\n    \"author\": \"Steven Velozo <steven@velozo.com> (http://velozo.com/)\",\n    \"license\": \"MIT\",\n    \"bugs\": {\n        \"url\": \"https://github.com/stevenvelozo/fable-serviceproviderbase/issues\"\n    },\n    \"homepage\": \"https://github.com/stevenvelozo/fable-serviceproviderbase\",\n    \"devDependencies\": {\n        \"fable\": \"^3.0.143\",\n        \"quackage\": \"^1.0.33\"\n    }\n}\n},{}],2:[function(require,module,exports){\n/**\n* Fable Service Base\n* @author <steven@velozo.com>\n*/\n\nconst libPackage = require('../package.json');\n\nclass FableServiceProviderBase\n{\n\t// The constructor can be used in two ways:\n\t// 1) With a fable, options object and service hash (the options object and service hash are optional)\n\t// 2) With an object or nothing as the first parameter, where it will be treated as the options object\n\tconstructor(pFable, pOptions, pServiceHash)\n\t{\n\t\t// Check if a fable was passed in; connect it if so\n\t\tif ((typeof(pFable) === 'object') && pFable.isFable)\n\t\t{\n\t\t\tthis.connectFable(pFable);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.fable = false;\n\t\t}\n\n\t\t// Initialize the services map if it wasn't passed in\n\t\t/** @type {Object} */\n\t\tthis._PackageFableServiceProvider = libPackage;\n\n\t\t// initialize options and UUID based on whether the fable was passed in or not.\n\t\tif (this.fable)\n\t\t{\n\t\t\tthis.UUID = pFable.getUUID();\n\t\t\tthis.options = (typeof(pOptions) === 'object') ? pOptions\n\t\t\t\t\t\t\t: {};\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// With no fable, check to see if there was an object passed into either of the first two\n\t\t\t// Parameters, and if so, treat it as the options object\n\t\t\tthis.options = ((typeof(pFable) === 'object') && !pFable.isFable) ? pFable\n\t\t\t\t\t\t\t: (typeof(pOptions) === 'object') ? pOptions\n\t\t\t\t\t\t\t: {};\n\t\t\tthis.UUID = `CORE-SVC-${Math.floor((Math.random() * (99999 - 10000)) + 10000)}`\n\t\t}\n\n\t\t// It's expected that the deriving class will set this\n\t\tthis.serviceType = `Unknown-${this.UUID}`;\n\n\t\t// The service hash is used to identify the specific instantiation of the service in the services map\n\t\tthis.Hash = (typeof(pServiceHash) === 'string') ? pServiceHash \n\t\t\t\t\t: (!this.fable && (typeof(pOptions) === 'string')) ? pOptions\n\t\t\t\t\t: `${this.UUID}`;\n\t}\n\n\tconnectFable(pFable)\n\t{\n\t\tif ((typeof(pFable) !== 'object') || (!pFable.isFable))\n\t\t{\n\t\t\tlet tmpErrorMessage = `Fable Service Provider Base: Cannot connect to Fable, invalid Fable object passed in.  The pFable parameter was a [${typeof(pFable)}].}`;\n\t\t\tconsole.log(tmpErrorMessage);\n\t\t\treturn new Error(tmpErrorMessage);\n\t\t}\n\n\t\tif (!this.fable)\n\t\t{\n\t\t\tthis.fable = pFable;\n\t\t}\n\n\t\tif (!this.log)\n\t\t{\n\t\t\tthis.log = this.fable.Logging;\n\t\t}\n\t\tif (!this.services)\n\t\t{\n\t\t\tthis.services = this.fable.services;\n\t\t}\n\n\t\tif (!this.servicesMap)\n\t\t{\n\t\t\tthis.servicesMap = this.fable.servicesMap;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tstatic isFableService = true;\n}\n\nmodule.exports = FableServiceProviderBase;\n\n// This is left here in case we want to go back to having different code/base class for \"core\" services\nmodule.exports.CoreServiceProviderBase = FableServiceProviderBase;\n},{\"../package.json\":1}],3:[function(require,module,exports){\nmodule.exports={\n    \"name\": \"pict-view\",\n    \"version\": \"1.0.61\",\n    \"description\": \"Pict View Base Class\",\n    \"main\": \"source/Pict-View.js\",\n    \"scripts\": {\n        \"test\": \"./node_modules/.bin/mocha -u tdd -R spec\",\n        \"start\": \"node source/Pict-View.js\",\n        \"coverage\": \"./node_modules/.bin/nyc --reporter=lcov --reporter=text-lcov ./node_modules/mocha/bin/_mocha -- -u tdd -R spec\",\n        \"build\": \"npx quack build\",\n        \"docker-dev-build\": \"docker build ./ -f Dockerfile_LUXURYCode -t pict-view-image:local\",\n        \"docker-dev-run\": \"docker run -it -d --name pict-view-dev -p 30001:8080 -p 38086:8086 -v \\\"$PWD/.config:/home/coder/.config\\\"  -v \\\"$PWD:/home/coder/pict-view\\\" -u \\\"$(id -u):$(id -g)\\\" -e \\\"DOCKER_USER=$USER\\\" pict-view-image:local\",\n        \"docker-dev-shell\": \"docker exec -it pict-view-dev /bin/bash\",\n        \"types\": \"tsc -p .\",\n        \"lint\": \"eslint source/**\"\n    },\n    \"types\": \"types/source/Pict-View.d.ts\",\n    \"repository\": {\n        \"type\": \"git\",\n        \"url\": \"git+https://github.com/stevenvelozo/pict-view.git\"\n    },\n    \"author\": \"steven velozo <steven@velozo.com>\",\n    \"license\": \"MIT\",\n    \"bugs\": {\n        \"url\": \"https://github.com/stevenvelozo/pict-view/issues\"\n    },\n    \"homepage\": \"https://github.com/stevenvelozo/pict-view#readme\",\n    \"devDependencies\": {\n        \"@eslint/js\": \"^9.28.0\",\n        \"browser-env\": \"^3.3.0\",\n        \"eslint\": \"^9.28.0\",\n        \"pict\": \"^1.0.272\",\n        \"quackage\": \"^1.0.41\",\n        \"typescript\": \"^5.8.3\"\n    },\n    \"mocha\": {\n        \"diff\": true,\n        \"extension\": [\n            \"js\"\n        ],\n        \"package\": \"./package.json\",\n        \"reporter\": \"spec\",\n        \"slow\": \"75\",\n        \"timeout\": \"5000\",\n        \"ui\": \"tdd\",\n        \"watch-files\": [\n            \"source/**/*.js\",\n            \"test/**/*.js\"\n        ],\n        \"watch-ignore\": [\n            \"lib/vendor\"\n        ]\n    },\n    \"dependencies\": {\n        \"fable\": \"^3.1.11\",\n        \"fable-serviceproviderbase\": \"^3.0.15\"\n    }\n}\n\n},{}],4:[function(require,module,exports){\n\nconst libFableServiceBase = require('fable-serviceproviderbase');\n\nconst libPackage = require('../package.json');\n\nconst defaultPictViewSettings = (\n\t{\n\t\tDefaultRenderable: false,\n\t\tDefaultDestinationAddress: false,\n\t\tDefaultTemplateRecordAddress: false,\n\n\t\tViewIdentifier: false,\n\n\t\t// If this is set to true, when the App initializes this will.\n\t\t// After the App initializes, initialize will be called as soon as it's added.\n\t\tAutoInitialize: true,\n\t\tAutoInitializeOrdinal: 0,\n\n\t\t// If this is set to true, when the App autorenders (on load) this will.\n\t\t// After the App initializes, render will be called as soon as it's added.\n\t\tAutoRender: true,\n\t\tAutoRenderOrdinal: 0,\n\n\t\tAutoSolveWithApp: true,\n\t\tAutoSolveOrdinal: 0,\n\n\t\tCSSHash: false,\n\t\tCSS: false,\n\t\tCSSProvider: false,\n\t\tCSSPriority: 500,\n\n\t\tTemplates: [],\n\n\t\tDefaultTemplates: [],\n\n\t\tRenderables: [],\n\n\t\tManifests: {}\n\t});\n\n/** @typedef {(error?: Error) => void} ErrorCallback */\n/** @typedef {number | boolean} PictTimestamp */\n\n/**\n * @typedef {'replace' | 'append' | 'prepend' | 'append_once'} RenderMethod\n */\n/**\n * @typedef {Object} Renderable\n *\n * @property {string} RenderableHash - A unique hash for the renderable.\n * @property {string} TemplateHash] - The hash of the template to use for rendering this renderable.\n * @property {string} [DefaultTemplateRecordAddress] - The default address for resolving the data record for this renderable.\n * @property {string} [ContentDestinationAddress] - The default address (DOM CSS selector) for rendering the content of this renderable.\n * @property {RenderMethod} [RenderMethod=replace] - The method to use when projecting the renderable to the DOM ('replace', 'append', 'prepend', 'append_once').\n * @property {string} [TestAddress] - The address to use for testing the renderable.\n */\n\n/**\n * Represents a view in the Pict ecosystem.\n */\nclass PictView extends libFableServiceBase\n{\n\t/**\n\t * @param {any} pFable - The Fable object that this service is attached to.\n\t * @param {any} [pOptions] - (optional) The options for this service.\n\t * @param {string} [pServiceHash] - (optional) The hash of the service.\n\t */\n\tconstructor(pFable, pOptions, pServiceHash)\n\t{\n\t\t// Intersect default options, parent constructor, service information\n\t\tlet tmpOptions = Object.assign({}, JSON.parse(JSON.stringify(defaultPictViewSettings)), pOptions);\n\t\tsuper(pFable, tmpOptions, pServiceHash);\n\t\t//FIXME: add types to fable and ancillaries\n\t\t/** @type {any} */\n\t\tthis.fable;\n\t\t/** @type {any} */\n\t\tthis.options;\n\t\t/** @type {String} */\n\t\tthis.UUID;\n\t\t/** @type {String} */\n\t\tthis.Hash;\n\t\t/** @type {any} */\n\t\tthis.log;\n\n\t\tif (!this.options.ViewIdentifier)\n\t\t{\n\t\t\tthis.options.ViewIdentifier = `AutoViewID-${this.fable.getUUID()}`;\n\t\t}\n\t\tthis.serviceType = 'PictView';\n\t\t/** @type {Record<string, any>} */\n\t\tthis._Package = libPackage;\n\t\t// Convenience and consistency naming\n\t\t/** @type {import('pict') & { log: any, instantiateServiceProviderWithoutRegistration: (hash: String) => any }} */\n\t\tthis.pict = this.fable;\n\t\t// Wire in the essential Pict application state\n\t\tthis.AppData = this.pict.AppData;\n\t\tthis.Bundle = this.pict.Bundle;\n\n\t\t/** @type {PictTimestamp} */\n\t\tthis.initializeTimestamp = false;\n\t\t/** @type {PictTimestamp} */\n\t\tthis.lastSolvedTimestamp = false;\n\t\t/** @type {PictTimestamp} */\n\t\tthis.lastRenderedTimestamp = false;\n\t\t/** @type {PictTimestamp} */\n\t\tthis.lastMarshalFromViewTimestamp = false;\n\t\t/** @type {PictTimestamp} */\n\t\tthis.lastMarshalToViewTimestamp = false;\n\n\t\t// Load all templates from the array in the options\n\t\t// Templates are in the form of {Hash:'Some-Template-Hash',Template:'Template content',Source:'TemplateSource'}\n\t\tfor (let i = 0; i < this.options.Templates.length; i++)\n\t\t{\n\t\t\tlet tmpTemplate = this.options.Templates[i];\n\n\t\t\tif (!('Hash' in tmpTemplate) || !('Template' in tmpTemplate))\n\t\t\t{\n\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not load Template ${i} in the options array.`, tmpTemplate);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (!tmpTemplate.Source)\n\t\t\t\t{\n\t\t\t\t\ttmpTemplate.Source = `PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} options object.`;\n\t\t\t\t}\n\t\t\t\tthis.pict.TemplateProvider.addTemplate(tmpTemplate.Hash, tmpTemplate.Template, tmpTemplate.Source);\n\t\t\t}\n\t\t}\n\n\t\t// Load all default templates from the array in the options\n\t\t// Templates are in the form of {Prefix:'',Postfix:'-List-Row',Template:'Template content',Source:'TemplateSourceString'}\n\t\tfor (let i = 0; i < this.options.DefaultTemplates.length; i++)\n\t\t{\n\t\t\tlet tmpDefaultTemplate = this.options.DefaultTemplates[i];\n\n\t\t\tif (!('Postfix' in tmpDefaultTemplate) || !('Template' in tmpDefaultTemplate))\n\t\t\t{\n\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not load Default Template ${i} in the options array.`, tmpDefaultTemplate);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (!tmpDefaultTemplate.Source)\n\t\t\t\t{\n\t\t\t\t\ttmpDefaultTemplate.Source = `PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} options object.`;\n\t\t\t\t}\n\t\t\t\tthis.pict.TemplateProvider.addDefaultTemplate(tmpDefaultTemplate.Prefix, tmpDefaultTemplate.Postfix, tmpDefaultTemplate.Template, tmpDefaultTemplate.Source);\n\t\t\t}\n\t\t}\n\n\t\t// Load the CSS if it's available\n\t\tif (this.options.CSS)\n\t\t{\n\t\t\tlet tmpCSSHash = this.options.CSSHash ? this.options.CSSHash : `View-${this.options.ViewIdentifier}`;\n\t\t\tlet tmpCSSProvider = this.options.CSSProvider ? this.options.CSSProvider : tmpCSSHash;\n\t\t\tthis.pict.CSSMap.addCSS(tmpCSSHash, this.options.CSS, tmpCSSProvider, this.options.CSSPriority);\n\t\t}\n\n\t\t// Load all renderables\n\t\t// Renderables are launchable renderable instructions with templates\n\t\t// They look as such: {Identifier:'ContentEntry', TemplateHash:'Content-Entry-Section-Main', ContentDestinationAddress:'#ContentSection', RecordAddress:'AppData.Content.DefaultText', ManifestTransformation:'ManyfestHash', ManifestDestinationAddress:'AppData.Content.DataToTransformContent'}\n\t\t// The only parts that are necessary are Identifier and Template\n\t\t// A developer can then do render('ContentEntry') and it just kinda works.  Or they can override the ContentDestinationAddress\n\t\t/** @type {Object<String, Renderable>} */\n\t\tthis.renderables = {};\n\t\tfor (let i = 0; i < this.options.Renderables.length; i++)\n\t\t{\n\t\t\t/** @type {Renderable} */\n\t\t\tlet tmpRenderable = this.options.Renderables[i];\n\t\t\tthis.addRenderable(tmpRenderable);\n\t\t}\n\t}\n\n\t/**\n\t * Adds a renderable to the view.\n\t *\n\t * @param {string | Renderable} pRenderableHash - The hash of the renderable, or a renderable object.\n\t * @param {string} [pTemplateHash] - (optional) The hash of the template for the renderable.\n\t * @param {string} [pDefaultTemplateRecordAddress] - (optional) The default data address for the template.\n\t * @param {string} [pDefaultDestinationAddress] - (optional) The default destination address for the renderable.\n\t * @param {RenderMethod} [pRenderMethod=replace] - (optional) The method to use when rendering the renderable (ex. 'replace').\n\t */\n\taddRenderable(pRenderableHash, pTemplateHash, pDefaultTemplateRecordAddress, pDefaultDestinationAddress, pRenderMethod)\n\t{\n\t\t/** @type {Renderable} */\n\t\tlet tmpRenderable;\n\n\t\tif (typeof(pRenderableHash) == 'object')\n\t\t{\n\t\t\t// The developer passed in the renderable as an object.\n\t\t\t// Use theirs instead!\n\t\t\ttmpRenderable = pRenderableHash;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t/** @type {RenderMethod} */\n\t\t\tlet tmpRenderMethod = (typeof(pRenderMethod) !== 'string') ? pRenderMethod : 'replace';\n\t\t\ttmpRenderable = (\n\t\t\t\t{\n\t\t\t\t\tRenderableHash: pRenderableHash,\n\t\t\t\t\tTemplateHash: pTemplateHash,\n\t\t\t\t\tDefaultTemplateRecordAddress: pDefaultTemplateRecordAddress,\n\t\t\t\t\tContentDestinationAddress: pDefaultDestinationAddress,\n\t\t\t\t\tRenderMethod: tmpRenderMethod\n\t\t\t\t});\n\t\t}\n\n\t\tif ((typeof(tmpRenderable.RenderableHash) != 'string') || (typeof(tmpRenderable.TemplateHash) != 'string'))\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not load Renderable; RenderableHash or TemplateHash are invalid.`, tmpRenderable);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (this.pict.LogNoisiness > 0)\n\t\t\t{\n\t\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} adding renderable [${tmpRenderable.RenderableHash}] pointed to template ${tmpRenderable.TemplateHash}.`);\n\t\t\t}\n\n\t\t\tthis.renderables[tmpRenderable.RenderableHash] = tmpRenderable;\n\t\t}\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*                        Code Section: Initialization                        */\n\t/* -------------------------------------------------------------------------- */\n\t/**\n\t * Lifecycle hook that triggers before the view is initialized.\n\t */\n\tonBeforeInitialize()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onBeforeInitialize:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers before the view is initialized (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonBeforeInitializeAsync(fCallback)\n\t{\n\t\tthis.onBeforeInitialize();\n\t\treturn fCallback();\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers when the view is initialized.\n\t */\n\tonInitialize()\n\t{\n\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onInitialize:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers when the view is initialized (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonInitializeAsync(fCallback)\n\t{\n\t\tthis.onInitialize();\n\t\treturn fCallback();\n\t}\n\n\t/**\n\t * Performs view initialization.\n\t */\n\tinitialize()\n\t{\n\t\tif (this.pict.LogControlFlow)\n\t\t{\n\t\t\tthis.log.trace(`PICT-ControlFlow VIEW [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} initialize:`);\n\t\t}\n\n\t\tif (!this.initializeTimestamp)\n\t\t{\n\t\t\tthis.onBeforeInitialize();\n\t\t\tthis.onInitialize();\n\t\t\tthis.onAfterInitialize();\n\t\t\tthis.initializeTimestamp = this.pict.log.getTimeStamp();\n\t\t\treturn true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.log.warn(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} initialize called but initialization is already completed.  Aborting.`);\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * Performs view initialization (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tinitializeAsync(fCallback)\n\t{\n\t\tif (this.pict.LogControlFlow)\n\t\t{\n\t\t\tthis.log.trace(`PICT-ControlFlow VIEW [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} initializeAsync:`);\n\t\t}\n\n\t\tif (!this.initializeTimestamp)\n\t\t{\n\t\t\tlet tmpAnticipate = this.pict.instantiateServiceProviderWithoutRegistration('Anticipate');\n\n\t\t\tif (this.pict.LogNoisiness > 0)\n\t\t\t{\n\t\t\t\tthis.log.info(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} beginning initialization...`);\n\t\t\t}\n\n\t\t\ttmpAnticipate.anticipate(this.onBeforeInitializeAsync.bind(this));\n\t\t\ttmpAnticipate.anticipate(this.onInitializeAsync.bind(this));\n\t\t\ttmpAnticipate.anticipate(this.onAfterInitializeAsync.bind(this));\n\n\t\t\ttmpAnticipate.wait(\n\t\t\t\t/** @param {Error} pError */\n\t\t\t\t(pError) =>\n\t\t\t\t{\n\t\t\t\t\tif (pError)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} initialization failed: ${pError.message || pError}`, { stack: pError.stack });\n\t\t\t\t\t}\n\t\t\t\t\tthis.initializeTimestamp = this.pict.log.getTimeStamp();\n\t\t\t\t\tif (this.pict.LogNoisiness > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.log.info(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} initialization complete.`);\n\t\t\t\t\t}\n\t\t\t\t\treturn fCallback();\n\t\t\t\t});\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.log.warn(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} async initialize called but initialization is already completed.  Aborting.`);\n\t\t\t// TODO: Should this be an error?\n\t\t\treturn fCallback();\n\t\t}\n\t}\n\n\tonAfterInitialize()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onAfterInitialize:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers after the view is initialized (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonAfterInitializeAsync(fCallback)\n\t{\n\t\tthis.onAfterInitialize();\n\t\treturn fCallback();\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*                            Code Section: Render                            */\n\t/* -------------------------------------------------------------------------- */\n\t/**\n\t * Lifecycle hook that triggers before the view is rendered.\n\t *\n\t * @param {Renderable} pRenderable - The renderable that will be rendered.\n\t * @param {string} pRenderDestinationAddress - The address where the renderable will be rendered.\n\t * @param {any} pRecord - The record (data) that will be used to render the renderable.\n\t */\n\tonBeforeRender(pRenderable, pRenderDestinationAddress, pRecord)\n\t{\n\t\t// Overload this to mess with stuff before the content gets generated from the template\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onBeforeRender:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers before the view is rendered (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonBeforeRenderAsync(fCallback)\n\t{\n\t\treturn fCallback();\n\t}\n\n\t/**\n\t * Builds the render options for a renderable.\n\t *\n\t * For DRY purposes on the three flavors of render.\n\t *\n\t * @param {string|ErrorCallback} [pRenderableHash] - The hash of the renderable to render.\n\t * @param {string|ErrorCallback} [pRenderDestinationAddress] - The address where the renderable will be rendered.\n\t * @param {string|object|ErrorCallback} [pTemplateRecordAddress] - The address of (or actual obejct) where the data for the template is stored.\n\t */\n\tbuildRenderOptions(pRenderableHash, pRenderDestinationAddress, pTemplateRecordAddress)\n\t{\n\t\tlet tmpRenderOptions = {Valid: true};\n\t\ttmpRenderOptions.RenderableHash = (typeof (pRenderableHash) === 'string') ? pRenderableHash :\n\t\t\t\t\t\t\t\t(typeof (this.options.DefaultRenderable) == 'string') ?\n\t\t\t\t\t\t\t\tthis.options.DefaultRenderable : false;\n\t\tif (!tmpRenderOptions.RenderableHash)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not find a suitable RenderableHash ${tmpRenderOptions.RenderableHash} (param ${pRenderableHash}because it is not a valid renderable.`);\n\t\t\ttmpRenderOptions.Valid = false;\n\t\t}\n\n\t\ttmpRenderOptions.Renderable = this.renderables[tmpRenderOptions.RenderableHash];\n\t\tif (!tmpRenderOptions.Renderable)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderOptions.RenderableHash} (param ${pRenderableHash}) because it does not exist.`);\n\t\t\ttmpRenderOptions.Valid = false;\n\t\t}\n\n\t\ttmpRenderOptions.DestinationAddress = (typeof (pRenderDestinationAddress) === 'string') ? pRenderDestinationAddress :\n\t\t\t(typeof (tmpRenderOptions.Renderable.ContentDestinationAddress) === 'string') ? tmpRenderOptions.Renderable.ContentDestinationAddress :\n\t\t\t\t(typeof (this.options.DefaultDestinationAddress) === 'string') ? this.options.DefaultDestinationAddress : false;\n\t\tif (!tmpRenderOptions.DestinationAddress)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderOptions.RenderableHash} (param ${pRenderableHash}) because it does not have a valid destination address (param ${pRenderDestinationAddress}).`);\n\t\t\ttmpRenderOptions.Valid = false;\n\t\t}\n\n\t\tif (typeof(pTemplateRecordAddress) === 'object')\n\t\t{\n\t\t\ttmpRenderOptions.RecordAddress = 'Passed in as object';\n\t\t\ttmpRenderOptions.Record = pTemplateRecordAddress;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttmpRenderOptions.RecordAddress = (typeof (pTemplateRecordAddress) === 'string') ? pTemplateRecordAddress :\n\t\t\t\t(typeof (tmpRenderOptions.Renderable.DefaultTemplateRecordAddress) === 'string') ? tmpRenderOptions.Renderable.DefaultTemplateRecordAddress :\n\t\t\t\t(typeof (this.options.DefaultTemplateRecordAddress) === 'string') ? this.options.DefaultTemplateRecordAddress : false;\n\t\t\ttmpRenderOptions.Record = (typeof (tmpRenderOptions.RecordAddress) === 'string') ? this.pict.DataProvider.getDataByAddress(tmpRenderOptions.RecordAddress) : undefined;\n\t\t}\n\n\t\treturn tmpRenderOptions;\n\t}\n\n\t/**\n\t * Assigns the content to the destination address.\n\t *\n\t * For DRY purposes on the three flavors of render.\n\t *\n\t * @param {Renderable} pRenderable - The renderable to render.\n\t * @param {string} pRenderDestinationAddress - The address where the renderable will be rendered.\n\t * @param {string} pContent - The content to render.\n\t * @returns {boolean} - Returns true if the content was assigned successfully.\n\t * @memberof PictView\n\t */\n\tassignRenderContent(pRenderable, pRenderDestinationAddress, pContent)\n\t{\n\t\treturn this.pict.ContentAssignment.projectContent(pRenderable.RenderMethod, pRenderDestinationAddress, pContent, pRenderable.TestAddress);\n\t}\n\n\t/**\n\t * Render a renderable from this view.\n\t *\n\t * @param {string} [pRenderable] - The hash of the renderable to render.\n\t * @param {string} [pRenderDestinationAddress] - The address where the renderable will be rendered.\n\t * @param {string|object} [pTemplateRecordAddress] - The address where the data for the template is stored.\n\t * @return {boolean}\n\t */\n\trender(pRenderable, pRenderDestinationAddress, pTemplateRecordAddress)\n\t{\n\t\tlet tmpRenderableHash = (typeof (pRenderable) === 'string') ? pRenderable :\n\t\t\t(typeof (this.options.DefaultRenderable) == 'string') ? this.options.DefaultRenderable : false;\n\t\tif (!tmpRenderableHash)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderable}) because it is not a valid renderable.`);\n\t\t\treturn false;\n\t\t}\n\n\t\tlet tmpRenderable;\n\t\tif (tmpRenderableHash == '__Virtual')\n\t\t{\n\t\t\ttmpRenderable = {\n\t\t\t\t\tRenderableHash: '__Virtual',\n\t\t\t\t\tTemplateHash: this.renderables[this.options.DefaultRenderable].TemplateHash,\n\t\t\t\t\tDestinationAddress: pRenderDestinationAddress,\n\t\t\t\t\tRenderMethod: 'virtual-assignment'\n\t\t\t\t};\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttmpRenderable = this.renderables[tmpRenderableHash];\n\t\t}\n\n\t\tif (!tmpRenderable)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderable}) because it does not exist.`);\n\t\t\treturn false;\n\t\t}\n\n\t\tlet tmpRenderDestinationAddress = (typeof (pRenderDestinationAddress) === 'string') ? pRenderDestinationAddress :\n\t\t\t(typeof (tmpRenderable.ContentDestinationAddress) === 'string') ? tmpRenderable.ContentDestinationAddress :\n\t\t\t\t(typeof (this.options.DefaultDestinationAddress) === 'string') ? this.options.DefaultDestinationAddress : false;\n\n\t\tif (!tmpRenderDestinationAddress)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderable}) because it does not have a valid destination address.`);\n\t\t\treturn false;\n\t\t}\n\n\t\tlet tmpRecordAddress;\n\t\tlet tmpRecord;\n\n\t\tif (typeof(pTemplateRecordAddress) === 'object')\n\t\t{\n\t\t\ttmpRecord = pTemplateRecordAddress;\n\t\t\ttmpRecordAddress = 'Passed in as object';\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttmpRecordAddress = (typeof (pTemplateRecordAddress) === 'string') ? pTemplateRecordAddress :\n\t\t\t\t(typeof (tmpRenderable.DefaultTemplateRecordAddress) === 'string') ? tmpRenderable.DefaultTemplateRecordAddress :\n\t\t\t\t\t(typeof (this.options.DefaultTemplateRecordAddress) === 'string') ? this.options.DefaultTemplateRecordAddress : false;\n\n\t\t\ttmpRecord = (typeof (tmpRecordAddress) === 'string') ? this.pict.DataProvider.getDataByAddress(tmpRecordAddress) : undefined;\n\t\t}\n\n\t\t// Execute the developer-overridable pre-render behavior\n\t\tthis.onBeforeRender(tmpRenderable, tmpRenderDestinationAddress, tmpRecord);\n\n\t\tif (this.pict.LogControlFlow)\n\t\t{\n\t\t\tthis.log.trace(`PICT-ControlFlow VIEW [${this.UUID}]::[${this.Hash}] Renderable[${tmpRenderableHash}] Destination[${tmpRenderDestinationAddress}] TemplateRecordAddress[${tmpRecordAddress}] render:`);\n\t\t}\n\t\tif (this.pict.LogNoisiness > 0)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} Beginning Render of Renderable[${tmpRenderableHash}] to Destination [${tmpRenderDestinationAddress}]...`);\n\t\t}\n\t\t// Generate the content output from the template and data\n\t\tlet tmpContent = this.pict.parseTemplateByHash(tmpRenderable.TemplateHash, tmpRecord, null, [this]);\n\n\t\tif (this.pict.LogNoisiness > 0)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} Assigning Renderable[${tmpRenderableHash}] content length ${tmpContent.length} to Destination [${tmpRenderDestinationAddress}] using render method [${tmpRenderable.RenderMethod}].`);\n\t\t}\n\n\t\t// Assign the content to the destination address\n\t\tthis.pict.ContentAssignment.projectContent(tmpRenderable.RenderMethod, tmpRenderDestinationAddress, tmpContent, tmpRenderable.TestAddress);\n\n\t\t// Execute the developer-overridable post-render behavior\n\t\tthis.onAfterRender(tmpRenderable, tmpRenderDestinationAddress, tmpRecord, tmpContent);\n\n\t\tthis.lastRenderedTimestamp = this.pict.log.getTimeStamp();\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Render a renderable from this view.\n\t *\n\t * @param {string|ErrorCallback} [pRenderableHash] - The hash of the renderable to render.\n\t * @param {string|ErrorCallback} [pRenderDestinationAddress] - The address where the renderable will be rendered.\n\t * @param {string|object|ErrorCallback} [pTemplateRecordAddress] - The address where the data for the template is stored.\n\t * @param {ErrorCallback} [fCallback] - The callback to call when the async operation is complete.\n\t *\n\t * @return {void}\n\t */\n\trenderAsync(pRenderableHash, pRenderDestinationAddress, pTemplateRecordAddress, fCallback)\n\t{\n\t\tlet tmpRenderableHash = (typeof (pRenderableHash) === 'string') ? pRenderableHash :\n\t\t\t(typeof (this.options.DefaultRenderable) == 'string') ? this.options.DefaultRenderable : false;\n\n\t\t// Allow the callback to be passed in as the last parameter no matter what\n\t\t/** @type {ErrorCallback} */\n\t\tlet tmpCallback = (typeof(fCallback) === 'function') ? fCallback :\n\t\t\t\t\t\t\t(typeof(pTemplateRecordAddress) === 'function') ? pTemplateRecordAddress :\n\t\t\t\t\t\t\t(typeof(pRenderDestinationAddress) === 'function') ? pRenderDestinationAddress :\n\t\t\t\t\t\t\t(typeof(pRenderableHash) === 'function') ? pRenderableHash :\n\t\t\t\t\t\t\tnull;\n\n\t\tif (!tmpCallback)\n\t\t{\n\t\t\tthis.log.warn(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.Name} renderAsync was called without a valid callback.  A callback will be generated but this could lead to race conditions.`);\n\t\t\ttmpCallback = (pError) =>\n\t\t\t\t{\n\t\t\t\t\tif (pError)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.Name} renderAsync Auto Callback Error: ${pError}`, pError);\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t}\n\n\t\tif (!tmpRenderableHash)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not asynchronously render ${tmpRenderableHash} (param ${pRenderableHash}because it is not a valid renderable.`);\n\t\t\treturn tmpCallback(new Error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not asynchronously render ${tmpRenderableHash} (param ${pRenderableHash}because it is not a valid renderable.`));\n\t\t}\n\n\t\tlet tmpRenderable;\n\t\tif (tmpRenderableHash == '__Virtual')\n\t\t{\n\t\t\ttmpRenderable = {\n\t\t\t\t\tRenderableHash: '__Virtual',\n\t\t\t\t\tTemplateHash: this.renderables[this.options.DefaultRenderable].TemplateHash,\n\t\t\t\t\tDestinationAddress: pRenderDestinationAddress,\n\t\t\t\t\tRenderMethod: 'virtual-assignment'\n\t\t\t\t};\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttmpRenderable = this.renderables[tmpRenderableHash];\n\t\t}\n\n\t\tif (!tmpRenderable)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderableHash}) because it does not exist.`);\n\t\t\treturn tmpCallback(new Error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderableHash}) because it does not exist.`));\n\t\t}\n\n\t\tlet tmpRenderDestinationAddress = (typeof (pRenderDestinationAddress) === 'string') ? pRenderDestinationAddress :\n\t\t\t(typeof (tmpRenderable.ContentDestinationAddress) === 'string') ? tmpRenderable.ContentDestinationAddress :\n\t\t\t\t(typeof (this.options.DefaultDestinationAddress) === 'string') ? this.options.DefaultDestinationAddress : false;\n\n\t\tif (!tmpRenderDestinationAddress)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderableHash}) because it does not have a valid destination address.`);\n\t\t\treturn tmpCallback(new Error(`Could not render ${tmpRenderableHash}`));\n\t\t}\n\n\t\tlet tmpRecordAddress;\n\t\tlet tmpRecord;\n\n\t\tif (typeof(pTemplateRecordAddress) === 'object')\n\t\t{\n\t\t\ttmpRecord = pTemplateRecordAddress;\n\t\t\ttmpRecordAddress = 'Passed in as object';\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttmpRecordAddress = (typeof (pTemplateRecordAddress) === 'string') ? pTemplateRecordAddress :\n\t\t\t\t(typeof (tmpRenderable.DefaultTemplateRecordAddress) === 'string') ? tmpRenderable.DefaultTemplateRecordAddress :\n\t\t\t\t\t(typeof (this.options.DefaultTemplateRecordAddress) === 'string') ? this.options.DefaultTemplateRecordAddress : false;\n\n\t\t\ttmpRecord = (typeof (tmpRecordAddress) === 'string') ? this.pict.DataProvider.getDataByAddress(tmpRecordAddress) : undefined;\n\t\t}\n\n\t\tif (this.pict.LogControlFlow)\n\t\t{\n\t\t\tthis.log.trace(`PICT-ControlFlow VIEW [${this.UUID}]::[${this.Hash}] Renderable[${tmpRenderableHash}] Destination[${tmpRenderDestinationAddress}] TemplateRecordAddress[${tmpRecordAddress}] renderAsync:`);\n\t\t}\n\t\tif (this.pict.LogNoisiness > 2)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} Beginning Asynchronous Render (callback-style)...`);\n\t\t}\n\n\t\tlet tmpAnticipate = this.fable.newAnticipate();\n\n\t\ttmpAnticipate.anticipate(\n\t\t\t(fOnBeforeRenderCallback) =>\n\t\t\t{\n\t\t\t\tthis.onBeforeRender(tmpRenderable, tmpRenderDestinationAddress, tmpRecord);\n\t\t\t\tthis.onBeforeRenderAsync(fOnBeforeRenderCallback);\n\t\t\t});\n\n\t\tlet tmpContent;\n\t\ttmpAnticipate.anticipate(\n\t\t\t(fAsyncTemplateCallback) =>\n\t\t\t{\n\t\t\t\t// Render the template (asynchronously)\n\t\t\t\tthis.pict.parseTemplateByHash(tmpRenderable.TemplateHash, tmpRecord,\n\t\t\t\t\t(pError, pContent) =>\n\t\t\t\t\t{\n\t\t\t\t\t\tif (pError)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render (asynchronously) ${tmpRenderableHash} (param ${pRenderableHash}) because it did not parse the template.`, pError);\n\t\t\t\t\t\t\treturn fAsyncTemplateCallback(pError);\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttmpContent = pContent;\n\n\t\t\t\t\t\tif (this.pict.LogNoisiness > 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} Assigning Renderable[${tmpRenderableHash}] content length ${pContent.length} to Destination [${tmpRenderDestinationAddress}] using Async render method ${tmpRenderable.RenderMethod}.`);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthis.pict.ContentAssignment.projectContent(tmpRenderable.RenderMethod, tmpRenderDestinationAddress, pContent, tmpRenderable.TestAddress);\n\n\t\t\t\t\t\t// Execute the developer-overridable asynchronous post-render behavior\n\t\t\t\t\t\tthis.lastRenderedTimestamp = this.pict.log.getTimeStamp();\n\t\t\t\t\t\treturn fAsyncTemplateCallback();\n\t\t\t\t\t}, [this]);\n\t\t\t});\n\n\t\ttmpAnticipate.anticipate(\n\t\t\t(fOnAfterRenderCallback) =>\n\t\t\t{\n\t\t\t\tthis.onAfterRender(tmpRenderable, tmpRenderDestinationAddress, tmpRecord, tmpContent);\n\t\t\t\tthis.onAfterRenderAsync(fOnAfterRenderCallback);\n\t\t\t});\n\n\t\ttmpAnticipate.wait(tmpCallback);\n\t}\n\n\t/**\n\t * Renders the default renderable.\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\trenderDefaultAsync(fCallback)\n\t{\n\t\t// Render the default renderable\n\t\tthis.renderAsync(fCallback);\n\t}\n\n\t/**\n\t * @param {string} [pRenderableHash] - The hash of the renderable to render.\n\t * @param {string} [pRenderDestinationAddress] - The address where the renderable will be rendered.\n\t * @param {string|object} [pTemplateRecordAddress] - The address of (or actual obejct) where the data for the template is stored.\n\t */\n\tbasicRender(pRenderableHash, pRenderDestinationAddress, pTemplateRecordAddress)\n\t{\n\t\tlet tmpRenderOptions = this.buildRenderOptions(pRenderableHash, pRenderDestinationAddress, pTemplateRecordAddress);\n\t\tif (tmpRenderOptions.Valid)\n\t\t{\n\t\t\tthis.assignRenderContent(tmpRenderOptions.Renderable, tmpRenderOptions.DestinationAddress, this.pict.parseTemplateByHash(tmpRenderOptions.Renderable.TemplateHash, tmpRenderOptions.Record, null, [this]));\n\t\t\treturn true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not perform a basic render of ${tmpRenderOptions.RenderableHash} because it is not valid.`);\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * @param {string|ErrorCallback} [pRenderableHash] - The hash of the renderable to render.\n\t * @param {string|ErrorCallback} [pRenderDestinationAddress] - The address where the renderable will be rendered.\n\t * @param {string|Object|ErrorCallback} [pTemplateRecordAddress] - The address of (or actual obejct) where the data for the template is stored.\n\t * @param {ErrorCallback} [fCallback] - The callback to call when the async operation is complete.\n\t */\n\tbasicRenderAsync(pRenderableHash, pRenderDestinationAddress, pTemplateRecordAddress, fCallback)\n\t{\n\t\t// Allow the callback to be passed in as the last parameter no matter what\n\t\t/** @type {ErrorCallback} */\n\t\tlet tmpCallback = (typeof(fCallback) === 'function') ? fCallback :\n\t\t\t\t\t\t\t(typeof(pTemplateRecordAddress) === 'function') ? pTemplateRecordAddress :\n\t\t\t\t\t\t\t(typeof(pRenderDestinationAddress) === 'function') ? pRenderDestinationAddress :\n\t\t\t\t\t\t\t(typeof(pRenderableHash) === 'function') ? pRenderableHash :\n\t\t\t\t\t\t\tnull;\n\t\tif (!tmpCallback)\n\t\t{\n\t\t\tthis.log.warn(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.Name} basicRenderAsync was called without a valid callback.  A callback will be generated but this could lead to race conditions.`);\n\t\t\ttmpCallback = (pError) =>\n\t\t\t\t{\n\t\t\t\t\tif (pError)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.Name} basicRenderAsync Auto Callback Error: ${pError}`, pError);\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t}\n\n\t\tconst tmpRenderOptions = this.buildRenderOptions(pRenderableHash, pRenderDestinationAddress, pTemplateRecordAddress);\n\t\tif (tmpRenderOptions.Valid)\n\t\t{\n\t\t\tthis.pict.parseTemplateByHash(tmpRenderOptions.Renderable.TemplateHash, tmpRenderOptions.Record,\n\t\t\t\t/**\n\t\t\t\t * @param {Error} [pError] - The error that occurred during template parsing.\n\t\t\t\t * @param {string} [pContent] - The content that was rendered from the template.\n\t\t\t\t */\n\t\t\t\t(pError, pContent) =>\n\t\t\t\t{\n\t\t\t\t\tif (pError)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render (asynchronously) ${tmpRenderOptions.RenderableHash} because it did not parse the template.`, pError);\n\t\t\t\t\t\treturn tmpCallback(pError);\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.assignRenderContent(tmpRenderOptions.Renderable, tmpRenderOptions.DestinationAddress, pContent);\n\t\t\t\t\treturn tmpCallback();\n\t\t\t\t}, [this]);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlet tmpErrorMessage = `PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not perform a basic render of ${tmpRenderOptions.RenderableHash} because it is not valid.`;\n\t\t\tthis.log.error(tmpErrorMessage);\n\t\t\treturn tmpCallback(new Error(tmpErrorMessage));\n\t\t}\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers after the view is rendered.\n\t *\n\t * @param {Renderable} pRenderable - The renderable that was rendered.\n\t * @param {string} pRenderDestinationAddress - The address where the renderable was rendered.\n\t * @param {any} pRecord - The record (data) that was used by the renderable.\n\t * @param {string} pContent - The content that was rendered.\n\t */\n\tonAfterRender(pRenderable, pRenderDestinationAddress, pRecord, pContent)\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onAfterRender:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers after the view is rendered (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonAfterRenderAsync(fCallback)\n\t{\n\t\treturn fCallback();\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*                            Code Section: Solver                            */\n\t/* -------------------------------------------------------------------------- */\n\t/**\n\t * Lifecycle hook that triggers before the view is solved.\n\t */\n\tonBeforeSolve()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onBeforeSolve:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers before the view is solved (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonBeforeSolveAsync(fCallback)\n\t{\n\t\tthis.onBeforeSolve();\n\t\treturn fCallback();\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers when the view is solved.\n\t */\n\tonSolve()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onSolve:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers when the view is solved (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonSolveAsync(fCallback)\n\t{\n\t\tthis.onSolve();\n\t\treturn fCallback();\n\t}\n\n\t/**\n\t * Performs view solving and triggers lifecycle hooks.\n\t *\n\t * @return {boolean} - True if the view was solved successfully, false otherwise.\n\t */\n\tsolve()\n\t{\n\t\tif (this.pict.LogNoisiness > 2)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} executing solve() function...`);\n\t\t}\n\t\tthis.onBeforeSolve();\n\t\tthis.onSolve();\n\t\tthis.onAfterSolve();\n\t\tthis.lastSolvedTimestamp = this.pict.log.getTimeStamp();\n\t\treturn true;\n\t}\n\n\t/**\n\t * Performs view solving and triggers lifecycle hooks (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tsolveAsync(fCallback)\n\t{\n\t\tlet tmpAnticipate = this.pict.instantiateServiceProviderWithoutRegistration('Anticipate');\n\n\t\t/** @type {ErrorCallback} */\n\t\tlet tmpCallback = (typeof(fCallback) === 'function') ? fCallback : null;\n\t\tif (!tmpCallback)\n\t\t{\n\t\t\tthis.log.warn(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.Name} solveAsync was called without a valid callback.  A callback will be generated but this could lead to race conditions.`);\n\t\t\ttmpCallback = (pError) =>\n\t\t\t\t{\n\t\t\t\t\tif (pError)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.Name} solveAsync Auto Callback Error: ${pError}`, pError);\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t}\n\n\t\ttmpAnticipate.anticipate(this.onBeforeSolveAsync.bind(this));\n\t\ttmpAnticipate.anticipate(this.onSolveAsync.bind(this));\n\t\ttmpAnticipate.anticipate(this.onAfterSolveAsync.bind(this));\n\n\t\ttmpAnticipate.wait(\n\t\t\t(pError) =>\n\t\t\t{\n\t\t\t\tif (this.pict.LogNoisiness > 2)\n\t\t\t\t{\n\t\t\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} solveAsync() complete.`);\n\t\t\t\t}\n\t\t\t\tthis.lastSolvedTimestamp = this.pict.log.getTimeStamp();\n\t\t\t\treturn tmpCallback(pError);\n\t\t\t});\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers after the view is solved.\n\t */\n\tonAfterSolve()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onAfterSolve:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers after the view is solved (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonAfterSolveAsync(fCallback)\n\t{\n\t\tthis.onAfterSolve();\n\t\treturn fCallback();\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*                     Code Section: Marshal From View                        */\n\t/* -------------------------------------------------------------------------- */\n\t/**\n\t * Lifecycle hook that triggers before data is marshaled from the view.\n\t *\n\t * @return {boolean} - True if the operation was successful, false otherwise.\n\t */\n\tonBeforeMarshalFromView()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onBeforeMarshalFromView:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers before data is marshaled from the view (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonBeforeMarshalFromViewAsync(fCallback)\n\t{\n\t\tthis.onBeforeMarshalFromView();\n\t\treturn fCallback();\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers when data is marshaled from the view.\n\t */\n\tonMarshalFromView()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onMarshalFromView:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers when data is marshaled from the view (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonMarshalFromViewAsync(fCallback)\n\t{\n\n\t\tthis.onMarshalFromView();\n\t\treturn fCallback();\n\t}\n\n\t/**\n\t * Marshals data from the view.\n\t *\n\t * @return {boolean} - True if the operation was successful, false otherwise.\n\t */\n\tmarshalFromView()\n\t{\n\t\tif (this.pict.LogNoisiness > 2)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} executing solve() function...`);\n\t\t}\n\t\tthis.onBeforeMarshalFromView();\n\t\tthis.onMarshalFromView();\n\t\tthis.onAfterMarshalFromView();\n\t\tthis.lastMarshalFromViewTimestamp = this.pict.log.getTimeStamp();\n\t\treturn true;\n\t}\n\n\t/**\n\t * Marshals data from the view (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tmarshalFromViewAsync(fCallback)\n\t{\n\t\tlet tmpAnticipate = this.pict.instantiateServiceProviderWithoutRegistration('Anticipate');\n\n\t\t/** @type {ErrorCallback} */\n\t\tlet tmpCallback = (typeof(fCallback) === 'function') ? fCallback : null;\n\t\tif (!tmpCallback)\n\t\t{\n\t\t\tthis.log.warn(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.Name} marshalFromViewAsync was called without a valid callback.  A callback will be generated but this could lead to race conditions.`);\n\t\t\ttmpCallback = (pError) =>\n\t\t\t\t{\n\t\t\t\t\tif (pError)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.Name} marshalFromViewAsync Auto Callback Error: ${pError}`, pError);\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t}\n\n\t\ttmpAnticipate.anticipate(this.onBeforeMarshalFromViewAsync.bind(this));\n\t\ttmpAnticipate.anticipate(this.onMarshalFromViewAsync.bind(this));\n\t\ttmpAnticipate.anticipate(this.onAfterMarshalFromViewAsync.bind(this));\n\n\t\ttmpAnticipate.wait(\n\t\t\t(pError) =>\n\t\t\t{\n\t\t\t\tif (this.pict.LogNoisiness > 2)\n\t\t\t\t{\n\t\t\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} marshalFromViewAsync() complete.`);\n\t\t\t\t}\n\t\t\t\tthis.lastMarshalFromViewTimestamp = this.pict.log.getTimeStamp();\n\t\t\t\treturn tmpCallback(pError);\n\t\t\t});\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers after data is marshaled from the view.\n\t */\n\tonAfterMarshalFromView()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onAfterMarshalFromView:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers after data is marshaled from the view (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonAfterMarshalFromViewAsync(fCallback)\n\t{\n\t\tthis.onAfterMarshalFromView();\n\t\treturn fCallback();\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*                     Code Section: Marshal To View                          */\n\t/* -------------------------------------------------------------------------- */\n\t/**\n\t * Lifecycle hook that triggers before data is marshaled into the view.\n\t */\n\tonBeforeMarshalToView()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onBeforeMarshalToView:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers before data is marshaled into the view (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonBeforeMarshalToViewAsync(fCallback)\n\t{\n\t\tthis.onBeforeMarshalToView();\n\t\treturn fCallback();\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers when data is marshaled into the view.\n\t */\n\tonMarshalToView()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onMarshalToView:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers when data is marshaled into the view (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonMarshalToViewAsync(fCallback)\n\t{\n\t\tthis.onMarshalToView();\n\t\treturn fCallback();\n\t}\n\n\t/**\n\t * Marshals data into the view.\n\t *\n\t * @return {boolean} - True if the operation was successful, false otherwise.\n\t */\n\tmarshalToView()\n\t{\n\t\tif (this.pict.LogNoisiness > 2)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} executing solve() function...`);\n\t\t}\n\t\tthis.onBeforeMarshalToView();\n\t\tthis.onMarshalToView();\n\t\tthis.onAfterMarshalToView();\n\t\tthis.lastMarshalToViewTimestamp = this.pict.log.getTimeStamp();\n\t\treturn true;\n\t}\n\n\t/**\n\t * Marshals data into the view (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tmarshalToViewAsync(fCallback)\n\t{\n\t\tlet tmpAnticipate = this.pict.instantiateServiceProviderWithoutRegistration('Anticipate');\n\n\n\t\t/** @type {ErrorCallback} */\n\t\tlet tmpCallback = (typeof(fCallback) === 'function') ? fCallback : null;\n\t\tif (!tmpCallback)\n\t\t{\n\t\t\tthis.log.warn(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.Name} marshalToViewAsync was called without a valid callback.  A callback will be generated but this could lead to race conditions.`);\n\t\t\ttmpCallback = (pError) =>\n\t\t\t\t{\n\t\t\t\t\tif (pError)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.Name} marshalToViewAsync Auto Callback Error: ${pError}`, pError);\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t}\n\t\ttmpAnticipate.anticipate(this.onBeforeMarshalToViewAsync.bind(this));\n\t\ttmpAnticipate.anticipate(this.onMarshalToViewAsync.bind(this));\n\t\ttmpAnticipate.anticipate(this.onAfterMarshalToViewAsync.bind(this));\n\n\t\ttmpAnticipate.wait(\n\t\t\t(pError) =>\n\t\t\t{\n\t\t\t\tif (this.pict.LogNoisiness > 2)\n\t\t\t\t{\n\t\t\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} marshalToViewAsync() complete.`);\n\t\t\t\t}\n\t\t\t\tthis.lastMarshalToViewTimestamp = this.pict.log.getTimeStamp();\n\t\t\t\treturn tmpCallback(pError);\n\t\t\t});\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers after data is marshaled into the view.\n\t */\n\tonAfterMarshalToView()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onAfterMarshalToView:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers after data is marshaled into the view (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonAfterMarshalToViewAsync(fCallback)\n\t{\n\t\tthis.onAfterMarshalToView();\n\t\treturn fCallback();\n\t}\n\n\t/** @return {boolean} - True if the object is a PictView. */\n\tget isPictView()\n\t{\n\t\treturn true;\n\t}\n}\n\nmodule.exports = PictView;\n\n},{\"../package.json\":3,\"fable-serviceproviderbase\":2}],5:[function(require,module,exports){\nmodule.exports={\n\t\"RenderOnLoad\": true,\n\n\t\"GridWidth\": \"auto\",\n\t\"GridRowHeight\": 40,\n\n\t\"GridBodyHeight\": \"auto\",\n\t\"GridBodyMinHeight\": 130,\n\n\t\"GridColumnMinWidth\": 50,\n\t\"GridColumnWidthResizable\": true,\n\t\"GridColumnHeightResizable\": false,\n\n\t\"GridColumnFrozenCount\": 0,\n\t\"GridColumnFrozenBorderWidth\": 3,\n\n\t\"GridScrollX\": true,\n\t\"GridScrollY\": true,\n\n\t\"GridShowDummyRows\": false,\n\t\"GridDraggableRows\": false,\n\n\t\"GridSelectionUnit\": \"cell\",\n\n\t\"DefaultRenderable\": \"TuiGrid-Wrap\",\n\t\"DefaultDestinationAddress\": \"#TuiGrid-Container-Div\",\n\n\t\"Templates\": [\n\t\t{\n\t\t\t\"Hash\": \"TuiGrid-Container\",\n\t\t\t\"Template\": \"<!-- TuiGrid-Container Rendering Soon -->\"\n\t\t}\n\t],\n\n\t\"Renderables\": [\n\t\t{\n\t\t\t\"RenderableHash\": \"TuiGrid-Wrap\",\n\t\t\t\"TemplateHash\": \"TuiGrid-Container\",\n\t\t\t\"DestinationAddress\": \"#TuiGrid-Container-Div\"\n\t\t}\n\t],\n\n\t\"TargetElementAddress\": \"#TuiGrid-Container-Div\",\n\n\t\"GridDataAddress\": false,\n\n\t\"GridData\": [\n\t\t{\n\t\t\t\"idrecord\": 1,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 1\",\n\t\t\t\"description\": \"description 1\"\n\t\t},\n\t\t{\n\t\t\t\"idrecord\": 2,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 2\",\n\t\t\t\"description\": \"description 2\"\n\t\t},\n\t\t{\n\t\t\t\"idrecord\": 3,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 3\",\n\t\t\t\"description\": \"description 3\"\n\t\t},\n\t\t{\n\t\t\t\"idrecord\": 4,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 4\",\n\t\t\t\"description\": \"description 4\"\n\t\t},\n\t\t{\n\t\t\t\"idrecord\": 5,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 5\",\n\t\t\t\"description\": \"description 5\"\n\t\t},\n\t\t{\n\t\t\t\"idrecord\": 6,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 6\",\n\t\t\t\"description\": \"description 6\"\n\t\t},\n\t\t{\n\t\t\t\"idrecord\": 7,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 7\",\n\t\t\t\"description\": \"description 7\"\n\t\t},\n\t\t{\n\t\t\t\"idrecord\": 8,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 8\",\n\t\t\t\"description\": \"description 8\"\n\t\t},\n\t\t{\n\t\t\t\"idrecord\": 9,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 9\",\n\t\t\t\"description\": \"description 9\"\n\t\t}\n\t],\n\t\"ColumnsToSolveOnChange\": {},\n\t\"TuiColumnSchema\": [\n\t\t{\n\t\t\t\"header\": \"IDRecord\",\n\t\t\t\"name\": \"idrecord\",\n\t\t\t\"PictTriggerSolveOnChange\": true\n\t\t},\n\t\t{\n\t\t\t\"header\": \"Entity\",\n\t\t\t\"name\": \"entity\",\n\t\t\t\"PictTriggerSolveOnChange\": true\n\t\t},\n\t\t{\n\t\t\t\"header\": \"Name\",\n\t\t\t\"name\": \"name\",\n\t\t\t\"editor\": \"text\"\n\t\t},\n\t\t{\n\t\t\t\"header\": \"Description\",\n\t\t\t\"name\": \"description\",\n\t\t\t\"editor\": \"text\"\n\t\t}\n\t]\n}\n\n},{}],6:[function(require,module,exports){\nconst libPictViewClass = require('pict-view');\n\n/**\n * @typedef {typeof import('tui-grid').default} TuiGridClass\n * @typedef {import('tui-grid').default} TuiGrid\n */\n\nclass PictSectionTuiGrid extends libPictViewClass\n{\n\tconstructor(pFable, pOptions, pServiceHash)\n\t{\n\t\tlet tmpOptions = Object.assign({}, require('./Pict-Section-TuiGrid-DefaultConfiguration.json'), pOptions);\n\n\t\tsuper(pFable, tmpOptions, pServiceHash);\n\n\t\t/** @type {{ [key: string]: any }} */\n\t\tthis.services;\n\t\tthis.dateFormatter = this.fable.instantiateServiceProviderWithoutRegistration('Dates');\n\n\t\tthis.initialRenderComplete = false;\n\n\t\tthis.customFormatters = {};\n\t}\n\n\tonBeforeInitialize()\n\t{\n\t\tsuper.onBeforeInitialize();\n\n\t\t/** @type {TuiGridClass} */\n\t\tthis._tuiGridPrototype = null;\n\n\t\t/** @type {TuiGrid} */\n\t\tthis.tuiGrid = null;\n\n\t\tthis.customHeaders = require('./Pict-TuiGrid-Headers.js');\n\t\tthis.customEditors = require('./Pict-TuiGrid-Editors.js');\n\t\tthis.initializeCustomFormatters();\n\n\t\tthis.columnSchema = false;\n\t\tthis.targetElementAddress = false;\n\t\t/** @type {Array<any>} */\n\t\tthis.gridData = null;\n\n\t\treturn super.onBeforeInitialize();\n\t}\n\n\tinitializeCustomFormatters()\n\t{\n\t\tthis.customFormatters.FormatterTwoDigitNumber = (pCell) =>\n\t\t\t{\n\t\t\t\tlet tmpCellValue = Number.parseFloat(pCell.value);\n\t\t\t\tlet tmpPrecision = pCell?.decimalPrecision ?? 2;\n\t\t\t\tif (isNaN(tmpCellValue))\n\t\t\t\t{\n\t\t\t\t\treturn '';\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\treturn this.fable.Math.roundPrecise(pCell.value, tmpPrecision);\n\t\t\t\t}\n\t\t\t};\n\t\tthis.customFormatters.FormatterCurrencyNumber = (pCell) =>\n\t\t\t{\n\t\t\t\tlet tmpPrecision = pCell?.decimalPrecision ?? 2;\n\t\t\t\tlet tmpCellValue = this.fable.DataFormat.formatterDollars(pCell.value, tmpPrecision);\n\t\t\t\treturn tmpCellValue;\n\t\t\t};\n\n\t\tthis.customFormatters.FormatterRoundedNumber = (pCell) =>\n\t\t\t{\n\t\t\t\tlet tmpCellValue = Number.parseFloat(pCell.value);\n\t\t\t\tlet tmpPrecision = pCell?.decimalPrecision ?? 2;\n\t\t\t\tif (isNaN(tmpCellValue))\n\t\t\t\t{\n\t\t\t\t\treturn '';\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\treturn this.fable.Math.roundPrecise(pCell.value, tmpPrecision);\n\t\t\t\t}\n\t\t\t};\n\n\t\tthis.customFormatters.FormatterDate = (pCell) =>\n\t\t\t{\n\t\t\t\tlet tmpDate = this.fable.Dates.dayJS.utc(pCell.value);\n\t\t\t\tif (pCell.dateformat)\n\t\t\t\t{\n\t\t\t\t\treturn tmpDate.format(pCell.dateformat);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\treturn tmpDate.format();\n\t\t\t\t}\n\t\t\t};\n\t}\n\n\t/**\n\t * Construct a tuiGrid instance and connect it to the browser's dom object for the grid.  If the\n\t * prototype is not passed in, try to find a window.tui (where the library puts itself) in the window\n\t * object.\n\t *\n\t * @param {TuiGridClass} [pTuiGridPrototype] - The TuiGrid prototype class expected to be loaded in the browser\n\t * @returns\n\t */\n\tconnectTuiGridPrototype(pTuiGridPrototype)\n\t{\n\t\tif (typeof (pTuiGridPrototype) != 'undefined')\n\t\t{\n\t\t\tthis._tuiGridPrototype = pTuiGridPrototype;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.log.trace(`PICT-TuiGrid No TuiGrid Prototype defined or explicitly set; looking for it in the window object.`);\n\t\t\tif (typeof (window) != 'undefined')\n\t\t\t{\n\t\t\t\tif ((typeof (window.tui) != 'undefined') && (typeof (window.tui.Grid) != 'undefined'))\n\t\t\t\t{\n\t\t\t\t\tthis.log.trace(`PICT-TuiGrid Found TuiGrid Prototype in window.tuiGrid.`);\n\t\t\t\t\tthis.connectTuiGridPrototype(window.tui.Grid);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.log.error(`PICT-TuiGrid No TuiGrid Prototype found in window.tuiGrid.`);\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.log.error(`PICT-TuiGrid No TuiGrid Prototype found in window.tuiGrid -- window object unavailable.`);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @typedef {Object} TUIGridCellChange\n\t * @property {any} rowKey - The key of the row that changed.\n\t * @property {string} columnName - The name of the column that changed.\n\t * @property {any} value - The \"current\" value of the cell. Slightly different meaning in preChangeHandler vs changeHandler (before / after the change is applied).\n\t * @property {any} [nextValue] - The value that the cell will have after the change. Only populated in preChangeHandler (not changeHandler).\n\t * @property {any} [prevValue] - The value that the cell had before the change. Only populated in changeHandler (not preChangeHandler).\n\t */\n\n\t/**\n\t * @typedef {Object} TUIGridChangeEvent\n\t * @property {TuiGrid} instance - The TuiGrid instance that fired the event.\n\t * @property {TUIGridCellChange[]} changes - An array of objects representing the changes to grid cell values.\n\t */\n\n\t/**\n\t * Interface method for handling changesets from the TuiGrid control. Invoked before the change has been applied to the affected cells.\n\t *\n\t * * The pre-change cell value is stored in value while the new cell value is stored in nextValue.\n\t * * Any changes made to nextValue in this method will be reflected in the grid for that cell.\n\t *\n\t * @param {TUIGridChangeEvent} pChangeData - An event containing an array of objects representing the changes to grid cell values.\n\t */\n\tpreChangeHandler(pChangeData)\n\t{\n\t}\n\n\t/**\n\t * Interface method for handling changesets from the TuiGrid control. Invoked after the change has been applied to the affected cells.\n\t *\n\t * * Performs solver trigger for changes to any columns configured in \"ColumnsToSolveOnChange\" or with \"PictTriggerSolveOnChange\": true on a specific row.\n\t * * The previous cell value is stored in prevValue while the next cell value is stored in value.\n\t *\n\t * @param {TUIGridChangeEvent} pChangeData - An event object containing an array of objects representing the changes to grid cell values.\n\t */\n\tchangeHandler(pChangeData)\n\t{\n\t\tlet tmpSolverNecessary = false;\n\n\t\tfor (let i = 0; i < pChangeData.changes.length; i++)\n\t\t{\n\t\t\tlet tmpEntity = pChangeData.instance.getValue(pChangeData.changes[i].rowKey, 'entity');\n\t\t\tlet tmpIDRecord = pChangeData.instance.getValue(pChangeData.changes[i].rowKey, 'idrecord');\n\n\t\t\tthis.log.trace(`Generic Change Handler for TuiGrid Fired, Entity ${tmpEntity} IDRecord ${tmpIDRecord} setting Column [${pChangeData.changes[i].value}] to new Value [${pChangeData.changes[i].value}]`);\n\n\t\t\tif (this.options.ColumnsToSolveOnChange.hasOwnProperty(pChangeData.changes[i].columnName))\n\t\t\t{\n\t\t\t\ttmpSolverNecessary = true;\n\t\t\t}\n\t\t}\n\n\t\tif (tmpSolverNecessary)\n\t\t{\n\t\t\tthis.services.PictApplication.solve();\n\t\t}\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers after the view is rendered.\n\t *\n\t * @param {import('pict-view').Renderable} pRenderable - The renderable that was rendered.\n\t * @param {string} pRenderDestinationAddress - The address where the renderable was rendered.\n\t * @param {any} pRecord - The record (data) that was used by the renderable.\n\t * @param {string} pContent - The content that was rendered.\n\t */\n\tonAfterRender(pRenderable, pRenderDestinationAddress, pRecord, pContent)\n\t{\n\t\tif (!this.initialRenderComplete)\n\t\t{\n\t\t\tthis.onAfterInitialRender();\n\t\t\tthis.initialRenderComplete = true;\n\t\t}\n\t\treturn super.onAfterRender(pRenderable, pRenderDestinationAddress, pRecord, pContent);\n\t}\n\n\tonAfterInitialRender()\n\t{\n\t\t// This is where we wire up and initialize the tuigrid control -- the initial render has put the placeholder content in place.\n\t\t// Check for a tuigrid prototype, and find it in the window object it if it doesn't exist\n\t\tif (!this._tuiGridPrototype)\n\t\t{\n\t\t\tthis.connectTuiGridPrototype();\n\t\t}\n\t\t// This is where we wire up and initialize the tuigrid control\n\t\tif (this.tuiGrid)\n\t\t{\n\t\t\t// The grid is already initialized.\n\t\t\tthis.log.error(`TuiGrid going to ${this.options.TargetElementAddress} is already initialized!`);\n\t\t\treturn false;\n\t\t}\n\n\t\tif (this.options.GridDataAddress)\n\t\t{\n\t\t\tlet tmpAddressedData = this.fable.manifest.getValueByHash(this.AppData, this.options.GridDataAddress);\n\t\t\tif (typeof (tmpAddressedData) != 'object')\n\t\t\t{\n\t\t\t\tthis.log.error(`Address for GridData [${this.options.GridDataAddress}] did not return an object; it was a ${typeof (tmpAddressedData)}.`);\n\t\t\t\tthis.gridData = [];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.gridData = JSON.parse(JSON.stringify(tmpAddressedData));\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.gridData = [];\n\t\t}\n\n\t\tlet tmpTargetElementSet = this.services.ContentAssignment.getElement(this.options.TargetElementAddress);\n\t\tif (tmpTargetElementSet.length < 1)\n\t\t{\n\t\t\tthis.log.error(`Could not find target element [${this.options.TargetElementAddress}] for TuiGrid!  Rendering won't function properly.`);\n\t\t\tthis.targetElement = false;\n\t\t\treturn false;\n\t\t}\n\n\t\t// Just go for the first one.\n\t\tthis.targetElement = tmpTargetElementSet[0];\n\n\t\t// Check to see if there are any custom formatters.\n\t\tthis.columnSchema = this.options.TuiColumnSchema;\n\t\t// Setup the solver and custom schema handlers.\n\t\tfor (let i = 0; i < this.columnSchema.length; i++)\n\t\t{\n\t\t\tlet tmpColumn = this.columnSchema[i];\n\t\t\t// If this bit is set on a column, the Form solver will trigger each time a change happens to that column.\n\t\t\tif (tmpColumn.PictTriggerSolveOnChange)\n\t\t\t{\n\t\t\t\tthis.options.ColumnsToSolveOnChange[tmpColumn.name] = tmpColumn;\n\t\t\t}\n\t\t\t// Look to see if there is an internal formatter that matches the type\n\t\t\tif ((tmpColumn.hasOwnProperty('formatter')) && (this.customFormatters.hasOwnProperty(tmpColumn.formatter)))\n\t\t\t{\n\t\t\t\t// Assign our special formatter to the column.\n\t\t\t\ttmpColumn.formatter = this.customFormatters[tmpColumn.formatter];\n\t\t\t}\n\t\t\t// Look to see if there is an editor stanza\n\t\t\tif (tmpColumn.hasOwnProperty('editor'))\n\t\t\t{\n\t\t\t\t// Look to see if there is an internal editor that matches the type\n\t\t\t\tif ((tmpColumn.editor.hasOwnProperty('type'))\n\t\t\t\t\t&& (typeof (tmpColumn.editor.type) == 'string')\n\t\t\t\t\t&& (this.customEditors.hasOwnProperty(tmpColumn.editor.type)))\n\t\t\t\t{\n\t\t\t\t\t// Assign our special editor to the column.\n\t\t\t\t\ttmpColumn.editor.type = this.customEditors[tmpColumn.editor.type];\n\t\t\t\t}\n\n\t\t\t\t// Look to see if there is an internal editor that matches the type\n\t\t\t\tif ((tmpColumn.editor.hasOwnProperty('options'))\n\t\t\t\t\t&& (typeof (tmpColumn.editor.options) == 'object')\n\t\t\t\t\t&& (tmpColumn.editor.options.hasOwnProperty('listItems'))\n\t\t\t\t\t&& (typeof (tmpColumn.editor.options.listItems) == 'string'))\n\t\t\t\t{\n\t\t\t\t\t// Look for this address!  For the Record object, we will pass in the options.\n\t\t\t\t\tlet tmpListItems = this.fable.manifest.getValueByHash({ AppData: this.AppData, Options: this.options }, tmpColumn.editor.options.listItems);\n\t\t\t\t\tif (typeof (tmpListItems) == 'object')\n\t\t\t\t\t{\n\t\t\t\t\t\ttmpColumn.editor.options.listItems = tmpListItems;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.log.warn(`Pict TuiGrid for column [${tmpColumn.name}] had [${tmpColumn.editor.options.listItems}] as a listItems address, but it didn't return an object.  It was a [${typeof (tmpListItems)}].  Setting to empty list.`);\n\t\t\t\t\t\ttmpColumn.editor.options.listItems = [];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.gridSettings = {\n\t\t\t\tdata: this.gridData,\n\t\t\t\tel: this.targetElement,\n\t\t\t\tcolumns: this.columnSchema,\n\n\t\t\t\t// This is no bueno, yo\n\t\t\t\tusageStatistics: false,\n\n\t\t\t\tscrollY: this.options.GridScrollY,\n\n\t\t\t\tcolumnOptions:\n\t\t\t\t{\n\t\t\t\t\tresizable: this.options.GridColumnWidthResizable\n\t\t\t\t}\n\t\t\t};\n\n\t\tthis.customConfigureGridSettings();\n\n\t\tlet libTuiGrid = this._tuiGridPrototype;\n\t\tthis.tuiGrid = new libTuiGrid(this.gridSettings);\n\t\tthis.tuiGrid.on('beforeChange', (pChangeData) =>\n\t\t{\n\t\t\t//TODO: the exported event type from tui-grid is incomplete so mask it here\n\t\t\t/** @type {any} */\n\t\t\tconst tmpChangeData = pChangeData;\n\t\t\tthis.preChangeHandler(tmpChangeData);\n\t\t});\n\t\tthis.tuiGrid.on('afterChange', (pChangeData) =>\n\t\t{\n\t\t\t//TODO: the exported event type from tui-grid is incomplete so mask it here\n\t\t\t/** @type {any} */\n\t\t\tconst tmpChangeData = pChangeData;\n\t\t\tthis.changeHandler(tmpChangeData);\n\t\t});\n\t}\n\n\t/**\n\t * This is expected to be overloaded with anything that needs to be added to the grid configuration\n\t * before the Toast UI Grid component is initialized in the browser.\n\t */\n\tcustomConfigureGridSettings ()\n\t{\n\t\t// This can be overloaded to tweak up the this.gridSettings\n\t}\n\n\t/**\n\t * Lookup a specific record in the toast ui grid data set by value and pull the value from the map into the browser.\n\t *\n\t * This function exists because if we mutate data in the map of plain javascript records tuigrid\n\t * manages, it doesn't automatically refresh the UI.  From reading the TUIGrid documentation, this\n\t * is because they don't want to refresh until all the data has changed.\n\t *\n\t * The best practice has been to have a hidden column behind the tuigrid that maps the correct entity\n\t * value set to the record in the map (e.g. IDRecord in one column and Entity in another).\n\t *\n\t * @param {string} pCellColumnToBeSet - the Column hash to set\n\t * @param {string} pCellValueToSet - Value to be set\n\t * @param {string} pLookupValue - the Value to look up in tuigrid\n\t * @param {string} pLookupColumn - the key of the column in the tuigrid record (which are plain javascript objects defined by the tuigrid config)\n\t * @return {void}\n\t */\n\tSetGridValue(pCellColumnToBeSet, pCellValueToSet, pLookupValue, pLookupColumn)\n\t{\n\t\tif (typeof (pLookupValue) == 'undefined')\n\t\t{\n\t\t\tconsole.log(`Could not set grid value [${pCellColumnToBeSet}] = [${pCellValueToSet}] looked up by [${pLookupColumn}]::[${pLookupValue}].  No valid lookup value!`);\n\t\t\treturn;\n\t\t}\n\n\t\tif (!this.tuiGrid)\n\t\t{\n\t\t\tthis.log.warn(`Could not set grid value [${pCellColumnToBeSet}] = [${pCellValueToSet}] looked up by [${pLookupColumn}]::[${pLookupValue}].  No valid grid!`);\n\t\t\treturn;\n\t\t}\n\n\t\tconst tmpData = this.tuiGrid.getData();\n\n\t\tfor (let i = 0; i < tmpData.length; i++)\n\t\t{\n\t\t\tconst tmpRecord = tmpData[i];\n\n\t\t\tif (tmpRecord[pLookupColumn] == pLookupValue)\n\t\t\t{\n\t\t\t\tthis.tuiGrid.setValue(i, pCellColumnToBeSet, pCellValueToSet);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Lookup a specific record in the toast ui grid data set by row key and pull in a column.\n\t *\n\t * This function exists because if we mutate data in the map of plain javascript records tuigrid\n\t * manages, it doesn't automatically refresh the UI.  From reading the TUIGrid documentation, this\n\t * is because they don't want to refresh until all the data has changed.\n\t *\n\t *\n\t * @param {string} pCellColumnToBeSet - the Column hash to set\n\t * @param {string} pCellValueToSet - Value to be set\n\t * @param {string} pRowKey - the key of the row to be set\n\t * @return {boolean}\n\t */\n\tSetGridValueByRowKey(pCellColumnToBeSet, pCellValueToSet, pRowKey)\n\t{\n\t\tif (typeof (pRowKey) == 'undefined')\n\t\t{\n\t\t\tthis.log.error(`Could not set grid value [${pCellColumnToBeSet}] = [${pCellValueToSet}] looked up by row key [${pRowKey}].  No valid row key!`);\n\t\t\treturn false;\n\t\t}\n\n\t\tif (!this.tuiGrid)\n\t\t{\n\t\t\tthis.log.warn(`Could not set grid value [${pCellColumnToBeSet}] = [${pCellValueToSet}] looked up by row key [${pRowKey}].  No valid grid!`);\n\t\t\treturn false;\n\t\t}\n\n\t\tthis.tuiGrid.setValue(pRowKey, pCellColumnToBeSet, pCellValueToSet);\n\t\treturn true;\n\t}\n}\n\nmodule.exports = PictSectionTuiGrid;\n\nmodule.exports.default_configuration = require('./Pict-Section-TuiGrid-DefaultConfiguration.json');\n\n},{\"./Pict-Section-TuiGrid-DefaultConfiguration.json\":5,\"./Pict-TuiGrid-Editors.js\":9,\"./Pict-TuiGrid-Headers.js\":10,\"pict-view\":4}],7:[function(require,module,exports){\n// Custom number editor class with an option for precision\nclass tuiCustomEditorNumber\n{\n\tconstructor(pProperties)\n\t{\n\t\tconst tmpElement = document.createElement('input');\n\n\t\tconst decimalPrecision = (pProperties.columnInfo.editor.options.decimalPrecision) ? pProperties.columnInfo.editor.options.decimalPrecision : 3;\n\n\t\ttmpElement.type = 'number';\n\t\ttmpElement.value = String(pProperties.value);\n\t\ttmpElement.oninput = (pElement) =>\n\t\t{\n\t\t\tif (pElement.target instanceof HTMLInputElement)\n\t\t\t{\n\t\t\t\tconst tmpCastNumber = parseFloat(pElement.target.value).toFixed(decimalPrecision).toString()\n\t\t\t\tif (tmpCastNumber.length < parseFloat(pElement.target.value).toString().length)\n\t\t\t\t{\n\t\t\t\t\tpElement.target.value = tmpCastNumber;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tthis.Element = tmpElement;\n\t}\n\n\tgetElement()\n\t{\n\t\treturn this.Element;\n\t}\n\n\tgetValue()\n\t{\n\t\treturn this.Element.value;\n\t}\n\n\tmounted()\n\t{\n\t\tthis.Element.select();\n\t}\n}\n\nmodule.exports = tuiCustomEditorNumber;\n\n},{}],8:[function(require,module,exports){\n// Custom number editor class with an option for precision\nclass tuiCustomEditorText\n{\n\tconstructor(pProperties)\n\t{\n\t\tconst tmpElement = document.createElement('input');\n\n\t\ttmpElement.type = 'text';\n\t\ttmpElement.value = String(pProperties.value);\n\t\ttmpElement.placeholder =  pProperties.columnInfo.editor.options.placeholder || '';\n\t\ttmpElement.pattern = pProperties.columnInfo.editor.options.pattern || '';\n\t\ttmpElement.minLength = pProperties.columnInfo.editor.options.minLength || '';\n\t\ttmpElement.maxLength = pProperties.columnInfo.editor.options.maxLength || '';\n\t\ttmpElement.required = pProperties.columnInfo.editor.options.required || '';\n\n\t\tthis.Element = tmpElement;\n\t}\n\n\tgetElement()\n\t{\n\t\treturn this.Element;\n\t}\n\n\tgetValue()\n\t{\n\t\treturn this.Element.value;\n\t}\n\n\tmounted()\n\t{\n\t\tthis.Element.select();\n\t}\n}\n\nmodule.exports = tuiCustomEditorText;\n\n},{}],9:[function(require,module,exports){\nmodule.exports =\n{\n\tEditorNumber: require('./Pict-TuiGrid-Editor-Number.js'),\n\tEditorText: require('./Pict-TuiGrid-Editor-Text.js'),\n};\n\n},{\"./Pict-TuiGrid-Editor-Number.js\":7,\"./Pict-TuiGrid-Editor-Text.js\":8}],10:[function(require,module,exports){\n// Custom column header where the header is hidden\nclass tuiCustomColumnHeaderNone\n{\n\tconstructor()\n\t{\n\t\tlet tmpElement = document.createElement('input');\n\t\ttmpElement.type = 'hidden';\n\t\ttmpElement.value = '';\n\t\tthis.Element = tmpElement;\n\t}\n\n\tgetElement()\n\t{\n\t\treturn this.Element;\n\t}\n\n\trender()\n\t{\n\t\t// Noop!\n\t}\n}\n\nmodule.exports =\n{\n\tCustomColumnHeaderNone: tuiCustomColumnHeaderNone,\n};\n\n},{}]},{},[6])(6)\n});\n\n","(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","module.exports={\n    \"name\": \"fable-serviceproviderbase\",\n    \"version\": \"3.0.15\",\n    \"description\": \"Simple base classes for fable services.\",\n    \"main\": \"source/Fable-ServiceProviderBase.js\",\n    \"scripts\": {\n        \"start\": \"node source/Fable-ServiceProviderBase.js\",\n        \"test\": \"npx mocha -u tdd -R spec\",\n        \"tests\": \"npx mocha -u tdd --exit -R spec --grep\",\n        \"coverage\": \"npx nyc --reporter=lcov --reporter=text-lcov npx mocha -- -u tdd -R spec\",\n        \"build\": \"npx quack build\"\n    },\n    \"mocha\": {\n        \"diff\": true,\n        \"extension\": [\n            \"js\"\n        ],\n        \"package\": \"./package.json\",\n        \"reporter\": \"spec\",\n        \"slow\": \"75\",\n        \"timeout\": \"5000\",\n        \"ui\": \"tdd\",\n        \"watch-files\": [\n            \"source/**/*.js\",\n            \"test/**/*.js\"\n        ],\n        \"watch-ignore\": [\n            \"lib/vendor\"\n        ]\n    },\n    \"repository\": {\n        \"type\": \"git\",\n        \"url\": \"https://github.com/stevenvelozo/fable-serviceproviderbase.git\"\n    },\n    \"keywords\": [\n        \"entity\",\n        \"behavior\"\n    ],\n    \"author\": \"Steven Velozo <steven@velozo.com> (http://velozo.com/)\",\n    \"license\": \"MIT\",\n    \"bugs\": {\n        \"url\": \"https://github.com/stevenvelozo/fable-serviceproviderbase/issues\"\n    },\n    \"homepage\": \"https://github.com/stevenvelozo/fable-serviceproviderbase\",\n    \"devDependencies\": {\n        \"fable\": \"^3.0.143\",\n        \"quackage\": \"^1.0.33\"\n    }\n}","/**\n* Fable Service Base\n* @author <steven@velozo.com>\n*/\n\nconst libPackage = require('../package.json');\n\nclass FableServiceProviderBase\n{\n\t// The constructor can be used in two ways:\n\t// 1) With a fable, options object and service hash (the options object and service hash are optional)\n\t// 2) With an object or nothing as the first parameter, where it will be treated as the options object\n\tconstructor(pFable, pOptions, pServiceHash)\n\t{\n\t\t// Check if a fable was passed in; connect it if so\n\t\tif ((typeof(pFable) === 'object') && pFable.isFable)\n\t\t{\n\t\t\tthis.connectFable(pFable);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.fable = false;\n\t\t}\n\n\t\t// Initialize the services map if it wasn't passed in\n\t\t/** @type {Object} */\n\t\tthis._PackageFableServiceProvider = libPackage;\n\n\t\t// initialize options and UUID based on whether the fable was passed in or not.\n\t\tif (this.fable)\n\t\t{\n\t\t\tthis.UUID = pFable.getUUID();\n\t\t\tthis.options = (typeof(pOptions) === 'object') ? pOptions\n\t\t\t\t\t\t\t: {};\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// With no fable, check to see if there was an object passed into either of the first two\n\t\t\t// Parameters, and if so, treat it as the options object\n\t\t\tthis.options = ((typeof(pFable) === 'object') && !pFable.isFable) ? pFable\n\t\t\t\t\t\t\t: (typeof(pOptions) === 'object') ? pOptions\n\t\t\t\t\t\t\t: {};\n\t\t\tthis.UUID = `CORE-SVC-${Math.floor((Math.random() * (99999 - 10000)) + 10000)}`\n\t\t}\n\n\t\t// It's expected that the deriving class will set this\n\t\tthis.serviceType = `Unknown-${this.UUID}`;\n\n\t\t// The service hash is used to identify the specific instantiation of the service in the services map\n\t\tthis.Hash = (typeof(pServiceHash) === 'string') ? pServiceHash \n\t\t\t\t\t: (!this.fable && (typeof(pOptions) === 'string')) ? pOptions\n\t\t\t\t\t: `${this.UUID}`;\n\t}\n\n\tconnectFable(pFable)\n\t{\n\t\tif ((typeof(pFable) !== 'object') || (!pFable.isFable))\n\t\t{\n\t\t\tlet tmpErrorMessage = `Fable Service Provider Base: Cannot connect to Fable, invalid Fable object passed in.  The pFable parameter was a [${typeof(pFable)}].}`;\n\t\t\tconsole.log(tmpErrorMessage);\n\t\t\treturn new Error(tmpErrorMessage);\n\t\t}\n\n\t\tif (!this.fable)\n\t\t{\n\t\t\tthis.fable = pFable;\n\t\t}\n\n\t\tif (!this.log)\n\t\t{\n\t\t\tthis.log = this.fable.Logging;\n\t\t}\n\t\tif (!this.services)\n\t\t{\n\t\t\tthis.services = this.fable.services;\n\t\t}\n\n\t\tif (!this.servicesMap)\n\t\t{\n\t\t\tthis.servicesMap = this.fable.servicesMap;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tstatic isFableService = true;\n}\n\nmodule.exports = FableServiceProviderBase;\n\n// This is left here in case we want to go back to having different code/base class for \"core\" services\nmodule.exports.CoreServiceProviderBase = FableServiceProviderBase;","module.exports={\n    \"name\": \"pict-view\",\n    \"version\": \"1.0.61\",\n    \"description\": \"Pict View Base Class\",\n    \"main\": \"source/Pict-View.js\",\n    \"scripts\": {\n        \"test\": \"./node_modules/.bin/mocha -u tdd -R spec\",\n        \"start\": \"node source/Pict-View.js\",\n        \"coverage\": \"./node_modules/.bin/nyc --reporter=lcov --reporter=text-lcov ./node_modules/mocha/bin/_mocha -- -u tdd -R spec\",\n        \"build\": \"npx quack build\",\n        \"docker-dev-build\": \"docker build ./ -f Dockerfile_LUXURYCode -t pict-view-image:local\",\n        \"docker-dev-run\": \"docker run -it -d --name pict-view-dev -p 30001:8080 -p 38086:8086 -v \\\"$PWD/.config:/home/coder/.config\\\"  -v \\\"$PWD:/home/coder/pict-view\\\" -u \\\"$(id -u):$(id -g)\\\" -e \\\"DOCKER_USER=$USER\\\" pict-view-image:local\",\n        \"docker-dev-shell\": \"docker exec -it pict-view-dev /bin/bash\",\n        \"types\": \"tsc -p .\",\n        \"lint\": \"eslint source/**\"\n    },\n    \"types\": \"types/source/Pict-View.d.ts\",\n    \"repository\": {\n        \"type\": \"git\",\n        \"url\": \"git+https://github.com/stevenvelozo/pict-view.git\"\n    },\n    \"author\": \"steven velozo <steven@velozo.com>\",\n    \"license\": \"MIT\",\n    \"bugs\": {\n        \"url\": \"https://github.com/stevenvelozo/pict-view/issues\"\n    },\n    \"homepage\": \"https://github.com/stevenvelozo/pict-view#readme\",\n    \"devDependencies\": {\n        \"@eslint/js\": \"^9.28.0\",\n        \"browser-env\": \"^3.3.0\",\n        \"eslint\": \"^9.28.0\",\n        \"pict\": \"^1.0.272\",\n        \"quackage\": \"^1.0.41\",\n        \"typescript\": \"^5.8.3\"\n    },\n    \"mocha\": {\n        \"diff\": true,\n        \"extension\": [\n            \"js\"\n        ],\n        \"package\": \"./package.json\",\n        \"reporter\": \"spec\",\n        \"slow\": \"75\",\n        \"timeout\": \"5000\",\n        \"ui\": \"tdd\",\n        \"watch-files\": [\n            \"source/**/*.js\",\n            \"test/**/*.js\"\n        ],\n        \"watch-ignore\": [\n            \"lib/vendor\"\n        ]\n    },\n    \"dependencies\": {\n        \"fable\": \"^3.1.11\",\n        \"fable-serviceproviderbase\": \"^3.0.15\"\n    }\n}\n","\nconst libFableServiceBase = require('fable-serviceproviderbase');\n\nconst libPackage = require('../package.json');\n\nconst defaultPictViewSettings = (\n\t{\n\t\tDefaultRenderable: false,\n\t\tDefaultDestinationAddress: false,\n\t\tDefaultTemplateRecordAddress: false,\n\n\t\tViewIdentifier: false,\n\n\t\t// If this is set to true, when the App initializes this will.\n\t\t// After the App initializes, initialize will be called as soon as it's added.\n\t\tAutoInitialize: true,\n\t\tAutoInitializeOrdinal: 0,\n\n\t\t// If this is set to true, when the App autorenders (on load) this will.\n\t\t// After the App initializes, render will be called as soon as it's added.\n\t\tAutoRender: true,\n\t\tAutoRenderOrdinal: 0,\n\n\t\tAutoSolveWithApp: true,\n\t\tAutoSolveOrdinal: 0,\n\n\t\tCSSHash: false,\n\t\tCSS: false,\n\t\tCSSProvider: false,\n\t\tCSSPriority: 500,\n\n\t\tTemplates: [],\n\n\t\tDefaultTemplates: [],\n\n\t\tRenderables: [],\n\n\t\tManifests: {}\n\t});\n\n/** @typedef {(error?: Error) => void} ErrorCallback */\n/** @typedef {number | boolean} PictTimestamp */\n\n/**\n * @typedef {'replace' | 'append' | 'prepend' | 'append_once'} RenderMethod\n */\n/**\n * @typedef {Object} Renderable\n *\n * @property {string} RenderableHash - A unique hash for the renderable.\n * @property {string} TemplateHash] - The hash of the template to use for rendering this renderable.\n * @property {string} [DefaultTemplateRecordAddress] - The default address for resolving the data record for this renderable.\n * @property {string} [ContentDestinationAddress] - The default address (DOM CSS selector) for rendering the content of this renderable.\n * @property {RenderMethod} [RenderMethod=replace] - The method to use when projecting the renderable to the DOM ('replace', 'append', 'prepend', 'append_once').\n * @property {string} [TestAddress] - The address to use for testing the renderable.\n */\n\n/**\n * Represents a view in the Pict ecosystem.\n */\nclass PictView extends libFableServiceBase\n{\n\t/**\n\t * @param {any} pFable - The Fable object that this service is attached to.\n\t * @param {any} [pOptions] - (optional) The options for this service.\n\t * @param {string} [pServiceHash] - (optional) The hash of the service.\n\t */\n\tconstructor(pFable, pOptions, pServiceHash)\n\t{\n\t\t// Intersect default options, parent constructor, service information\n\t\tlet tmpOptions = Object.assign({}, JSON.parse(JSON.stringify(defaultPictViewSettings)), pOptions);\n\t\tsuper(pFable, tmpOptions, pServiceHash);\n\t\t//FIXME: add types to fable and ancillaries\n\t\t/** @type {any} */\n\t\tthis.fable;\n\t\t/** @type {any} */\n\t\tthis.options;\n\t\t/** @type {String} */\n\t\tthis.UUID;\n\t\t/** @type {String} */\n\t\tthis.Hash;\n\t\t/** @type {any} */\n\t\tthis.log;\n\n\t\tif (!this.options.ViewIdentifier)\n\t\t{\n\t\t\tthis.options.ViewIdentifier = `AutoViewID-${this.fable.getUUID()}`;\n\t\t}\n\t\tthis.serviceType = 'PictView';\n\t\t/** @type {Record<string, any>} */\n\t\tthis._Package = libPackage;\n\t\t// Convenience and consistency naming\n\t\t/** @type {import('pict') & { log: any, instantiateServiceProviderWithoutRegistration: (hash: String) => any }} */\n\t\tthis.pict = this.fable;\n\t\t// Wire in the essential Pict application state\n\t\tthis.AppData = this.pict.AppData;\n\t\tthis.Bundle = this.pict.Bundle;\n\n\t\t/** @type {PictTimestamp} */\n\t\tthis.initializeTimestamp = false;\n\t\t/** @type {PictTimestamp} */\n\t\tthis.lastSolvedTimestamp = false;\n\t\t/** @type {PictTimestamp} */\n\t\tthis.lastRenderedTimestamp = false;\n\t\t/** @type {PictTimestamp} */\n\t\tthis.lastMarshalFromViewTimestamp = false;\n\t\t/** @type {PictTimestamp} */\n\t\tthis.lastMarshalToViewTimestamp = false;\n\n\t\t// Load all templates from the array in the options\n\t\t// Templates are in the form of {Hash:'Some-Template-Hash',Template:'Template content',Source:'TemplateSource'}\n\t\tfor (let i = 0; i < this.options.Templates.length; i++)\n\t\t{\n\t\t\tlet tmpTemplate = this.options.Templates[i];\n\n\t\t\tif (!('Hash' in tmpTemplate) || !('Template' in tmpTemplate))\n\t\t\t{\n\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not load Template ${i} in the options array.`, tmpTemplate);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (!tmpTemplate.Source)\n\t\t\t\t{\n\t\t\t\t\ttmpTemplate.Source = `PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} options object.`;\n\t\t\t\t}\n\t\t\t\tthis.pict.TemplateProvider.addTemplate(tmpTemplate.Hash, tmpTemplate.Template, tmpTemplate.Source);\n\t\t\t}\n\t\t}\n\n\t\t// Load all default templates from the array in the options\n\t\t// Templates are in the form of {Prefix:'',Postfix:'-List-Row',Template:'Template content',Source:'TemplateSourceString'}\n\t\tfor (let i = 0; i < this.options.DefaultTemplates.length; i++)\n\t\t{\n\t\t\tlet tmpDefaultTemplate = this.options.DefaultTemplates[i];\n\n\t\t\tif (!('Postfix' in tmpDefaultTemplate) || !('Template' in tmpDefaultTemplate))\n\t\t\t{\n\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not load Default Template ${i} in the options array.`, tmpDefaultTemplate);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (!tmpDefaultTemplate.Source)\n\t\t\t\t{\n\t\t\t\t\ttmpDefaultTemplate.Source = `PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} options object.`;\n\t\t\t\t}\n\t\t\t\tthis.pict.TemplateProvider.addDefaultTemplate(tmpDefaultTemplate.Prefix, tmpDefaultTemplate.Postfix, tmpDefaultTemplate.Template, tmpDefaultTemplate.Source);\n\t\t\t}\n\t\t}\n\n\t\t// Load the CSS if it's available\n\t\tif (this.options.CSS)\n\t\t{\n\t\t\tlet tmpCSSHash = this.options.CSSHash ? this.options.CSSHash : `View-${this.options.ViewIdentifier}`;\n\t\t\tlet tmpCSSProvider = this.options.CSSProvider ? this.options.CSSProvider : tmpCSSHash;\n\t\t\tthis.pict.CSSMap.addCSS(tmpCSSHash, this.options.CSS, tmpCSSProvider, this.options.CSSPriority);\n\t\t}\n\n\t\t// Load all renderables\n\t\t// Renderables are launchable renderable instructions with templates\n\t\t// They look as such: {Identifier:'ContentEntry', TemplateHash:'Content-Entry-Section-Main', ContentDestinationAddress:'#ContentSection', RecordAddress:'AppData.Content.DefaultText', ManifestTransformation:'ManyfestHash', ManifestDestinationAddress:'AppData.Content.DataToTransformContent'}\n\t\t// The only parts that are necessary are Identifier and Template\n\t\t// A developer can then do render('ContentEntry') and it just kinda works.  Or they can override the ContentDestinationAddress\n\t\t/** @type {Object<String, Renderable>} */\n\t\tthis.renderables = {};\n\t\tfor (let i = 0; i < this.options.Renderables.length; i++)\n\t\t{\n\t\t\t/** @type {Renderable} */\n\t\t\tlet tmpRenderable = this.options.Renderables[i];\n\t\t\tthis.addRenderable(tmpRenderable);\n\t\t}\n\t}\n\n\t/**\n\t * Adds a renderable to the view.\n\t *\n\t * @param {string | Renderable} pRenderableHash - The hash of the renderable, or a renderable object.\n\t * @param {string} [pTemplateHash] - (optional) The hash of the template for the renderable.\n\t * @param {string} [pDefaultTemplateRecordAddress] - (optional) The default data address for the template.\n\t * @param {string} [pDefaultDestinationAddress] - (optional) The default destination address for the renderable.\n\t * @param {RenderMethod} [pRenderMethod=replace] - (optional) The method to use when rendering the renderable (ex. 'replace').\n\t */\n\taddRenderable(pRenderableHash, pTemplateHash, pDefaultTemplateRecordAddress, pDefaultDestinationAddress, pRenderMethod)\n\t{\n\t\t/** @type {Renderable} */\n\t\tlet tmpRenderable;\n\n\t\tif (typeof(pRenderableHash) == 'object')\n\t\t{\n\t\t\t// The developer passed in the renderable as an object.\n\t\t\t// Use theirs instead!\n\t\t\ttmpRenderable = pRenderableHash;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t/** @type {RenderMethod} */\n\t\t\tlet tmpRenderMethod = (typeof(pRenderMethod) !== 'string') ? pRenderMethod : 'replace';\n\t\t\ttmpRenderable = (\n\t\t\t\t{\n\t\t\t\t\tRenderableHash: pRenderableHash,\n\t\t\t\t\tTemplateHash: pTemplateHash,\n\t\t\t\t\tDefaultTemplateRecordAddress: pDefaultTemplateRecordAddress,\n\t\t\t\t\tContentDestinationAddress: pDefaultDestinationAddress,\n\t\t\t\t\tRenderMethod: tmpRenderMethod\n\t\t\t\t});\n\t\t}\n\n\t\tif ((typeof(tmpRenderable.RenderableHash) != 'string') || (typeof(tmpRenderable.TemplateHash) != 'string'))\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not load Renderable; RenderableHash or TemplateHash are invalid.`, tmpRenderable);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (this.pict.LogNoisiness > 0)\n\t\t\t{\n\t\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} adding renderable [${tmpRenderable.RenderableHash}] pointed to template ${tmpRenderable.TemplateHash}.`);\n\t\t\t}\n\n\t\t\tthis.renderables[tmpRenderable.RenderableHash] = tmpRenderable;\n\t\t}\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*                        Code Section: Initialization                        */\n\t/* -------------------------------------------------------------------------- */\n\t/**\n\t * Lifecycle hook that triggers before the view is initialized.\n\t */\n\tonBeforeInitialize()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onBeforeInitialize:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers before the view is initialized (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonBeforeInitializeAsync(fCallback)\n\t{\n\t\tthis.onBeforeInitialize();\n\t\treturn fCallback();\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers when the view is initialized.\n\t */\n\tonInitialize()\n\t{\n\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onInitialize:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers when the view is initialized (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonInitializeAsync(fCallback)\n\t{\n\t\tthis.onInitialize();\n\t\treturn fCallback();\n\t}\n\n\t/**\n\t * Performs view initialization.\n\t */\n\tinitialize()\n\t{\n\t\tif (this.pict.LogControlFlow)\n\t\t{\n\t\t\tthis.log.trace(`PICT-ControlFlow VIEW [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} initialize:`);\n\t\t}\n\n\t\tif (!this.initializeTimestamp)\n\t\t{\n\t\t\tthis.onBeforeInitialize();\n\t\t\tthis.onInitialize();\n\t\t\tthis.onAfterInitialize();\n\t\t\tthis.initializeTimestamp = this.pict.log.getTimeStamp();\n\t\t\treturn true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.log.warn(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} initialize called but initialization is already completed.  Aborting.`);\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * Performs view initialization (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tinitializeAsync(fCallback)\n\t{\n\t\tif (this.pict.LogControlFlow)\n\t\t{\n\t\t\tthis.log.trace(`PICT-ControlFlow VIEW [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} initializeAsync:`);\n\t\t}\n\n\t\tif (!this.initializeTimestamp)\n\t\t{\n\t\t\tlet tmpAnticipate = this.pict.instantiateServiceProviderWithoutRegistration('Anticipate');\n\n\t\t\tif (this.pict.LogNoisiness > 0)\n\t\t\t{\n\t\t\t\tthis.log.info(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} beginning initialization...`);\n\t\t\t}\n\n\t\t\ttmpAnticipate.anticipate(this.onBeforeInitializeAsync.bind(this));\n\t\t\ttmpAnticipate.anticipate(this.onInitializeAsync.bind(this));\n\t\t\ttmpAnticipate.anticipate(this.onAfterInitializeAsync.bind(this));\n\n\t\t\ttmpAnticipate.wait(\n\t\t\t\t/** @param {Error} pError */\n\t\t\t\t(pError) =>\n\t\t\t\t{\n\t\t\t\t\tif (pError)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} initialization failed: ${pError.message || pError}`, { stack: pError.stack });\n\t\t\t\t\t}\n\t\t\t\t\tthis.initializeTimestamp = this.pict.log.getTimeStamp();\n\t\t\t\t\tif (this.pict.LogNoisiness > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.log.info(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} initialization complete.`);\n\t\t\t\t\t}\n\t\t\t\t\treturn fCallback();\n\t\t\t\t});\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.log.warn(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} async initialize called but initialization is already completed.  Aborting.`);\n\t\t\t// TODO: Should this be an error?\n\t\t\treturn fCallback();\n\t\t}\n\t}\n\n\tonAfterInitialize()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onAfterInitialize:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers after the view is initialized (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonAfterInitializeAsync(fCallback)\n\t{\n\t\tthis.onAfterInitialize();\n\t\treturn fCallback();\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*                            Code Section: Render                            */\n\t/* -------------------------------------------------------------------------- */\n\t/**\n\t * Lifecycle hook that triggers before the view is rendered.\n\t *\n\t * @param {Renderable} pRenderable - The renderable that will be rendered.\n\t * @param {string} pRenderDestinationAddress - The address where the renderable will be rendered.\n\t * @param {any} pRecord - The record (data) that will be used to render the renderable.\n\t */\n\tonBeforeRender(pRenderable, pRenderDestinationAddress, pRecord)\n\t{\n\t\t// Overload this to mess with stuff before the content gets generated from the template\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onBeforeRender:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers before the view is rendered (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonBeforeRenderAsync(fCallback)\n\t{\n\t\treturn fCallback();\n\t}\n\n\t/**\n\t * Builds the render options for a renderable.\n\t *\n\t * For DRY purposes on the three flavors of render.\n\t *\n\t * @param {string|ErrorCallback} [pRenderableHash] - The hash of the renderable to render.\n\t * @param {string|ErrorCallback} [pRenderDestinationAddress] - The address where the renderable will be rendered.\n\t * @param {string|object|ErrorCallback} [pTemplateRecordAddress] - The address of (or actual obejct) where the data for the template is stored.\n\t */\n\tbuildRenderOptions(pRenderableHash, pRenderDestinationAddress, pTemplateRecordAddress)\n\t{\n\t\tlet tmpRenderOptions = {Valid: true};\n\t\ttmpRenderOptions.RenderableHash = (typeof (pRenderableHash) === 'string') ? pRenderableHash :\n\t\t\t\t\t\t\t\t(typeof (this.options.DefaultRenderable) == 'string') ?\n\t\t\t\t\t\t\t\tthis.options.DefaultRenderable : false;\n\t\tif (!tmpRenderOptions.RenderableHash)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not find a suitable RenderableHash ${tmpRenderOptions.RenderableHash} (param ${pRenderableHash}because it is not a valid renderable.`);\n\t\t\ttmpRenderOptions.Valid = false;\n\t\t}\n\n\t\ttmpRenderOptions.Renderable = this.renderables[tmpRenderOptions.RenderableHash];\n\t\tif (!tmpRenderOptions.Renderable)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderOptions.RenderableHash} (param ${pRenderableHash}) because it does not exist.`);\n\t\t\ttmpRenderOptions.Valid = false;\n\t\t}\n\n\t\ttmpRenderOptions.DestinationAddress = (typeof (pRenderDestinationAddress) === 'string') ? pRenderDestinationAddress :\n\t\t\t(typeof (tmpRenderOptions.Renderable.ContentDestinationAddress) === 'string') ? tmpRenderOptions.Renderable.ContentDestinationAddress :\n\t\t\t\t(typeof (this.options.DefaultDestinationAddress) === 'string') ? this.options.DefaultDestinationAddress : false;\n\t\tif (!tmpRenderOptions.DestinationAddress)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderOptions.RenderableHash} (param ${pRenderableHash}) because it does not have a valid destination address (param ${pRenderDestinationAddress}).`);\n\t\t\ttmpRenderOptions.Valid = false;\n\t\t}\n\n\t\tif (typeof(pTemplateRecordAddress) === 'object')\n\t\t{\n\t\t\ttmpRenderOptions.RecordAddress = 'Passed in as object';\n\t\t\ttmpRenderOptions.Record = pTemplateRecordAddress;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttmpRenderOptions.RecordAddress = (typeof (pTemplateRecordAddress) === 'string') ? pTemplateRecordAddress :\n\t\t\t\t(typeof (tmpRenderOptions.Renderable.DefaultTemplateRecordAddress) === 'string') ? tmpRenderOptions.Renderable.DefaultTemplateRecordAddress :\n\t\t\t\t(typeof (this.options.DefaultTemplateRecordAddress) === 'string') ? this.options.DefaultTemplateRecordAddress : false;\n\t\t\ttmpRenderOptions.Record = (typeof (tmpRenderOptions.RecordAddress) === 'string') ? this.pict.DataProvider.getDataByAddress(tmpRenderOptions.RecordAddress) : undefined;\n\t\t}\n\n\t\treturn tmpRenderOptions;\n\t}\n\n\t/**\n\t * Assigns the content to the destination address.\n\t *\n\t * For DRY purposes on the three flavors of render.\n\t *\n\t * @param {Renderable} pRenderable - The renderable to render.\n\t * @param {string} pRenderDestinationAddress - The address where the renderable will be rendered.\n\t * @param {string} pContent - The content to render.\n\t * @returns {boolean} - Returns true if the content was assigned successfully.\n\t * @memberof PictView\n\t */\n\tassignRenderContent(pRenderable, pRenderDestinationAddress, pContent)\n\t{\n\t\treturn this.pict.ContentAssignment.projectContent(pRenderable.RenderMethod, pRenderDestinationAddress, pContent, pRenderable.TestAddress);\n\t}\n\n\t/**\n\t * Render a renderable from this view.\n\t *\n\t * @param {string} [pRenderable] - The hash of the renderable to render.\n\t * @param {string} [pRenderDestinationAddress] - The address where the renderable will be rendered.\n\t * @param {string|object} [pTemplateRecordAddress] - The address where the data for the template is stored.\n\t * @return {boolean}\n\t */\n\trender(pRenderable, pRenderDestinationAddress, pTemplateRecordAddress)\n\t{\n\t\tlet tmpRenderableHash = (typeof (pRenderable) === 'string') ? pRenderable :\n\t\t\t(typeof (this.options.DefaultRenderable) == 'string') ? this.options.DefaultRenderable : false;\n\t\tif (!tmpRenderableHash)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderable}) because it is not a valid renderable.`);\n\t\t\treturn false;\n\t\t}\n\n\t\tlet tmpRenderable;\n\t\tif (tmpRenderableHash == '__Virtual')\n\t\t{\n\t\t\ttmpRenderable = {\n\t\t\t\t\tRenderableHash: '__Virtual',\n\t\t\t\t\tTemplateHash: this.renderables[this.options.DefaultRenderable].TemplateHash,\n\t\t\t\t\tDestinationAddress: pRenderDestinationAddress,\n\t\t\t\t\tRenderMethod: 'virtual-assignment'\n\t\t\t\t};\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttmpRenderable = this.renderables[tmpRenderableHash];\n\t\t}\n\n\t\tif (!tmpRenderable)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderable}) because it does not exist.`);\n\t\t\treturn false;\n\t\t}\n\n\t\tlet tmpRenderDestinationAddress = (typeof (pRenderDestinationAddress) === 'string') ? pRenderDestinationAddress :\n\t\t\t(typeof (tmpRenderable.ContentDestinationAddress) === 'string') ? tmpRenderable.ContentDestinationAddress :\n\t\t\t\t(typeof (this.options.DefaultDestinationAddress) === 'string') ? this.options.DefaultDestinationAddress : false;\n\n\t\tif (!tmpRenderDestinationAddress)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderable}) because it does not have a valid destination address.`);\n\t\t\treturn false;\n\t\t}\n\n\t\tlet tmpRecordAddress;\n\t\tlet tmpRecord;\n\n\t\tif (typeof(pTemplateRecordAddress) === 'object')\n\t\t{\n\t\t\ttmpRecord = pTemplateRecordAddress;\n\t\t\ttmpRecordAddress = 'Passed in as object';\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttmpRecordAddress = (typeof (pTemplateRecordAddress) === 'string') ? pTemplateRecordAddress :\n\t\t\t\t(typeof (tmpRenderable.DefaultTemplateRecordAddress) === 'string') ? tmpRenderable.DefaultTemplateRecordAddress :\n\t\t\t\t\t(typeof (this.options.DefaultTemplateRecordAddress) === 'string') ? this.options.DefaultTemplateRecordAddress : false;\n\n\t\t\ttmpRecord = (typeof (tmpRecordAddress) === 'string') ? this.pict.DataProvider.getDataByAddress(tmpRecordAddress) : undefined;\n\t\t}\n\n\t\t// Execute the developer-overridable pre-render behavior\n\t\tthis.onBeforeRender(tmpRenderable, tmpRenderDestinationAddress, tmpRecord);\n\n\t\tif (this.pict.LogControlFlow)\n\t\t{\n\t\t\tthis.log.trace(`PICT-ControlFlow VIEW [${this.UUID}]::[${this.Hash}] Renderable[${tmpRenderableHash}] Destination[${tmpRenderDestinationAddress}] TemplateRecordAddress[${tmpRecordAddress}] render:`);\n\t\t}\n\t\tif (this.pict.LogNoisiness > 0)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} Beginning Render of Renderable[${tmpRenderableHash}] to Destination [${tmpRenderDestinationAddress}]...`);\n\t\t}\n\t\t// Generate the content output from the template and data\n\t\tlet tmpContent = this.pict.parseTemplateByHash(tmpRenderable.TemplateHash, tmpRecord, null, [this]);\n\n\t\tif (this.pict.LogNoisiness > 0)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} Assigning Renderable[${tmpRenderableHash}] content length ${tmpContent.length} to Destination [${tmpRenderDestinationAddress}] using render method [${tmpRenderable.RenderMethod}].`);\n\t\t}\n\n\t\t// Assign the content to the destination address\n\t\tthis.pict.ContentAssignment.projectContent(tmpRenderable.RenderMethod, tmpRenderDestinationAddress, tmpContent, tmpRenderable.TestAddress);\n\n\t\t// Execute the developer-overridable post-render behavior\n\t\tthis.onAfterRender(tmpRenderable, tmpRenderDestinationAddress, tmpRecord, tmpContent);\n\n\t\tthis.lastRenderedTimestamp = this.pict.log.getTimeStamp();\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Render a renderable from this view.\n\t *\n\t * @param {string|ErrorCallback} [pRenderableHash] - The hash of the renderable to render.\n\t * @param {string|ErrorCallback} [pRenderDestinationAddress] - The address where the renderable will be rendered.\n\t * @param {string|object|ErrorCallback} [pTemplateRecordAddress] - The address where the data for the template is stored.\n\t * @param {ErrorCallback} [fCallback] - The callback to call when the async operation is complete.\n\t *\n\t * @return {void}\n\t */\n\trenderAsync(pRenderableHash, pRenderDestinationAddress, pTemplateRecordAddress, fCallback)\n\t{\n\t\tlet tmpRenderableHash = (typeof (pRenderableHash) === 'string') ? pRenderableHash :\n\t\t\t(typeof (this.options.DefaultRenderable) == 'string') ? this.options.DefaultRenderable : false;\n\n\t\t// Allow the callback to be passed in as the last parameter no matter what\n\t\t/** @type {ErrorCallback} */\n\t\tlet tmpCallback = (typeof(fCallback) === 'function') ? fCallback :\n\t\t\t\t\t\t\t(typeof(pTemplateRecordAddress) === 'function') ? pTemplateRecordAddress :\n\t\t\t\t\t\t\t(typeof(pRenderDestinationAddress) === 'function') ? pRenderDestinationAddress :\n\t\t\t\t\t\t\t(typeof(pRenderableHash) === 'function') ? pRenderableHash :\n\t\t\t\t\t\t\tnull;\n\n\t\tif (!tmpCallback)\n\t\t{\n\t\t\tthis.log.warn(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.Name} renderAsync was called without a valid callback.  A callback will be generated but this could lead to race conditions.`);\n\t\t\ttmpCallback = (pError) =>\n\t\t\t\t{\n\t\t\t\t\tif (pError)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.Name} renderAsync Auto Callback Error: ${pError}`, pError);\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t}\n\n\t\tif (!tmpRenderableHash)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not asynchronously render ${tmpRenderableHash} (param ${pRenderableHash}because it is not a valid renderable.`);\n\t\t\treturn tmpCallback(new Error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not asynchronously render ${tmpRenderableHash} (param ${pRenderableHash}because it is not a valid renderable.`));\n\t\t}\n\n\t\tlet tmpRenderable;\n\t\tif (tmpRenderableHash == '__Virtual')\n\t\t{\n\t\t\ttmpRenderable = {\n\t\t\t\t\tRenderableHash: '__Virtual',\n\t\t\t\t\tTemplateHash: this.renderables[this.options.DefaultRenderable].TemplateHash,\n\t\t\t\t\tDestinationAddress: pRenderDestinationAddress,\n\t\t\t\t\tRenderMethod: 'virtual-assignment'\n\t\t\t\t};\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttmpRenderable = this.renderables[tmpRenderableHash];\n\t\t}\n\n\t\tif (!tmpRenderable)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderableHash}) because it does not exist.`);\n\t\t\treturn tmpCallback(new Error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderableHash}) because it does not exist.`));\n\t\t}\n\n\t\tlet tmpRenderDestinationAddress = (typeof (pRenderDestinationAddress) === 'string') ? pRenderDestinationAddress :\n\t\t\t(typeof (tmpRenderable.ContentDestinationAddress) === 'string') ? tmpRenderable.ContentDestinationAddress :\n\t\t\t\t(typeof (this.options.DefaultDestinationAddress) === 'string') ? this.options.DefaultDestinationAddress : false;\n\n\t\tif (!tmpRenderDestinationAddress)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderableHash}) because it does not have a valid destination address.`);\n\t\t\treturn tmpCallback(new Error(`Could not render ${tmpRenderableHash}`));\n\t\t}\n\n\t\tlet tmpRecordAddress;\n\t\tlet tmpRecord;\n\n\t\tif (typeof(pTemplateRecordAddress) === 'object')\n\t\t{\n\t\t\ttmpRecord = pTemplateRecordAddress;\n\t\t\ttmpRecordAddress = 'Passed in as object';\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttmpRecordAddress = (typeof (pTemplateRecordAddress) === 'string') ? pTemplateRecordAddress :\n\t\t\t\t(typeof (tmpRenderable.DefaultTemplateRecordAddress) === 'string') ? tmpRenderable.DefaultTemplateRecordAddress :\n\t\t\t\t\t(typeof (this.options.DefaultTemplateRecordAddress) === 'string') ? this.options.DefaultTemplateRecordAddress : false;\n\n\t\t\ttmpRecord = (typeof (tmpRecordAddress) === 'string') ? this.pict.DataProvider.getDataByAddress(tmpRecordAddress) : undefined;\n\t\t}\n\n\t\tif (this.pict.LogControlFlow)\n\t\t{\n\t\t\tthis.log.trace(`PICT-ControlFlow VIEW [${this.UUID}]::[${this.Hash}] Renderable[${tmpRenderableHash}] Destination[${tmpRenderDestinationAddress}] TemplateRecordAddress[${tmpRecordAddress}] renderAsync:`);\n\t\t}\n\t\tif (this.pict.LogNoisiness > 2)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} Beginning Asynchronous Render (callback-style)...`);\n\t\t}\n\n\t\tlet tmpAnticipate = this.fable.newAnticipate();\n\n\t\ttmpAnticipate.anticipate(\n\t\t\t(fOnBeforeRenderCallback) =>\n\t\t\t{\n\t\t\t\tthis.onBeforeRender(tmpRenderable, tmpRenderDestinationAddress, tmpRecord);\n\t\t\t\tthis.onBeforeRenderAsync(fOnBeforeRenderCallback);\n\t\t\t});\n\n\t\tlet tmpContent;\n\t\ttmpAnticipate.anticipate(\n\t\t\t(fAsyncTemplateCallback) =>\n\t\t\t{\n\t\t\t\t// Render the template (asynchronously)\n\t\t\t\tthis.pict.parseTemplateByHash(tmpRenderable.TemplateHash, tmpRecord,\n\t\t\t\t\t(pError, pContent) =>\n\t\t\t\t\t{\n\t\t\t\t\t\tif (pError)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render (asynchronously) ${tmpRenderableHash} (param ${pRenderableHash}) because it did not parse the template.`, pError);\n\t\t\t\t\t\t\treturn fAsyncTemplateCallback(pError);\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttmpContent = pContent;\n\n\t\t\t\t\t\tif (this.pict.LogNoisiness > 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} Assigning Renderable[${tmpRenderableHash}] content length ${pContent.length} to Destination [${tmpRenderDestinationAddress}] using Async render method ${tmpRenderable.RenderMethod}.`);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthis.pict.ContentAssignment.projectContent(tmpRenderable.RenderMethod, tmpRenderDestinationAddress, pContent, tmpRenderable.TestAddress);\n\n\t\t\t\t\t\t// Execute the developer-overridable asynchronous post-render behavior\n\t\t\t\t\t\tthis.lastRenderedTimestamp = this.pict.log.getTimeStamp();\n\t\t\t\t\t\treturn fAsyncTemplateCallback();\n\t\t\t\t\t}, [this]);\n\t\t\t});\n\n\t\ttmpAnticipate.anticipate(\n\t\t\t(fOnAfterRenderCallback) =>\n\t\t\t{\n\t\t\t\tthis.onAfterRender(tmpRenderable, tmpRenderDestinationAddress, tmpRecord, tmpContent);\n\t\t\t\tthis.onAfterRenderAsync(fOnAfterRenderCallback);\n\t\t\t});\n\n\t\ttmpAnticipate.wait(tmpCallback);\n\t}\n\n\t/**\n\t * Renders the default renderable.\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\trenderDefaultAsync(fCallback)\n\t{\n\t\t// Render the default renderable\n\t\tthis.renderAsync(fCallback);\n\t}\n\n\t/**\n\t * @param {string} [pRenderableHash] - The hash of the renderable to render.\n\t * @param {string} [pRenderDestinationAddress] - The address where the renderable will be rendered.\n\t * @param {string|object} [pTemplateRecordAddress] - The address of (or actual obejct) where the data for the template is stored.\n\t */\n\tbasicRender(pRenderableHash, pRenderDestinationAddress, pTemplateRecordAddress)\n\t{\n\t\tlet tmpRenderOptions = this.buildRenderOptions(pRenderableHash, pRenderDestinationAddress, pTemplateRecordAddress);\n\t\tif (tmpRenderOptions.Valid)\n\t\t{\n\t\t\tthis.assignRenderContent(tmpRenderOptions.Renderable, tmpRenderOptions.DestinationAddress, this.pict.parseTemplateByHash(tmpRenderOptions.Renderable.TemplateHash, tmpRenderOptions.Record, null, [this]));\n\t\t\treturn true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not perform a basic render of ${tmpRenderOptions.RenderableHash} because it is not valid.`);\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * @param {string|ErrorCallback} [pRenderableHash] - The hash of the renderable to render.\n\t * @param {string|ErrorCallback} [pRenderDestinationAddress] - The address where the renderable will be rendered.\n\t * @param {string|Object|ErrorCallback} [pTemplateRecordAddress] - The address of (or actual obejct) where the data for the template is stored.\n\t * @param {ErrorCallback} [fCallback] - The callback to call when the async operation is complete.\n\t */\n\tbasicRenderAsync(pRenderableHash, pRenderDestinationAddress, pTemplateRecordAddress, fCallback)\n\t{\n\t\t// Allow the callback to be passed in as the last parameter no matter what\n\t\t/** @type {ErrorCallback} */\n\t\tlet tmpCallback = (typeof(fCallback) === 'function') ? fCallback :\n\t\t\t\t\t\t\t(typeof(pTemplateRecordAddress) === 'function') ? pTemplateRecordAddress :\n\t\t\t\t\t\t\t(typeof(pRenderDestinationAddress) === 'function') ? pRenderDestinationAddress :\n\t\t\t\t\t\t\t(typeof(pRenderableHash) === 'function') ? pRenderableHash :\n\t\t\t\t\t\t\tnull;\n\t\tif (!tmpCallback)\n\t\t{\n\t\t\tthis.log.warn(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.Name} basicRenderAsync was called without a valid callback.  A callback will be generated but this could lead to race conditions.`);\n\t\t\ttmpCallback = (pError) =>\n\t\t\t\t{\n\t\t\t\t\tif (pError)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.Name} basicRenderAsync Auto Callback Error: ${pError}`, pError);\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t}\n\n\t\tconst tmpRenderOptions = this.buildRenderOptions(pRenderableHash, pRenderDestinationAddress, pTemplateRecordAddress);\n\t\tif (tmpRenderOptions.Valid)\n\t\t{\n\t\t\tthis.pict.parseTemplateByHash(tmpRenderOptions.Renderable.TemplateHash, tmpRenderOptions.Record,\n\t\t\t\t/**\n\t\t\t\t * @param {Error} [pError] - The error that occurred during template parsing.\n\t\t\t\t * @param {string} [pContent] - The content that was rendered from the template.\n\t\t\t\t */\n\t\t\t\t(pError, pContent) =>\n\t\t\t\t{\n\t\t\t\t\tif (pError)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render (asynchronously) ${tmpRenderOptions.RenderableHash} because it did not parse the template.`, pError);\n\t\t\t\t\t\treturn tmpCallback(pError);\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.assignRenderContent(tmpRenderOptions.Renderable, tmpRenderOptions.DestinationAddress, pContent);\n\t\t\t\t\treturn tmpCallback();\n\t\t\t\t}, [this]);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlet tmpErrorMessage = `PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not perform a basic render of ${tmpRenderOptions.RenderableHash} because it is not valid.`;\n\t\t\tthis.log.error(tmpErrorMessage);\n\t\t\treturn tmpCallback(new Error(tmpErrorMessage));\n\t\t}\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers after the view is rendered.\n\t *\n\t * @param {Renderable} pRenderable - The renderable that was rendered.\n\t * @param {string} pRenderDestinationAddress - The address where the renderable was rendered.\n\t * @param {any} pRecord - The record (data) that was used by the renderable.\n\t * @param {string} pContent - The content that was rendered.\n\t */\n\tonAfterRender(pRenderable, pRenderDestinationAddress, pRecord, pContent)\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onAfterRender:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers after the view is rendered (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonAfterRenderAsync(fCallback)\n\t{\n\t\treturn fCallback();\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*                            Code Section: Solver                            */\n\t/* -------------------------------------------------------------------------- */\n\t/**\n\t * Lifecycle hook that triggers before the view is solved.\n\t */\n\tonBeforeSolve()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onBeforeSolve:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers before the view is solved (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonBeforeSolveAsync(fCallback)\n\t{\n\t\tthis.onBeforeSolve();\n\t\treturn fCallback();\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers when the view is solved.\n\t */\n\tonSolve()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onSolve:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers when the view is solved (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonSolveAsync(fCallback)\n\t{\n\t\tthis.onSolve();\n\t\treturn fCallback();\n\t}\n\n\t/**\n\t * Performs view solving and triggers lifecycle hooks.\n\t *\n\t * @return {boolean} - True if the view was solved successfully, false otherwise.\n\t */\n\tsolve()\n\t{\n\t\tif (this.pict.LogNoisiness > 2)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} executing solve() function...`);\n\t\t}\n\t\tthis.onBeforeSolve();\n\t\tthis.onSolve();\n\t\tthis.onAfterSolve();\n\t\tthis.lastSolvedTimestamp = this.pict.log.getTimeStamp();\n\t\treturn true;\n\t}\n\n\t/**\n\t * Performs view solving and triggers lifecycle hooks (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tsolveAsync(fCallback)\n\t{\n\t\tlet tmpAnticipate = this.pict.instantiateServiceProviderWithoutRegistration('Anticipate');\n\n\t\t/** @type {ErrorCallback} */\n\t\tlet tmpCallback = (typeof(fCallback) === 'function') ? fCallback : null;\n\t\tif (!tmpCallback)\n\t\t{\n\t\t\tthis.log.warn(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.Name} solveAsync was called without a valid callback.  A callback will be generated but this could lead to race conditions.`);\n\t\t\ttmpCallback = (pError) =>\n\t\t\t\t{\n\t\t\t\t\tif (pError)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.Name} solveAsync Auto Callback Error: ${pError}`, pError);\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t}\n\n\t\ttmpAnticipate.anticipate(this.onBeforeSolveAsync.bind(this));\n\t\ttmpAnticipate.anticipate(this.onSolveAsync.bind(this));\n\t\ttmpAnticipate.anticipate(this.onAfterSolveAsync.bind(this));\n\n\t\ttmpAnticipate.wait(\n\t\t\t(pError) =>\n\t\t\t{\n\t\t\t\tif (this.pict.LogNoisiness > 2)\n\t\t\t\t{\n\t\t\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} solveAsync() complete.`);\n\t\t\t\t}\n\t\t\t\tthis.lastSolvedTimestamp = this.pict.log.getTimeStamp();\n\t\t\t\treturn tmpCallback(pError);\n\t\t\t});\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers after the view is solved.\n\t */\n\tonAfterSolve()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onAfterSolve:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers after the view is solved (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonAfterSolveAsync(fCallback)\n\t{\n\t\tthis.onAfterSolve();\n\t\treturn fCallback();\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*                     Code Section: Marshal From View                        */\n\t/* -------------------------------------------------------------------------- */\n\t/**\n\t * Lifecycle hook that triggers before data is marshaled from the view.\n\t *\n\t * @return {boolean} - True if the operation was successful, false otherwise.\n\t */\n\tonBeforeMarshalFromView()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onBeforeMarshalFromView:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers before data is marshaled from the view (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonBeforeMarshalFromViewAsync(fCallback)\n\t{\n\t\tthis.onBeforeMarshalFromView();\n\t\treturn fCallback();\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers when data is marshaled from the view.\n\t */\n\tonMarshalFromView()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onMarshalFromView:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers when data is marshaled from the view (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonMarshalFromViewAsync(fCallback)\n\t{\n\n\t\tthis.onMarshalFromView();\n\t\treturn fCallback();\n\t}\n\n\t/**\n\t * Marshals data from the view.\n\t *\n\t * @return {boolean} - True if the operation was successful, false otherwise.\n\t */\n\tmarshalFromView()\n\t{\n\t\tif (this.pict.LogNoisiness > 2)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} executing solve() function...`);\n\t\t}\n\t\tthis.onBeforeMarshalFromView();\n\t\tthis.onMarshalFromView();\n\t\tthis.onAfterMarshalFromView();\n\t\tthis.lastMarshalFromViewTimestamp = this.pict.log.getTimeStamp();\n\t\treturn true;\n\t}\n\n\t/**\n\t * Marshals data from the view (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tmarshalFromViewAsync(fCallback)\n\t{\n\t\tlet tmpAnticipate = this.pict.instantiateServiceProviderWithoutRegistration('Anticipate');\n\n\t\t/** @type {ErrorCallback} */\n\t\tlet tmpCallback = (typeof(fCallback) === 'function') ? fCallback : null;\n\t\tif (!tmpCallback)\n\t\t{\n\t\t\tthis.log.warn(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.Name} marshalFromViewAsync was called without a valid callback.  A callback will be generated but this could lead to race conditions.`);\n\t\t\ttmpCallback = (pError) =>\n\t\t\t\t{\n\t\t\t\t\tif (pError)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.Name} marshalFromViewAsync Auto Callback Error: ${pError}`, pError);\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t}\n\n\t\ttmpAnticipate.anticipate(this.onBeforeMarshalFromViewAsync.bind(this));\n\t\ttmpAnticipate.anticipate(this.onMarshalFromViewAsync.bind(this));\n\t\ttmpAnticipate.anticipate(this.onAfterMarshalFromViewAsync.bind(this));\n\n\t\ttmpAnticipate.wait(\n\t\t\t(pError) =>\n\t\t\t{\n\t\t\t\tif (this.pict.LogNoisiness > 2)\n\t\t\t\t{\n\t\t\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} marshalFromViewAsync() complete.`);\n\t\t\t\t}\n\t\t\t\tthis.lastMarshalFromViewTimestamp = this.pict.log.getTimeStamp();\n\t\t\t\treturn tmpCallback(pError);\n\t\t\t});\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers after data is marshaled from the view.\n\t */\n\tonAfterMarshalFromView()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onAfterMarshalFromView:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers after data is marshaled from the view (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonAfterMarshalFromViewAsync(fCallback)\n\t{\n\t\tthis.onAfterMarshalFromView();\n\t\treturn fCallback();\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*                     Code Section: Marshal To View                          */\n\t/* -------------------------------------------------------------------------- */\n\t/**\n\t * Lifecycle hook that triggers before data is marshaled into the view.\n\t */\n\tonBeforeMarshalToView()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onBeforeMarshalToView:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers before data is marshaled into the view (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonBeforeMarshalToViewAsync(fCallback)\n\t{\n\t\tthis.onBeforeMarshalToView();\n\t\treturn fCallback();\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers when data is marshaled into the view.\n\t */\n\tonMarshalToView()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onMarshalToView:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers when data is marshaled into the view (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonMarshalToViewAsync(fCallback)\n\t{\n\t\tthis.onMarshalToView();\n\t\treturn fCallback();\n\t}\n\n\t/**\n\t * Marshals data into the view.\n\t *\n\t * @return {boolean} - True if the operation was successful, false otherwise.\n\t */\n\tmarshalToView()\n\t{\n\t\tif (this.pict.LogNoisiness > 2)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} executing solve() function...`);\n\t\t}\n\t\tthis.onBeforeMarshalToView();\n\t\tthis.onMarshalToView();\n\t\tthis.onAfterMarshalToView();\n\t\tthis.lastMarshalToViewTimestamp = this.pict.log.getTimeStamp();\n\t\treturn true;\n\t}\n\n\t/**\n\t * Marshals data into the view (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tmarshalToViewAsync(fCallback)\n\t{\n\t\tlet tmpAnticipate = this.pict.instantiateServiceProviderWithoutRegistration('Anticipate');\n\n\n\t\t/** @type {ErrorCallback} */\n\t\tlet tmpCallback = (typeof(fCallback) === 'function') ? fCallback : null;\n\t\tif (!tmpCallback)\n\t\t{\n\t\t\tthis.log.warn(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.Name} marshalToViewAsync was called without a valid callback.  A callback will be generated but this could lead to race conditions.`);\n\t\t\ttmpCallback = (pError) =>\n\t\t\t\t{\n\t\t\t\t\tif (pError)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.Name} marshalToViewAsync Auto Callback Error: ${pError}`, pError);\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t}\n\t\ttmpAnticipate.anticipate(this.onBeforeMarshalToViewAsync.bind(this));\n\t\ttmpAnticipate.anticipate(this.onMarshalToViewAsync.bind(this));\n\t\ttmpAnticipate.anticipate(this.onAfterMarshalToViewAsync.bind(this));\n\n\t\ttmpAnticipate.wait(\n\t\t\t(pError) =>\n\t\t\t{\n\t\t\t\tif (this.pict.LogNoisiness > 2)\n\t\t\t\t{\n\t\t\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} marshalToViewAsync() complete.`);\n\t\t\t\t}\n\t\t\t\tthis.lastMarshalToViewTimestamp = this.pict.log.getTimeStamp();\n\t\t\t\treturn tmpCallback(pError);\n\t\t\t});\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers after data is marshaled into the view.\n\t */\n\tonAfterMarshalToView()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onAfterMarshalToView:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers after data is marshaled into the view (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonAfterMarshalToViewAsync(fCallback)\n\t{\n\t\tthis.onAfterMarshalToView();\n\t\treturn fCallback();\n\t}\n\n\t/** @return {boolean} - True if the object is a PictView. */\n\tget isPictView()\n\t{\n\t\treturn true;\n\t}\n}\n\nmodule.exports = PictView;\n","module.exports={\n\t\"RenderOnLoad\": true,\n\n\t\"GridWidth\": \"auto\",\n\t\"GridRowHeight\": 40,\n\n\t\"GridBodyHeight\": \"auto\",\n\t\"GridBodyMinHeight\": 130,\n\n\t\"GridColumnMinWidth\": 50,\n\t\"GridColumnWidthResizable\": true,\n\t\"GridColumnHeightResizable\": false,\n\n\t\"GridColumnFrozenCount\": 0,\n\t\"GridColumnFrozenBorderWidth\": 3,\n\n\t\"GridScrollX\": true,\n\t\"GridScrollY\": true,\n\n\t\"GridShowDummyRows\": false,\n\t\"GridDraggableRows\": false,\n\n\t\"GridSelectionUnit\": \"cell\",\n\n\t\"DefaultRenderable\": \"TuiGrid-Wrap\",\n\t\"DefaultDestinationAddress\": \"#TuiGrid-Container-Div\",\n\n\t\"Templates\": [\n\t\t{\n\t\t\t\"Hash\": \"TuiGrid-Container\",\n\t\t\t\"Template\": \"<!-- TuiGrid-Container Rendering Soon -->\"\n\t\t}\n\t],\n\n\t\"Renderables\": [\n\t\t{\n\t\t\t\"RenderableHash\": \"TuiGrid-Wrap\",\n\t\t\t\"TemplateHash\": \"TuiGrid-Container\",\n\t\t\t\"DestinationAddress\": \"#TuiGrid-Container-Div\"\n\t\t}\n\t],\n\n\t\"TargetElementAddress\": \"#TuiGrid-Container-Div\",\n\n\t\"GridDataAddress\": false,\n\n\t\"GridData\": [\n\t\t{\n\t\t\t\"idrecord\": 1,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 1\",\n\t\t\t\"description\": \"description 1\"\n\t\t},\n\t\t{\n\t\t\t\"idrecord\": 2,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 2\",\n\t\t\t\"description\": \"description 2\"\n\t\t},\n\t\t{\n\t\t\t\"idrecord\": 3,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 3\",\n\t\t\t\"description\": \"description 3\"\n\t\t},\n\t\t{\n\t\t\t\"idrecord\": 4,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 4\",\n\t\t\t\"description\": \"description 4\"\n\t\t},\n\t\t{\n\t\t\t\"idrecord\": 5,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 5\",\n\t\t\t\"description\": \"description 5\"\n\t\t},\n\t\t{\n\t\t\t\"idrecord\": 6,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 6\",\n\t\t\t\"description\": \"description 6\"\n\t\t},\n\t\t{\n\t\t\t\"idrecord\": 7,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 7\",\n\t\t\t\"description\": \"description 7\"\n\t\t},\n\t\t{\n\t\t\t\"idrecord\": 8,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 8\",\n\t\t\t\"description\": \"description 8\"\n\t\t},\n\t\t{\n\t\t\t\"idrecord\": 9,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 9\",\n\t\t\t\"description\": \"description 9\"\n\t\t}\n\t],\n\t\"ColumnsToSolveOnChange\": {},\n\t\"TuiColumnSchema\": [\n\t\t{\n\t\t\t\"header\": \"IDRecord\",\n\t\t\t\"name\": \"idrecord\",\n\t\t\t\"PictTriggerSolveOnChange\": true\n\t\t},\n\t\t{\n\t\t\t\"header\": \"Entity\",\n\t\t\t\"name\": \"entity\",\n\t\t\t\"PictTriggerSolveOnChange\": true\n\t\t},\n\t\t{\n\t\t\t\"header\": \"Name\",\n\t\t\t\"name\": \"name\",\n\t\t\t\"editor\": \"text\"\n\t\t},\n\t\t{\n\t\t\t\"header\": \"Description\",\n\t\t\t\"name\": \"description\",\n\t\t\t\"editor\": \"text\"\n\t\t}\n\t]\n}\n","const libPictViewClass = require('pict-view');\n\n/**\n * @typedef {typeof import('tui-grid').default} TuiGridClass\n * @typedef {import('tui-grid').default} TuiGrid\n */\n\nclass PictSectionTuiGrid extends libPictViewClass\n{\n\tconstructor(pFable, pOptions, pServiceHash)\n\t{\n\t\tlet tmpOptions = Object.assign({}, require('./Pict-Section-TuiGrid-DefaultConfiguration.json'), pOptions);\n\n\t\tsuper(pFable, tmpOptions, pServiceHash);\n\n\t\t/** @type {{ [key: string]: any }} */\n\t\tthis.services;\n\t\tthis.dateFormatter = this.fable.instantiateServiceProviderWithoutRegistration('Dates');\n\n\t\tthis.initialRenderComplete = false;\n\n\t\tthis.customFormatters = {};\n\t}\n\n\tonBeforeInitialize()\n\t{\n\t\tsuper.onBeforeInitialize();\n\n\t\t/** @type {TuiGridClass} */\n\t\tthis._tuiGridPrototype = null;\n\n\t\t/** @type {TuiGrid} */\n\t\tthis.tuiGrid = null;\n\n\t\tthis.customHeaders = require('./Pict-TuiGrid-Headers.js');\n\t\tthis.customEditors = require('./Pict-TuiGrid-Editors.js');\n\t\tthis.initializeCustomFormatters();\n\n\t\tthis.columnSchema = false;\n\t\tthis.targetElementAddress = false;\n\t\t/** @type {Array<any>} */\n\t\tthis.gridData = null;\n\n\t\treturn super.onBeforeInitialize();\n\t}\n\n\tinitializeCustomFormatters()\n\t{\n\t\tthis.customFormatters.FormatterTwoDigitNumber = (pCell) =>\n\t\t\t{\n\t\t\t\tlet tmpCellValue = Number.parseFloat(pCell.value);\n\t\t\t\tlet tmpPrecision = pCell?.decimalPrecision ?? 2;\n\t\t\t\tif (isNaN(tmpCellValue))\n\t\t\t\t{\n\t\t\t\t\treturn '';\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\treturn this.fable.Math.roundPrecise(pCell.value, tmpPrecision);\n\t\t\t\t}\n\t\t\t};\n\t\tthis.customFormatters.FormatterCurrencyNumber = (pCell) =>\n\t\t\t{\n\t\t\t\tlet tmpPrecision = pCell?.decimalPrecision ?? 2;\n\t\t\t\tlet tmpCellValue = this.fable.DataFormat.formatterDollars(pCell.value, tmpPrecision);\n\t\t\t\treturn tmpCellValue;\n\t\t\t};\n\n\t\tthis.customFormatters.FormatterRoundedNumber = (pCell) =>\n\t\t\t{\n\t\t\t\tlet tmpCellValue = Number.parseFloat(pCell.value);\n\t\t\t\tlet tmpPrecision = pCell?.decimalPrecision ?? 2;\n\t\t\t\tif (isNaN(tmpCellValue))\n\t\t\t\t{\n\t\t\t\t\treturn '';\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\treturn this.fable.Math.roundPrecise(pCell.value, tmpPrecision);\n\t\t\t\t}\n\t\t\t};\n\n\t\tthis.customFormatters.FormatterDate = (pCell) =>\n\t\t\t{\n\t\t\t\tlet tmpDate = this.fable.Dates.dayJS.utc(pCell.value);\n\t\t\t\tif (pCell.dateformat)\n\t\t\t\t{\n\t\t\t\t\treturn tmpDate.format(pCell.dateformat);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\treturn tmpDate.format();\n\t\t\t\t}\n\t\t\t};\n\t}\n\n\t/**\n\t * Construct a tuiGrid instance and connect it to the browser's dom object for the grid.  If the\n\t * prototype is not passed in, try to find a window.tui (where the library puts itself) in the window\n\t * object.\n\t *\n\t * @param {TuiGridClass} [pTuiGridPrototype] - The TuiGrid prototype class expected to be loaded in the browser\n\t * @returns\n\t */\n\tconnectTuiGridPrototype(pTuiGridPrototype)\n\t{\n\t\tif (typeof (pTuiGridPrototype) != 'undefined')\n\t\t{\n\t\t\tthis._tuiGridPrototype = pTuiGridPrototype;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.log.trace(`PICT-TuiGrid No TuiGrid Prototype defined or explicitly set; looking for it in the window object.`);\n\t\t\tif (typeof (window) != 'undefined')\n\t\t\t{\n\t\t\t\tif ((typeof (window.tui) != 'undefined') && (typeof (window.tui.Grid) != 'undefined'))\n\t\t\t\t{\n\t\t\t\t\tthis.log.trace(`PICT-TuiGrid Found TuiGrid Prototype in window.tuiGrid.`);\n\t\t\t\t\tthis.connectTuiGridPrototype(window.tui.Grid);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.log.error(`PICT-TuiGrid No TuiGrid Prototype found in window.tuiGrid.`);\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.log.error(`PICT-TuiGrid No TuiGrid Prototype found in window.tuiGrid -- window object unavailable.`);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @typedef {Object} TUIGridCellChange\n\t * @property {any} rowKey - The key of the row that changed.\n\t * @property {string} columnName - The name of the column that changed.\n\t * @property {any} value - The \"current\" value of the cell. Slightly different meaning in preChangeHandler vs changeHandler (before / after the change is applied).\n\t * @property {any} [nextValue] - The value that the cell will have after the change. Only populated in preChangeHandler (not changeHandler).\n\t * @property {any} [prevValue] - The value that the cell had before the change. Only populated in changeHandler (not preChangeHandler).\n\t */\n\n\t/**\n\t * @typedef {Object} TUIGridChangeEvent\n\t * @property {TuiGrid} instance - The TuiGrid instance that fired the event.\n\t * @property {TUIGridCellChange[]} changes - An array of objects representing the changes to grid cell values.\n\t */\n\n\t/**\n\t * Interface method for handling changesets from the TuiGrid control. Invoked before the change has been applied to the affected cells.\n\t *\n\t * * The pre-change cell value is stored in value while the new cell value is stored in nextValue.\n\t * * Any changes made to nextValue in this method will be reflected in the grid for that cell.\n\t *\n\t * @param {TUIGridChangeEvent} pChangeData - An event containing an array of objects representing the changes to grid cell values.\n\t */\n\tpreChangeHandler(pChangeData)\n\t{\n\t}\n\n\t/**\n\t * Interface method for handling changesets from the TuiGrid control. Invoked after the change has been applied to the affected cells.\n\t *\n\t * * Performs solver trigger for changes to any columns configured in \"ColumnsToSolveOnChange\" or with \"PictTriggerSolveOnChange\": true on a specific row.\n\t * * The previous cell value is stored in prevValue while the next cell value is stored in value.\n\t *\n\t * @param {TUIGridChangeEvent} pChangeData - An event object containing an array of objects representing the changes to grid cell values.\n\t */\n\tchangeHandler(pChangeData)\n\t{\n\t\tlet tmpSolverNecessary = false;\n\n\t\tfor (let i = 0; i < pChangeData.changes.length; i++)\n\t\t{\n\t\t\tlet tmpEntity = pChangeData.instance.getValue(pChangeData.changes[i].rowKey, 'entity');\n\t\t\tlet tmpIDRecord = pChangeData.instance.getValue(pChangeData.changes[i].rowKey, 'idrecord');\n\n\t\t\tthis.log.trace(`Generic Change Handler for TuiGrid Fired, Entity ${tmpEntity} IDRecord ${tmpIDRecord} setting Column [${pChangeData.changes[i].value}] to new Value [${pChangeData.changes[i].value}]`);\n\n\t\t\tif (this.options.ColumnsToSolveOnChange.hasOwnProperty(pChangeData.changes[i].columnName))\n\t\t\t{\n\t\t\t\ttmpSolverNecessary = true;\n\t\t\t}\n\t\t}\n\n\t\tif (tmpSolverNecessary)\n\t\t{\n\t\t\tthis.services.PictApplication.solve();\n\t\t}\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers after the view is rendered.\n\t *\n\t * @param {import('pict-view').Renderable} pRenderable - The renderable that was rendered.\n\t * @param {string} pRenderDestinationAddress - The address where the renderable was rendered.\n\t * @param {any} pRecord - The record (data) that was used by the renderable.\n\t * @param {string} pContent - The content that was rendered.\n\t */\n\tonAfterRender(pRenderable, pRenderDestinationAddress, pRecord, pContent)\n\t{\n\t\tif (!this.initialRenderComplete)\n\t\t{\n\t\t\tthis.onAfterInitialRender();\n\t\t\tthis.initialRenderComplete = true;\n\t\t}\n\t\treturn super.onAfterRender(pRenderable, pRenderDestinationAddress, pRecord, pContent);\n\t}\n\n\tonAfterInitialRender()\n\t{\n\t\t// This is where we wire up and initialize the tuigrid control -- the initial render has put the placeholder content in place.\n\t\t// Check for a tuigrid prototype, and find it in the window object it if it doesn't exist\n\t\tif (!this._tuiGridPrototype)\n\t\t{\n\t\t\tthis.connectTuiGridPrototype();\n\t\t}\n\t\t// This is where we wire up and initialize the tuigrid control\n\t\tif (this.tuiGrid)\n\t\t{\n\t\t\t// The grid is already initialized.\n\t\t\tthis.log.error(`TuiGrid going to ${this.options.TargetElementAddress} is already initialized!`);\n\t\t\treturn false;\n\t\t}\n\n\t\tif (this.options.GridDataAddress)\n\t\t{\n\t\t\tlet tmpAddressedData = this.fable.manifest.getValueByHash(this.AppData, this.options.GridDataAddress);\n\t\t\tif (typeof (tmpAddressedData) != 'object')\n\t\t\t{\n\t\t\t\tthis.log.error(`Address for GridData [${this.options.GridDataAddress}] did not return an object; it was a ${typeof (tmpAddressedData)}.`);\n\t\t\t\tthis.gridData = [];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.gridData = JSON.parse(JSON.stringify(tmpAddressedData));\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.gridData = [];\n\t\t}\n\n\t\tlet tmpTargetElementSet = this.services.ContentAssignment.getElement(this.options.TargetElementAddress);\n\t\tif (tmpTargetElementSet.length < 1)\n\t\t{\n\t\t\tthis.log.error(`Could not find target element [${this.options.TargetElementAddress}] for TuiGrid!  Rendering won't function properly.`);\n\t\t\tthis.targetElement = false;\n\t\t\treturn false;\n\t\t}\n\n\t\t// Just go for the first one.\n\t\tthis.targetElement = tmpTargetElementSet[0];\n\n\t\t// Check to see if there are any custom formatters.\n\t\tthis.columnSchema = this.options.TuiColumnSchema;\n\t\t// Setup the solver and custom schema handlers.\n\t\tfor (let i = 0; i < this.columnSchema.length; i++)\n\t\t{\n\t\t\tlet tmpColumn = this.columnSchema[i];\n\t\t\t// If this bit is set on a column, the Form solver will trigger each time a change happens to that column.\n\t\t\tif (tmpColumn.PictTriggerSolveOnChange)\n\t\t\t{\n\t\t\t\tthis.options.ColumnsToSolveOnChange[tmpColumn.name] = tmpColumn;\n\t\t\t}\n\t\t\t// Look to see if there is an internal formatter that matches the type\n\t\t\tif ((tmpColumn.hasOwnProperty('formatter')) && (this.customFormatters.hasOwnProperty(tmpColumn.formatter)))\n\t\t\t{\n\t\t\t\t// Assign our special formatter to the column.\n\t\t\t\ttmpColumn.formatter = this.customFormatters[tmpColumn.formatter];\n\t\t\t}\n\t\t\t// Look to see if there is an editor stanza\n\t\t\tif (tmpColumn.hasOwnProperty('editor'))\n\t\t\t{\n\t\t\t\t// Look to see if there is an internal editor that matches the type\n\t\t\t\tif ((tmpColumn.editor.hasOwnProperty('type'))\n\t\t\t\t\t&& (typeof (tmpColumn.editor.type) == 'string')\n\t\t\t\t\t&& (this.customEditors.hasOwnProperty(tmpColumn.editor.type)))\n\t\t\t\t{\n\t\t\t\t\t// Assign our special editor to the column.\n\t\t\t\t\ttmpColumn.editor.type = this.customEditors[tmpColumn.editor.type];\n\t\t\t\t}\n\n\t\t\t\t// Look to see if there is an internal editor that matches the type\n\t\t\t\tif ((tmpColumn.editor.hasOwnProperty('options'))\n\t\t\t\t\t&& (typeof (tmpColumn.editor.options) == 'object')\n\t\t\t\t\t&& (tmpColumn.editor.options.hasOwnProperty('listItems'))\n\t\t\t\t\t&& (typeof (tmpColumn.editor.options.listItems) == 'string'))\n\t\t\t\t{\n\t\t\t\t\t// Look for this address!  For the Record object, we will pass in the options.\n\t\t\t\t\tlet tmpListItems = this.fable.manifest.getValueByHash({ AppData: this.AppData, Options: this.options }, tmpColumn.editor.options.listItems);\n\t\t\t\t\tif (typeof (tmpListItems) == 'object')\n\t\t\t\t\t{\n\t\t\t\t\t\ttmpColumn.editor.options.listItems = tmpListItems;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.log.warn(`Pict TuiGrid for column [${tmpColumn.name}] had [${tmpColumn.editor.options.listItems}] as a listItems address, but it didn't return an object.  It was a [${typeof (tmpListItems)}].  Setting to empty list.`);\n\t\t\t\t\t\ttmpColumn.editor.options.listItems = [];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.gridSettings = {\n\t\t\t\tdata: this.gridData,\n\t\t\t\tel: this.targetElement,\n\t\t\t\tcolumns: this.columnSchema,\n\n\t\t\t\t// This is no bueno, yo\n\t\t\t\tusageStatistics: false,\n\n\t\t\t\tscrollY: this.options.GridScrollY,\n\n\t\t\t\tcolumnOptions:\n\t\t\t\t{\n\t\t\t\t\tresizable: this.options.GridColumnWidthResizable\n\t\t\t\t}\n\t\t\t};\n\n\t\tthis.customConfigureGridSettings();\n\n\t\tlet libTuiGrid = this._tuiGridPrototype;\n\t\tthis.tuiGrid = new libTuiGrid(this.gridSettings);\n\t\tthis.tuiGrid.on('beforeChange', (pChangeData) =>\n\t\t{\n\t\t\t//TODO: the exported event type from tui-grid is incomplete so mask it here\n\t\t\t/** @type {any} */\n\t\t\tconst tmpChangeData = pChangeData;\n\t\t\tthis.preChangeHandler(tmpChangeData);\n\t\t});\n\t\tthis.tuiGrid.on('afterChange', (pChangeData) =>\n\t\t{\n\t\t\t//TODO: the exported event type from tui-grid is incomplete so mask it here\n\t\t\t/** @type {any} */\n\t\t\tconst tmpChangeData = pChangeData;\n\t\t\tthis.changeHandler(tmpChangeData);\n\t\t});\n\t}\n\n\t/**\n\t * This is expected to be overloaded with anything that needs to be added to the grid configuration\n\t * before the Toast UI Grid component is initialized in the browser.\n\t */\n\tcustomConfigureGridSettings ()\n\t{\n\t\t// This can be overloaded to tweak up the this.gridSettings\n\t}\n\n\t/**\n\t * Lookup a specific record in the toast ui grid data set by value and pull the value from the map into the browser.\n\t *\n\t * This function exists because if we mutate data in the map of plain javascript records tuigrid\n\t * manages, it doesn't automatically refresh the UI.  From reading the TUIGrid documentation, this\n\t * is because they don't want to refresh until all the data has changed.\n\t *\n\t * The best practice has been to have a hidden column behind the tuigrid that maps the correct entity\n\t * value set to the record in the map (e.g. IDRecord in one column and Entity in another).\n\t *\n\t * @param {string} pCellColumnToBeSet - the Column hash to set\n\t * @param {string} pCellValueToSet - Value to be set\n\t * @param {string} pLookupValue - the Value to look up in tuigrid\n\t * @param {string} pLookupColumn - the key of the column in the tuigrid record (which are plain javascript objects defined by the tuigrid config)\n\t * @return {void}\n\t */\n\tSetGridValue(pCellColumnToBeSet, pCellValueToSet, pLookupValue, pLookupColumn)\n\t{\n\t\tif (typeof (pLookupValue) == 'undefined')\n\t\t{\n\t\t\tconsole.log(`Could not set grid value [${pCellColumnToBeSet}] = [${pCellValueToSet}] looked up by [${pLookupColumn}]::[${pLookupValue}].  No valid lookup value!`);\n\t\t\treturn;\n\t\t}\n\n\t\tif (!this.tuiGrid)\n\t\t{\n\t\t\tthis.log.warn(`Could not set grid value [${pCellColumnToBeSet}] = [${pCellValueToSet}] looked up by [${pLookupColumn}]::[${pLookupValue}].  No valid grid!`);\n\t\t\treturn;\n\t\t}\n\n\t\tconst tmpData = this.tuiGrid.getData();\n\n\t\tfor (let i = 0; i < tmpData.length; i++)\n\t\t{\n\t\t\tconst tmpRecord = tmpData[i];\n\n\t\t\tif (tmpRecord[pLookupColumn] == pLookupValue)\n\t\t\t{\n\t\t\t\tthis.tuiGrid.setValue(i, pCellColumnToBeSet, pCellValueToSet);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Lookup a specific record in the toast ui grid data set by row key and pull in a column.\n\t *\n\t * This function exists because if we mutate data in the map of plain javascript records tuigrid\n\t * manages, it doesn't automatically refresh the UI.  From reading the TUIGrid documentation, this\n\t * is because they don't want to refresh until all the data has changed.\n\t *\n\t *\n\t * @param {string} pCellColumnToBeSet - the Column hash to set\n\t * @param {string} pCellValueToSet - Value to be set\n\t * @param {string} pRowKey - the key of the row to be set\n\t * @return {boolean}\n\t */\n\tSetGridValueByRowKey(pCellColumnToBeSet, pCellValueToSet, pRowKey)\n\t{\n\t\tif (typeof (pRowKey) == 'undefined')\n\t\t{\n\t\t\tthis.log.error(`Could not set grid value [${pCellColumnToBeSet}] = [${pCellValueToSet}] looked up by row key [${pRowKey}].  No valid row key!`);\n\t\t\treturn false;\n\t\t}\n\n\t\tif (!this.tuiGrid)\n\t\t{\n\t\t\tthis.log.warn(`Could not set grid value [${pCellColumnToBeSet}] = [${pCellValueToSet}] looked up by row key [${pRowKey}].  No valid grid!`);\n\t\t\treturn false;\n\t\t}\n\n\t\tthis.tuiGrid.setValue(pRowKey, pCellColumnToBeSet, pCellValueToSet);\n\t\treturn true;\n\t}\n}\n\nmodule.exports = PictSectionTuiGrid;\n\nmodule.exports.default_configuration = require('./Pict-Section-TuiGrid-DefaultConfiguration.json');\n","// Custom number editor class with an option for precision\nclass tuiCustomEditorNumber\n{\n\tconstructor(pProperties)\n\t{\n\t\tconst tmpElement = document.createElement('input');\n\n\t\tconst decimalPrecision = (pProperties.columnInfo.editor.options.decimalPrecision) ? pProperties.columnInfo.editor.options.decimalPrecision : 3;\n\n\t\ttmpElement.type = 'number';\n\t\ttmpElement.value = String(pProperties.value);\n\t\ttmpElement.oninput = (pElement) =>\n\t\t{\n\t\t\tif (pElement.target instanceof HTMLInputElement)\n\t\t\t{\n\t\t\t\tconst tmpCastNumber = parseFloat(pElement.target.value).toFixed(decimalPrecision).toString()\n\t\t\t\tif (tmpCastNumber.length < parseFloat(pElement.target.value).toString().length)\n\t\t\t\t{\n\t\t\t\t\tpElement.target.value = tmpCastNumber;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tthis.Element = tmpElement;\n\t}\n\n\tgetElement()\n\t{\n\t\treturn this.Element;\n\t}\n\n\tgetValue()\n\t{\n\t\treturn this.Element.value;\n\t}\n\n\tmounted()\n\t{\n\t\tthis.Element.select();\n\t}\n}\n\nmodule.exports = tuiCustomEditorNumber;\n","// Custom number editor class with an option for precision\nclass tuiCustomEditorText\n{\n\tconstructor(pProperties)\n\t{\n\t\tconst tmpElement = document.createElement('input');\n\n\t\ttmpElement.type = 'text';\n\t\ttmpElement.value = String(pProperties.value);\n\t\ttmpElement.placeholder =  pProperties.columnInfo.editor.options.placeholder || '';\n\t\ttmpElement.pattern = pProperties.columnInfo.editor.options.pattern || '';\n\t\ttmpElement.minLength = pProperties.columnInfo.editor.options.minLength || '';\n\t\ttmpElement.maxLength = pProperties.columnInfo.editor.options.maxLength || '';\n\t\ttmpElement.required = pProperties.columnInfo.editor.options.required || '';\n\n\t\tthis.Element = tmpElement;\n\t}\n\n\tgetElement()\n\t{\n\t\treturn this.Element;\n\t}\n\n\tgetValue()\n\t{\n\t\treturn this.Element.value;\n\t}\n\n\tmounted()\n\t{\n\t\tthis.Element.select();\n\t}\n}\n\nmodule.exports = tuiCustomEditorText;\n","module.exports =\n{\n\tEditorNumber: require('./Pict-TuiGrid-Editor-Number.js'),\n\tEditorText: require('./Pict-TuiGrid-Editor-Text.js'),\n};\n","// Custom column header where the header is hidden\nclass tuiCustomColumnHeaderNone\n{\n\tconstructor()\n\t{\n\t\tlet tmpElement = document.createElement('input');\n\t\ttmpElement.type = 'hidden';\n\t\ttmpElement.value = '';\n\t\tthis.Element = tmpElement;\n\t}\n\n\tgetElement()\n\t{\n\t\treturn this.Element;\n\t}\n\n\trender()\n\t{\n\t\t// Noop!\n\t}\n}\n\nmodule.exports =\n{\n\tCustomColumnHeaderNone: tuiCustomColumnHeaderNone,\n};\n"]}