{"version":3,"sources":["pict-section-tuigrid.min.js","node_modules/browser-pack/_prelude.js","node_modules/fable-serviceproviderbase/source/Fable-ServiceProviderBase.js","node_modules/pict-view/source/Pict-View.js","source/Pict-Section-TuiGrid-DefaultConfiguration.json","source/Pict-Section-TuiGrid.js","source/Pict-TuiGrid-Editor-Number.js","source/Pict-TuiGrid-Editors.js","source/Pict-TuiGrid-Formatters.js","source/Pict-TuiGrid-Headers.js"],"names":["_defineProperty","obj","key","value","_toPropertyKey","Object","defineProperty","enumerable","configurable","writable","t","i","_toPrimitive","r","e","Symbol","toPrimitive","call","TypeError","String","Number","f","exports","module","define","amd","window","global","self","this","PictSectionTuigrid","n","o","c","require","u","a","Error","code","p","length","FableServiceProviderBase","constructor","pFable","pOptions","pServiceHash","isFable","connectFable","fable","UUID","getUUID","options","concat","Math","floor","random","serviceType","Hash","tmpErrorMessage","console","log","Logging","services","servicesMap","CoreServiceProviderBase","libFableServiceBase","defaultPictViewSettings","DefaultRenderable","DefaultDestinationAddress","DefaultTemplateRecordAddress","ViewIdentifier","AutoInitialize","AutoInitializeOrdinal","AutoRender","AutoRenderOrdinal","AutoSolveWithApp","AutoSolveOrdinal","CSSHash","CSS","CSSProvider","CSSPriority","Templates","DefaultTemplates","Renderables","Manifests","super","assign","JSON","parse","stringify","pict","AppData","initializeTimestamp","lastSolvedTimestamp","lastRenderedTimestamp","lastMarshalFromViewTimestamp","lastMarshalToViewTimestamp","tmpTemplate","hasOwnProperty","Source","TemplateProvider","addTemplate","Template","error","tmpDefaultTemplate","addDefaultTemplate","Prefix","Postfix","tmpCSSHash","tmpCSSProvider","CSSMap","addCSS","renderables","addRenderable","pRenderableHash","pTemplateHash","pDefaultTemplateDataAddress","pDefaultDestinationAddress","pRenderMethod","tmpRenderable","RenderableHash","TemplateHash","DefaultTemplateDataAddress","RenderMethod","LogNoisiness","trace","onBeforeInitialize","onBeforeInitializeAsync","fCallback","onInitialize","onInitializeAsync","initialize","LogControlFlow","warn","onAfterInitialize","getTimeStamp","initializeAsync","tmpAnticipate","instantiateServiceProviderWithoutRegistration","info","anticipate","bind","onAfterInitializeAsync","wait","pError","onBeforeRender","pRenderable","pRenderDestinationAddress","pData","onBeforeRenderAsync","render","pTemplateDataAddress","tmpRenderableHash","tmpDataAddress","tmpData","tmpRenderDestinationAddress","ContentDestinationAddress","DataProvider","getDataByAddress","undefined","tmpContent","parseTemplateByHash","ContentAssignment","appendContent","prependContent","getElement","assignContent","onAfterRender","renderAsync","newAnticipate","fOnBeforeRenderCallback","fAsyncTemplateCallback","pContent","fOnAfterRenderCallback","onAfterRenderAsync","renderDefaultAsync","onBeforeSolve","onBeforeSolveAsync","onSolve","onSolveAsync","solve","onAfterSolve","solveAsync","onAfterSolveAsync","onBeforeMarshalFromView","onBeforeMarshalFromViewAsync","onMarshalFromView","onMarshalFromViewAsync","marshalFromView","onAfterMarshalFromView","marshalFromViewAsync","onAfterMarshalFromViewAsync","onBeforeMarshalToView","onBeforeMarshalToViewAsync","onMarshalToView","onMarshalToViewAsync","marshalToView","onAfterMarshalToView","marshalToViewAsync","onAfterMarshalToViewAsync","RenderOnLoad","GridWidth","GridRowHeight","GridBodyHeight","GridBodyMinHeight","GridColumnMinWidth","GridColumnWidthResizable","GridColumnHeightResizable","GridColumnFrozenCount","GridColumnFrozenBorderWidth","GridScrollX","GridScrollY","GridShowDummyRows","GridDraggableRows","GridSelectionUnit","DestinationAddress","TargetElementAddress","GridDataAddress","GridData","idrecord","entity","name","description","ColumnsToSolveOnChange","TuiColumnSchema","header","PictTriggerSolveOnChange","editor","libPictViewClass","initialRenderComplete","_tuiGridPrototype","tuiGrid","customHeaders","customEditors","customFormatters","columnSchema","targetElementAddress","gridData","connectTuiGridPrototype","pTuiGridPrototype","tui","Grid","preChangeHandler","pChangeData","changeHandler","tmpSolverNecessary","changes","tmpEntity","instance","getValue","rowKey","tmpIDRecord","columnName","PictApplication","onAfterInitialRender","tmpAddressedData","manifest","getValueByHash","tmpTargetElementSet","targetElement","tmpColumn","formatter","type","listItems","tmpListItems","Options","gridSettings","data","el","columns","usageStatistics","scrollY","columnOptions","resizable","customConfigureGridSettings","libTuiGrid","on","SetGridValue","pCellColumnToBeSet","pCellValueToSet","pLookupValue","pLookupColumn","getData","setValue","SetGridValueByRowKey","pRowKey","default_configuration","pProperties","tmpElement","document","createElement","decimalPrecision","columnInfo","oninput","pElement","tmpCastNumber","parseFloat","target","toFixed","toString","Element","mounted","select","tuiGridHeaders","EditorNumber","tuiGridFormatters","pCell","tmpCellValue","isNaN","FormatterTwoDigitNumber","CustomColumnHeaderNone"],"mappings":"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","file":"pict-section-tuigrid.min.js","sourcesContent":["(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.PictSectionTuigrid = f()}})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){\n/**\n* Fable Service Base\n* @author <steven@velozo.com>\n*/\n\nclass FableServiceProviderBase\n{\n\t// The constructor can be used in two ways:\n\t// 1) With a fable, options object and service hash (the options object and service hash are optional)\n\t// 2) With an object or nothing as the first parameter, where it will be treated as the options object\n\tconstructor(pFable, pOptions, pServiceHash)\n\t{\n\t\t// Check if a fable was passed in; connect it if so\n\t\tif ((typeof(pFable) === 'object') && pFable.isFable)\n\t\t{\n\t\t\tthis.connectFable(pFable);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.fable = false;\n\t\t}\n\n\t\t// initialize options and UUID based on whether the fable was passed in or not.\n\t\tif (this.fable)\n\t\t{\n\t\t\tthis.UUID = pFable.getUUID();\n\t\t\tthis.options = (typeof(pOptions) === 'object') ? pOptions\n\t\t\t\t\t\t\t: {};\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// With no fable, check to see if there was an object passed into either of the first two\n\t\t\t// Parameters, and if so, treat it as the options object\n\t\t\tthis.options = ((typeof(pFable) === 'object') && !pFable.isFable) ? pFable\n\t\t\t\t\t\t\t: (typeof(pOptions) === 'object') ? pOptions\n\t\t\t\t\t\t\t: {};\n\t\t\tthis.UUID = `CORE-SVC-${Math.floor((Math.random() * (99999 - 10000)) + 10000)}`\n\t\t}\n\n\t\t// It's expected that the deriving class will set this\n\t\tthis.serviceType = `Unknown-${this.UUID}`;\n\n\t\t// The service hash is used to identify the specific instantiation of the service in the services map\n\t\tthis.Hash = (typeof(pServiceHash) === 'string') ? pServiceHash \n\t\t\t\t\t: (!this.fable && (typeof(pOptions) === 'string')) ? pOptions\n\t\t\t\t\t: `${this.UUID}`;\n\t}\n\n\tconnectFable(pFable)\n\t{\n\t\tif ((typeof(pFable) !== 'object') || (!pFable.isFable))\n\t\t{\n\t\t\tlet tmpErrorMessage = `Fable Service Provider Base: Cannot connect to Fable, invalid Fable object passed in.  The pFable parameter was a [${typeof(pFable)}].}`;\n\t\t\tconsole.log(tmpErrorMessage);\n\t\t\treturn new Error(tmpErrorMessage);\n\t\t}\n\n\t\tif (!this.fable)\n\t\t{\n\t\t\tthis.fable = pFable;\n\t\t}\n\n\t\tif (!this.log)\n\t\t{\n\t\t\tthis.log = this.fable.Logging;\n\t\t}\n\t\tif (!this.services)\n\t\t{\n\t\t\tthis.services = this.fable.services;\n\t\t}\n\n\t\tif (!this.servicesMap)\n\t\t{\n\t\t\tthis.servicesMap = this.fable.servicesMap;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tstatic isFableService = true;\n}\n\nmodule.exports = FableServiceProviderBase;\n\n// This is left here in case we want to go back to having different code/base class for \"core\" services\nmodule.exports.CoreServiceProviderBase = FableServiceProviderBase;\n},{}],2:[function(require,module,exports){\nconst libFableServiceBase = require('fable-serviceproviderbase');\n\nconst defaultPictViewSettings = (\n\t{\n\t\tDefaultRenderable: false,\n\t\tDefaultDestinationAddress: false,\n\t\tDefaultTemplateRecordAddress: false,\n\n\t\tViewIdentifier: false,\n\n\t\t// If this is set to true, when the App initializes this will.\n\t\t// After the App initializes, initialize will be called as soon as it's added.\n\t\tAutoInitialize: true,\n\t\tAutoInitializeOrdinal: 0,\n\n\t\t// If this is set to true, when the App autorenders (on load) this will.\n\t\t// After the App initializes, render will be called as soon as it's added.\n\t\tAutoRender: true,\n\t\tAutoRenderOrdinal: 0,\n\n\t\tAutoSolveWithApp: true,\n\t\tAutoSolveOrdinal: 0,\n\n\t\tCSSHash: false,\n\t\tCSS: false,\n\t\tCSSProvider: false,\n\t\tCSSPriority: 500,\n\n\t\tTemplates: [],\n\n\t\tDefaultTemplates: [],\n\n\t\tRenderables: [],\n\n\t\tManifests: {}\n\t});\n\nclass PictView extends libFableServiceBase\n{\n\tconstructor(pFable, pOptions, pServiceHash)\n\t{\n\t\t// Intersect default options, parent constructor, service information\n\t\tlet tmpOptions = Object.assign({}, JSON.parse(JSON.stringify(defaultPictViewSettings)), pOptions);\n\t\tsuper(pFable, tmpOptions, pServiceHash);\n\t\tif (!this.options.ViewIdentifier)\n\t\t{\n\t\t\tthis.options.ViewIdentifier = `AutoViewID-${this.fable.getUUID()}`;\n\t\t}\n\t\tthis.serviceType = 'PictView';\n\t\t// Convenience and consistency naming\n\t\tthis.pict = this.fable;\n\t\t// Wire in the essential Pict application state\n\t\tthis.AppData = this.pict.AppData;\n\n\t\tthis.initializeTimestamp = false;\n\t\tthis.lastSolvedTimestamp = false;\n\t\tthis.lastRenderedTimestamp = false;\n\t\tthis.lastMarshalFromViewTimestamp = false;\n\t\tthis.lastMarshalToViewTimestamp = false;\n\n\t\t// Load all templates from the array in the options\n\t\t// Templates are in the form of {Hash:'Some-Template-Hash',Template:'Template content',Source:'TemplateSource'}\n\t\tfor (let i = 0; i < this.options.Templates.length; i++)\n\t\t{\n\t\t\tlet tmpTemplate = this.options.Templates[i];\n\n\t\t\tif (!tmpTemplate.hasOwnProperty('Hash') || !tmpTemplate.hasOwnProperty('Template'))\n\t\t\t{\n\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not load Template ${i} in the options array.`, tmpTemplate);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (!tmpTemplate.Source)\n\t\t\t\t{\n\t\t\t\t\ttmpTemplate.Source = `PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} options object.`;\n\t\t\t\t}\n\t\t\t\tthis.pict.TemplateProvider.addTemplate(tmpTemplate.Hash, tmpTemplate.Template, tmpTemplate.Source);\n\t\t\t}\n\t\t}\n\n\t\t// Load all default templates from the array in the options\n\t\t// Templates are in the form of {Prefix:'',Postfix:'-List-Row',Template:'Template content',Source:'TemplateSourceString'}\n\t\tfor (let i = 0; i < this.options.DefaultTemplates.length; i++)\n\t\t{\n\t\t\tlet tmpDefaultTemplate = this.options.DefaultTemplates[i];\n\n\t\t\tif (!tmpDefaultTemplate.hasOwnProperty('Postfix') || !tmpDefaultTemplate.hasOwnProperty('Template'))\n\t\t\t{\n\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not load Default Template ${i} in the options array.`, tmpDefaultTemplate);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (!tmpDefaultTemplate.Source)\n\t\t\t\t{\n\t\t\t\t\ttmpDefaultTemplate.Source = `PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} options object.`;\n\t\t\t\t}\n\t\t\t\tthis.pict.TemplateProvider.addDefaultTemplate(tmpDefaultTemplate.Prefix, tmpDefaultTemplate.Postfix, tmpDefaultTemplate.Template, tmpDefaultTemplate.Source);\n\t\t\t}\n\t\t}\n\n\t\t// Load the CSS if it's available\n\t\tif (this.options.CSS)\n\t\t{\n\t\t\tlet tmpCSSHash = this.options.CSSHash ? this.options.CSSHash : `View-${this.options.ViewIdentifier}`;\n\t\t\tlet tmpCSSProvider = this.options.CSSProvider ? this.options.CSSProvider : tmpCSSHash;\n\t\t\tthis.pict.CSSMap.addCSS(tmpCSSHash, this.options.CSS, tmpCSSProvider, this.options.CSSPriority);\n\t\t}\n\n\t\t// Load all renderables\n\t\t// Renderables are launchable renderable instructions with templates\n\t\t// They look as such: {Identifier:'ContentEntry', TemplateHash:'Content-Entry-Section-Main', ContentDestinationAddress:'#ContentSection', RecordAddress:'AppData.Content.DefaultText', ManifestTransformation:'ManyfestHash', ManifestDestinationAddress:'AppData.Content.DataToTransformContent'}\n\t\t// The only parts that are necessary are Identifier and Template\n\t\t// A developer can then do render('ContentEntry') and it just kinda works.  Or they can override the ContentDestinationAddress\n\t\tthis.renderables = {};\n\t\tfor (let i = 0; i < this.options.Renderables.length; i++)\n\t\t{\n\t\t\tlet tmpRenderable = this.options.Renderables[i];\n\t\t\tthis.addRenderable(this.options.Renderables[i]);\n\t\t}\n\t}\n\n\taddRenderable(pRenderableHash, pTemplateHash, pDefaultTemplateDataAddress, pDefaultDestinationAddress, pRenderMethod)\n\t{\n\t\tlet tmpRenderable = false;\n\n\t\tif (typeof(pRenderableHash) == 'object')\n\t\t{\n\t\t\t// The developer passed in the renderable as an object.\n\t\t\t// Use theirs instead!\n\t\t\ttmpRenderable = pRenderableHash;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlet tmpRenderMethod = (typeof(pRenderMethod) !== 'string') ? pRenderMethod : 'replace';\n\t\t\ttmpRenderable = (\n\t\t\t\t{\n\t\t\t\t\tRenderableHash: pRenderableHash,\n\t\t\t\t\tTemplateHash: pTemplateHash,\n\t\t\t\t\tDefaultTemplateDataAddress: pDefaultTemplateDataAddress,\n\t\t\t\t\tDefaultDestinationAddress: pDefaultDestinationAddress,\n\t\t\t\t\tRenderMethod: tmpRenderMethod\n\t\t\t\t});\n\t\t}\n\n\t\tif ((typeof(tmpRenderable.RenderableHash) != 'string') || (typeof(tmpRenderable.TemplateHash) != 'string'))\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not load Renderable; RenderableHash or TemplateHash are invalid.`, tmpRenderable);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (this.pict.LogNoisiness > 0)\n\t\t\t{\n\t\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} adding renderable [${tmpRenderable.RenderableHash}] pointed to template ${tmpRenderable.TemplateHash}.`);\n\t\t\t}\n\n\t\t\tthis.renderables[tmpRenderable.RenderableHash] = tmpRenderable;\n\t\t}\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*                        Code Section: Initialization                        */\n\t/* -------------------------------------------------------------------------- */\n\tonBeforeInitialize()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onBeforeInitialize:`);\n\t\t}\n\t\treturn true;\n\t}\n\tonBeforeInitializeAsync(fCallback)\n\t{\n\t\tthis.onBeforeInitialize();\n\t\treturn fCallback();\n\t}\n\n\tonInitialize()\n\t{\n\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onInitialize:`);\n\t\t}\n\t\treturn true;\n\t}\n\tonInitializeAsync(fCallback)\n\t{\n\t\tthis.onInitialize();\n\t\treturn fCallback();\n\t}\n\n\tinitialize()\n\t{\n\t\tif (this.pict.LogControlFlow)\n\t\t{\n\t\t\tthis.log.trace(`PICT-ControlFlow VIEW [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} initialize:`);\n\t\t}\n\n\t\tif (!this.initializeTimestamp)\n\t\t{\n\t\t\tthis.onBeforeInitialize();\n\t\t\tthis.onInitialize();\n\t\t\tthis.onAfterInitialize();\n\t\t\tthis.initializeTimestamp = this.pict.log.getTimeStamp();\n\t\t\treturn true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.log.warn(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} initialize called but initialization is already completed.  Aborting.`);\n\t\t\treturn false;\n\t\t}\n\t}\n\tinitializeAsync(fCallback)\n\t{\n\t\tif (this.pict.LogControlFlow)\n\t\t{\n\t\t\tthis.log.trace(`PICT-ControlFlow VIEW [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} initializeAsync:`);\n\t\t}\n\n\t\tif (!this.initializeTimestamp)\n\t\t{\n\t\t\tlet tmpAnticipate = this.pict.instantiateServiceProviderWithoutRegistration('Anticipate');\n\n\t\t\tif (this.pict.LogNoisiness > 0)\n\t\t\t{\n\t\t\t\tthis.log.info(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} beginning initialization...`);\n\t\t\t}\n\n\t\t\ttmpAnticipate.anticipate(this.onBeforeInitializeAsync.bind(this));\n\t\t\ttmpAnticipate.anticipate(this.onInitializeAsync.bind(this));\n\t\t\ttmpAnticipate.anticipate(this.onAfterInitializeAsync.bind(this));\n\n\t\t\ttmpAnticipate.wait(\n\t\t\t\t(pError) =>\n\t\t\t\t{\n\t\t\t\t\tthis.initializeTimestamp = this.pict.log.getTimeStamp();\n\t\t\t\t\tif (this.pict.LogNoisiness > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.log.info(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} initialization complete.`);\n\t\t\t\t\t}\n\t\t\t\t\treturn fCallback();\n\t\t\t\t})\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.log.warn(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} async initialize called but initialization is already completed.  Aborting.`);\n\t\t\t// TODO: Should this be an error?\n\t\t\treturn fCallback();\n\t\t}\n\t}\n\n\tonAfterInitialize()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onAfterInitialize:`);\n\t\t}\n\t\treturn true;\n\t}\n\tonAfterInitializeAsync(fCallback)\n\t{\n\t\tthis.onAfterInitialize();\n\t\treturn fCallback();\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*                            Code Section: Render                            */\n\t/* -------------------------------------------------------------------------- */\n\tonBeforeRender(pRenderable, pRenderDestinationAddress, pData)\n\t{\n\t\t// Overload this to mess with stuff before the content gets generated from the template\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onBeforeRender:`);\n\t\t}\n\t\treturn true;\n\t}\n\tonBeforeRenderAsync(fCallback)\n\t{\n\t\treturn fCallback();\n\t}\n\n\trender(pRenderable, pRenderDestinationAddress, pTemplateDataAddress)\n\t{\n\t\tlet tmpRenderableHash = (typeof (pRenderable) === 'string') ? pRenderable :\n\t\t\t(typeof (this.options.DefaultRenderable) == 'string') ? this.options.DefaultRenderable : false;\n\t\tif (!tmpRenderableHash)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderable}) because it is not a valid renderable.`);\n\t\t\treturn false;\n\t\t}\n\n\t\tlet tmpRenderable = this.renderables[tmpRenderableHash];\n\n\t\tif (!tmpRenderable)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderable}) because it does not exist.`);\n\t\t\treturn false;\n\t\t}\n\n\t\tlet tmpRenderDestinationAddress = (typeof (pRenderDestinationAddress) === 'string') ? pRenderDestinationAddress :\n\t\t\t(typeof (tmpRenderable.ContentDestinationAddress) === 'string') ? tmpRenderable.ContentDestinationAddress :\n\t\t\t\t(typeof (this.options.DefaultDestinationAddress) === 'string') ? this.options.DefaultDestinationAddress : false;\n\n\t\tif (!tmpRenderDestinationAddress)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderable}) because it does not have a valid destination address.`);\n\t\t\treturn false;\n\t\t}\n\n\t\tlet tmpDataAddress;\n\t\tlet tmpData;\n\n\t\tif (typeof(pTemplateDataAddress) === 'object')\n\t\t{\n\t\t\ttmpData = pTemplateDataAddress;\n\t\t\ttmpDataAddress = 'Passed in as object';\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttmpDataAddress = (typeof (pTemplateDataAddress) === 'string') ? pTemplateDataAddress :\n\t\t\t\t(typeof (tmpRenderable.DefaultTemplateRecordAddress) === 'string') ? tmpRenderable.DefaultTemplateRecordAddress :\n\t\t\t\t\t(typeof (this.options.DefaultTemplateRecordAddress) === 'string') ? this.options.DefaultTemplateRecordAddress : false;\n\n\t\t\ttmpData = (typeof (tmpDataAddress) === 'string') ? this.pict.DataProvider.getDataByAddress(tmpDataAddress) : undefined;\n\t\t}\n\n\t\t// Execute the developer-overridable pre-render behavior\n\t\tthis.onBeforeRender(tmpRenderable, tmpRenderDestinationAddress, tmpData);\n\n\t\tif (this.pict.LogControlFlow)\n\t\t{\n\t\t\tthis.log.trace(`PICT-ControlFlow VIEW [${this.UUID}]::[${this.Hash}] Renderable[${tmpRenderableHash}] Destination[${tmpRenderDestinationAddress}] TemplateDataAddress[${tmpDataAddress}] render:`);\n\t\t}\n\n\t\t// Generate the content output from the template and data\n\t\tlet tmpContent = this.pict.parseTemplateByHash(tmpRenderable.TemplateHash, tmpData)\n\n\t\t// Assign the content to the destination address\n\t\tswitch(tmpRenderable.RenderMethod)\n\t\t{\n\t\t\tcase 'append':\n\t\t\t\tthis.pict.ContentAssignment.appendContent(tmpRenderDestinationAddress, tmpContent);\n\t\t\t\tbreak;\n\t\t\tcase 'prepend':\n\t\t\t\tthis.pict.ContentAssignment.prependContent(tmpRenderDestinationAddress, tmpContent);\n\t\t\t\tbreak;\n\t\t\tcase 'append_once':\n\t\t\t\t// Try to find the content in the destination address\n\t\t\t\tlet tmpExistingContent = this.pict.ContentAssignment.getElement(`#${tmpRenderableHash}`);\n\t\t\t\tif (tmpExistingContent.length < 1)\n\t\t\t\t{\n\t\t\t\t\tthis.pict.ContentAssignment.appendContent(tmpRenderDestinationAddress, tmpContent);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'replace':\n\t\t\t\t// TODO: Should this be the default?\n\t\t\tdefault:\n\t\t\t\tthis.pict.ContentAssignment.assignContent(tmpRenderDestinationAddress, tmpContent);\n\t\t\t\tbreak;\n\t\t}\n\n\t\t// Execute the developer-overridable post-render behavior\n\t\tthis.onAfterRender(tmpRenderable, tmpRenderDestinationAddress, tmpData, tmpContent)\n\n\t\tthis.lastRenderedTimestamp = this.pict.log.getTimeStamp();\n\n\t\treturn true;\n\t}\n\trenderAsync(pRenderable, pRenderDestinationAddress, pTemplateDataAddress, fCallback)\n\t{\n\t\tlet tmpRenderableHash = (typeof (pRenderable) === 'string') ? pRenderable :\n\t\t\t(typeof (this.options.DefaultRenderable) == 'string') ? this.options.DefaultRenderable : false;\n\t\tif (!tmpRenderableHash)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not asynchronously render ${tmpRenderableHash} (param ${pRenderable}because it is not a valid renderable.`);\n\t\t\treturn fCallback(Error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not asynchronously render ${tmpRenderableHash} (param ${pRenderable}because it is not a valid renderable.`));\n\t\t}\n\n\t\tlet tmpRenderable = this.renderables[tmpRenderableHash];\n\n\t\tif (!tmpRenderable)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderable}) because it does not exist.`);\n\t\t\treturn fCallback(Error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderable}) because it does not exist.`));\n\t\t}\n\n\t\tlet tmpRenderDestinationAddress = (typeof (pRenderDestinationAddress) === 'string') ? pRenderDestinationAddress :\n\t\t\t(typeof (tmpRenderable.ContentDestinationAddress) === 'string') ? tmpRenderable.ContentDestinationAddress :\n\t\t\t\t(typeof (this.options.DefaultDestinationAddress) === 'string') ? this.options.DefaultDestinationAddress : false;\n\n\t\tif (!tmpRenderDestinationAddress)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderable}) because it does not have a valid destination address.`);\n\t\t\treturn fCallback(Error(`Could not render ${tmpRenderableHash}`));\n\t\t}\n\n\t\tlet tmpDataAddress;\n\t\tlet tmpData;\n\n\t\tif (typeof(pTemplateDataAddress) === 'object')\n\t\t{\n\t\t\ttmpData = pTemplateDataAddress;\n\t\t\ttmpDataAddress = 'Passed in as object';\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttmpDataAddress = (typeof (pTemplateDataAddress) === 'string') ? pTemplateDataAddress :\n\t\t\t\t(typeof (tmpRenderable.DefaultTemplateRecordAddress) === 'string') ? tmpRenderable.DefaultTemplateRecordAddress :\n\t\t\t\t\t(typeof (this.options.DefaultTemplateRecordAddress) === 'string') ? this.options.DefaultTemplateRecordAddress : false;\n\n\t\t\ttmpData = (typeof (tmpDataAddress) === 'string') ? this.pict.DataProvider.getDataByAddress(tmpDataAddress) : undefined;\n\t\t}\n\n\t\tif (this.pict.LogControlFlow)\n\t\t{\n\t\t\tthis.log.trace(`PICT-ControlFlow VIEW [${this.UUID}]::[${this.Hash}] Renderable[${tmpRenderableHash}] Destination[${tmpRenderDestinationAddress}] TemplateDataAddress[${tmpDataAddress}] renderAsync:`);\n\t\t}\n\t\tif (this.pict.LogNoisiness > 2)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} Beginning Asynchronous Render (callback-style)...`);\n\t\t}\n\t\tif (this.pict.LogNoisiness > 4)\n\t\t{\n\t\t\tthis.log.trace(`At-render AppData: `, this.AppData);\n\t\t}\n\n\n\t\tlet tmpAnticipate = this.fable.newAnticipate();\n\n\t\ttmpAnticipate.anticipate(\n\t\t\t(fOnBeforeRenderCallback) =>\n\t\t\t{\n\t\t\t\tthis.onBeforeRender(tmpRenderable, tmpRenderDestinationAddress, tmpData);\n\t\t\t\tthis.onBeforeRenderAsync(fOnBeforeRenderCallback);\n\t\t\t});\n\n\t\ttmpAnticipate.anticipate(\n\t\t\t(fAsyncTemplateCallback) =>\n\t\t\t{\n\t\t\t\t// Render the template (asynchronously)\n\t\t\t\tthis.pict.parseTemplateByHash(tmpRenderable.TemplateHash, tmpData,\n\t\t\t\t\t(pError, pContent) =>\n\t\t\t\t\t{\n\t\t\t\t\t\tif (pError)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render (asynchronously) ${tmpRenderableHash} (param ${pRenderable}) because it did not parse the template.`, pError);\n\t\t\t\t\t\t\treturn fAsyncTemplateCallback(pError);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Assign the content to the destination address\n\t\t\t\t\t\tswitch(tmpRenderable.RenderMethod)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcase 'append':\n\t\t\t\t\t\t\t\tthis.pict.ContentAssignment.appendContent(tmpRenderDestinationAddress, pContent);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'prepend':\n\t\t\t\t\t\t\t\tthis.pict.ContentAssignment.prependContent(tmpRenderDestinationAddress, pContent);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'append_once':\n\t\t\t\t\t\t\t\t// Try to find the content in the destination address\n\t\t\t\t\t\t\t\tlet tmpExistingContent = this.pict.ContentAssignment.getElement(`#${tmpRenderableHash}`);\n\t\t\t\t\t\t\t\tif (tmpExistingContent.length < 1)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tthis.pict.ContentAssignment.appendContent(tmpRenderDestinationAddress, pContent);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcase 'replace':\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tthis.pict.ContentAssignment.assignContent(tmpRenderDestinationAddress, pContent);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Execute the developer-overridable asynchronous post-render behavior\n\t\t\t\t\t\tthis.lastRenderedTimestamp = this.pict.log.getTimeStamp();\n\t\t\t\t\t\treturn fAsyncTemplateCallback();\n\t\t\t\t\t});\n\t\t\t});\n\n\t\ttmpAnticipate.anticipate(\n\t\t\t(fOnAfterRenderCallback) =>\n\t\t\t{\n\t\t\t\tthis.onAfterRender(tmpRenderable, tmpRenderDestinationAddress, tmpData);\n\t\t\t\tthis.onAfterRenderAsync(fOnAfterRenderCallback);\n\t\t\t});\n\n\t\ttmpAnticipate.wait(fCallback);\n\t}\n\trenderDefaultAsync(fCallback)\n\t{\n\t\t// Render the default renderable (falses do the proper forward lookups of values from config and such)\n\t\tthis.renderAsync(false, false, false, fCallback);\n\t}\n\tonAfterRender(pRenderable, pRenderDestinationAddress, pData)\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onAfterRender:`);\n\t\t}\n\t\treturn true;\n\t}\n\tonAfterRenderAsync(fCallback)\n\t{\n\t\treturn fCallback();\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*                            Code Section: Solver                            */\n\t/* -------------------------------------------------------------------------- */\n\tonBeforeSolve()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onBeforeSolve:`);\n\t\t}\n\t\treturn true;\n\t}\n\tonBeforeSolveAsync(fCallback)\n\t{\n\t\tthis.onBeforeSolve();\n\t\treturn fCallback();\n\t}\n\n\tonSolve()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onSolve:`);\n\t\t}\n\t\treturn true;\n\t}\n\tonSolveAsync(fCallback)\n\t{\n\t\tthis.onSolve();\n\t\treturn fCallback();\n\t}\n\n\tsolve()\n\t{\n\t\tif (this.pict.LogNoisiness > 2)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} executing solve() function...`);\n\t\t}\n\t\tthis.onBeforeSolve();\n\t\tthis.onSolve();\n\t\tthis.onAfterSolve();\n\t\tthis.lastSolvedTimestamp = this.pict.log.getTimeStamp();\n\t\treturn true;\n\t}\n\n\tsolveAsync(fCallback)\n\t{\n\t\tlet tmpAnticipate = this.pict.instantiateServiceProviderWithoutRegistration('Anticipate');\n\n\t\ttmpAnticipate.anticipate(this.onBeforeSolveAsync.bind(this));\n\t\ttmpAnticipate.anticipate(this.onSolveAsync.bind(this));\n\t\ttmpAnticipate.anticipate(this.onAfterSolveAsync.bind(this));\n\n\t\ttmpAnticipate.wait(\n\t\t\t(pError) =>\n\t\t\t{\n\t\t\t\tif (this.pict.LogNoisiness > 2)\n\t\t\t\t{\n\t\t\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} solveAsync() complete.`);\n\t\t\t\t}\n\t\t\t\tthis.lastSolvedTimestamp = this.pict.log.getTimeStamp();\n\t\t\t\treturn fCallback(pError);\n\t\t\t});\n\t}\n\n\tonAfterSolve()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onAfterSolve:`);\n\t\t}\n\t\treturn true;\n\t}\n\tonAfterSolveAsync(fCallback)\n\t{\n\t\tthis.onAfterSolve();\n\t\treturn fCallback();\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*                     Code Section: Marshal From View                        */\n\t/* -------------------------------------------------------------------------- */\n\tonBeforeMarshalFromView()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onBeforeMarshalFromView:`);\n\t\t}\n\t\treturn true;\n\t}\n\tonBeforeMarshalFromViewAsync(fCallback)\n\t{\n\t\tthis.onBeforeMarshalFromView();\n\t\treturn fCallback();\n\t}\n\n\tonMarshalFromView()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onMarshalFromView:`);\n\t\t}\n\t\treturn true;\n\t}\n\tonMarshalFromViewAsync(fCallback)\n\t{\n\t\tthis.onMarshalFromView();\n\t\treturn fCallback();\n\t}\n\n\tmarshalFromView()\n\t{\n\t\tif (this.pict.LogNoisiness > 2)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} executing solve() function...`);\n\t\t}\n\t\tthis.onBeforeMarshalFromView();\n\t\tthis.onMarshalFromView();\n\t\tthis.onAfterMarshalFromView();\n\t\tthis.lastMarshalFromViewTimestamp = this.pict.log.getTimeStamp();\n\t\treturn true;\n\t}\n\n\tmarshalFromViewAsync(fCallback)\n\t{\n\t\tlet tmpAnticipate = this.pict.instantiateServiceProviderWithoutRegistration('Anticipate');\n\n\t\ttmpAnticipate.anticipate(this.onBeforeMarshalFromViewAsync.bind(this));\n\t\ttmpAnticipate.anticipate(this.onMarshalFromViewAsync.bind(this));\n\t\ttmpAnticipate.anticipate(this.onAfterMarshalFromViewAsync.bind(this));\n\n\t\ttmpAnticipate.wait(\n\t\t\t(pError) =>\n\t\t\t{\n\t\t\t\tif (this.pict.LogNoisiness > 2)\n\t\t\t\t{\n\t\t\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} solveAsync() complete.`);\n\t\t\t\t}\n\t\t\t\tthis.lastMarshalFromViewTimestamp = this.pict.log.getTimeStamp();\n\t\t\t\treturn fCallback(pError);\n\t\t\t});\n\t}\n\n\tonAfterMarshalFromView()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onAfterMarshalFromView:`);\n\t\t}\n\t\treturn true;\n\t}\n\tonAfterMarshalFromViewAsync(fCallback)\n\t{\n\t\tthis.onAfterMarshalFromView();\n\t\treturn fCallback();\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*                     Code Section: Marshal To View                          */\n\t/* -------------------------------------------------------------------------- */\n\tonBeforeMarshalToView()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onBeforeMarshalToView:`);\n\t\t}\n\t\treturn true;\n\t}\n\tonBeforeMarshalToViewAsync(fCallback)\n\t{\n\t\tthis.onBeforeMarshalToView();\n\t\treturn fCallback();\n\t}\n\n\tonMarshalToView()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onMarshalToView:`);\n\t\t}\n\t\treturn true;\n\t}\n\tonMarshalToViewAsync(fCallback)\n\t{\n\t\tthis.onMarshalToView();\n\t\treturn fCallback();\n\t}\n\n\tmarshalToView()\n\t{\n\t\tif (this.pict.LogNoisiness > 2)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} executing solve() function...`);\n\t\t}\n\t\tthis.onBeforeMarshalToView();\n\t\tthis.onMarshalToView();\n\t\tthis.onAfterMarshalToView();\n\t\tthis.lastMarshalToViewTimestamp = this.pict.log.getTimeStamp();\n\t\treturn true;\n\t}\n\n\tmarshalToViewAsync(fCallback)\n\t{\n\t\tlet tmpAnticipate = this.pict.instantiateServiceProviderWithoutRegistration('Anticipate');\n\n\t\ttmpAnticipate.anticipate(this.onBeforeMarshalToViewAsync.bind(this));\n\t\ttmpAnticipate.anticipate(this.onMarshalToViewAsync.bind(this));\n\t\ttmpAnticipate.anticipate(this.onAfterMarshalToViewAsync.bind(this));\n\n\t\ttmpAnticipate.wait(\n\t\t\t(pError) =>\n\t\t\t{\n\t\t\t\tif (this.pict.LogNoisiness > 2)\n\t\t\t\t{\n\t\t\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} solveAsync() complete.`);\n\t\t\t\t}\n\t\t\t\tthis.lastMarshalToViewTimestamp = this.pict.log.getTimeStamp();\n\t\t\t\treturn fCallback(pError);\n\t\t\t});\n\t}\n\n\tonAfterMarshalToView()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onAfterMarshalToView:`);\n\t\t}\n\t\treturn true;\n\t}\n\tonAfterMarshalToViewAsync(fCallback)\n\t{\n\t\tthis.onAfterMarshalToView();\n\t\treturn fCallback();\n\t}\n}\n\nmodule.exports = PictView;\n},{\"fable-serviceproviderbase\":1}],3:[function(require,module,exports){\nmodule.exports={\n\t\"RenderOnLoad\": true,\n\n\t\"GridWidth\": \"auto\",\n\t\"GridRowHeight\": 40,\n\t\n\t\"GridBodyHeight\": \"auto\",\n\t\"GridBodyMinHeight\": 130,\n\n\t\"GridColumnMinWidth\": 50,\n\t\"GridColumnWidthResizable\": true,\n\t\"GridColumnHeightResizable\": false,\n\n\t\"GridColumnFrozenCount\": 0,\n\t\"GridColumnFrozenBorderWidth\": 3,\n\n\t\"GridScrollX\": true,\n\t\"GridScrollY\": true,\n\n\t\"GridShowDummyRows\": false,\n\t\"GridDraggableRows\": false,\n\n\t\"GridSelectionUnit\": \"cell\",\n\n\t\"DefaultRenderable\": \"TuiGrid-Wrap\",\n\t\"DefaultDestinationAddress\": \"#TuiGrid-Container-Div\",\n\n\t\"Templates\": [\n\t\t{\n\t\t\t\"Hash\": \"TuiGrid-Container\",\n\t\t\t\"Template\": \"<!-- TuiGrid-Container Rendering Soon -->\"\n\t\t}\n\t],\n\n\t\"Renderables\": [\n\t\t{\n\t\t\t\"RenderableHash\": \"TuiGrid-Wrap\",\n\t\t\t\"TemplateHash\": \"TuiGrid-Container\",\n\t\t\t\"DestinationAddress\": \"#TuiGrid-Container-Div\"\n\t\t}\n\t],\n\n\t\"TargetElementAddress\": \"#TuiGrid-Container-Div\",\n\n\t\"GridDataAddress\": false,\n\n\t\"GridData\": [\n\t\t{\n\t\t\t\"idrecord\": 1,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 1\",\n\t\t\t\"description\": \"description 1\"\n\t\t},\n\t\t{\n\t\t\t\"idrecord\": 2,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 2\",\n\t\t\t\"description\": \"description 2\"\n\t\t},\n\t\t{\n\t\t\t\"idrecord\": 3,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 3\",\n\t\t\t\"description\": \"description 3\"\n\t\t},\n\t\t{\n\t\t\t\"idrecord\": 4,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 4\",\n\t\t\t\"description\": \"description 4\"\n\t\t},\n\t\t{\n\t\t\t\"idrecord\": 5,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 5\",\n\t\t\t\"description\": \"description 5\"\n\t\t},\n\t\t{\n\t\t\t\"idrecord\": 6,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 6\",\n\t\t\t\"description\": \"description 6\"\n\t\t},\n\t\t{\n\t\t\t\"idrecord\": 7,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 7\",\n\t\t\t\"description\": \"description 7\"\n\t\t},\n\t\t{\n\t\t\t\"idrecord\": 8,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 8\",\n\t\t\t\"description\": \"description 8\"\n\t\t},\n\t\t{\n\t\t\t\"idrecord\": 9,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 9\",\n\t\t\t\"description\": \"description 9\"\n\t\t}\n\t],\n\t\"ColumnsToSolveOnChange\": {},\n\t\"TuiColumnSchema\": [\n\t\t{\n\t\t\t\"header\": \"IDRecord\",\n\t\t\t\"name\": \"idrecord\",\n\t\t\t\"PictTriggerSolveOnChange\": true\n\t\t},\n\t\t{\n\t\t\t\"header\": \"Entity\",\n\t\t\t\"name\": \"entity\",\n\t\t\t\"PictTriggerSolveOnChange\": true\n\t\t},\n\t\t{\n\t\t\t\"header\": \"Name\",\n\t\t\t\"name\": \"name\",\n\t\t\t\"editor\": \"text\"\n\t\t},\n\t\t{\n\t\t\t\"header\": \"Description\",\n\t\t\t\"name\": \"description\",\n\t\t\t\"editor\": \"text\"\n\t\t}\n\t]\n}\n},{}],4:[function(require,module,exports){\nconst libPictViewClass = require('pict-view');\n\nclass PictSectionTuiGrid extends libPictViewClass\n{\n\tconstructor(pFable, pOptions, pServiceHash)\n\t{\n\t\tlet tmpOptions = Object.assign({}, require('./Pict-Section-TuiGrid-DefaultConfiguration.json'), pOptions);\n\n\t\tsuper(pFable, tmpOptions, pServiceHash);\n\n\t\tthis.initialRenderComplete = false;\n\t}\n\n\tonBeforeInitialize()\n\t{\n\t\tsuper.onBeforeInitialize();\n\n\t\tthis._tuiGridPrototype = false;\n\n\t\tthis.tuiGrid = false;\n\n\t\tthis.customHeaders = require('./Pict-TuiGrid-Headers.js');\n\t\tthis.customEditors = require('./Pict-TuiGrid-Editors.js');\n\t\tthis.customFormatters = require('./Pict-TuiGrid-Formatters.js');\n\n\t\tthis.columnSchema = false;\n\t\tthis.targetElementAddress = false;\n\t\tthis.gridData = false;\n\t}\n\n\t// Overload the connectTuiGrid() function to use the inline version of the TuiGrid\n\tconnectTuiGridPrototype(pTuiGridPrototype)\n\t{\n\t\tif (typeof (pTuiGridPrototype) != 'undefined')\n\t\t{\n\t\t\tthis._tuiGridPrototype = pTuiGridPrototype;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.log.trace(`PICT-TuiGrid No TuiGrid Prototype defined or explicitly set; looking for it in the window object.`);\n\t\t\tif (typeof (window) != 'undefined')\n\t\t\t{\n\t\t\t\tif ((typeof (window.tui) != 'undefined') && (typeof (window.tui.Grid) != 'undefined'))\n\t\t\t\t{\n\t\t\t\t\tthis.log.trace(`PICT-TuiGrid Found TuiGrid Prototype in window.tuiGrid.`);\n\t\t\t\t\tthis.connectTuiGridPrototype(window.tui.Grid);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.log.error(`PICT-TuiGrid No TuiGrid Prototype found in window.tuiGrid.`);\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.log.error(`PICT-TuiGrid No TuiGrid Prototype found in window.tuiGrid -- window object unavailable.`);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @typedef {Object} TUIGridCellChange\n\t * @property {any} rowKey - The key of the row that changed.\n\t * @property {string} columnName - The name of the column that changed.\n\t * @property {any} value - The \"current\" value of the cell. Slightly different meaning in preChangeHandler vs changeHandler (before / after the change is applied).\n\t * @property {any} [nextValue] - The value that the cell will have after the change. Only populated in preChangeHandler (not changeHandler).\n\t * @property {any} [prevValue] - The value that the cell had before the change. Only populated in changeHandler (not preChangeHandler).\n\t */\n\n\t/**\n\t * @typedef {Object} TUIGridChangeEvent\n\t * @property {Object} instance - The TuiGrid instance that fired the event.\n\t * @property {TUIGridCellChange[]} changes - An array of objects representing the changes to grid cell values.\n\t */\n\n\t/**\n\t * Interface method for handling changesets from the TuiGrid control. Invoked before the change has been applied to the affected cells.\n\t *\n\t * * The pre-change cell value is stored in value while the new cell value is stored in nextValue.\n\t * * Any changes made to nextValue in this method will be reflected in the grid for that cell.\n\t *\n\t * @param {TUIGridChangeEvent} pChangeData - An event containing an array of objects representing the changes to grid cell values.\n\t */\n\tpreChangeHandler(pChangeData)\n\t{\n\t}\n\n\t/**\n\t * Interface method for handling changesets from the TuiGrid control. Invoked after the change has been applied to the affected cells.\n\t *\n\t * * Performs solver trigger for changes to any columns configured in \"ColumnsToSolveOnChange\" or with \"PictTriggerSolveOnChange\": true on a specific row.\n\t * * The previous cell value is stored in prevValue while the next cell value is stored in value.\n\t *\n\t * @param {TUIGridChangeEvent} pChangeData - An event object containing an array of objects representing the changes to grid cell values.\n\t */\n\tchangeHandler(pChangeData)\n\t{\n\t\tlet tmpSolverNecessary = false;\n\n\t\tfor (let i = 0; i < pChangeData.changes.length; i++)\n\t\t{\n\t\t\tlet tmpEntity = pChangeData.instance.getValue(pChangeData.changes[i].rowKey, 'entity');\n\t\t\tlet tmpIDRecord = pChangeData.instance.getValue(pChangeData.changes[i].rowKey, 'idrecord');\n\n\t\t\tthis.log.trace(`Generic Change Handler for TuiGrid Fired, Entity ${tmpEntity} IDRecord ${tmpIDRecord} setting Column [${pChangeData.changes[i].value}] to new Value [${pChangeData.changes[i].value}]`);\n\n\t\t\t//if (pChangeData.changes[i].columnName == 'some_important_column')\n\t\t\t//{\n\t\t\t//if (pChangeData.changes[i].value > some_important_threshold)\n\t\t\t//{\n\t\t\t// Do something\n\t\t\t//}\n\t\t\t//}\n\t\t\tif (this.options.ColumnsToSolveOnChange.hasOwnProperty(pChangeData.changes[i].columnName))\n\t\t\t{\n\t\t\t\ttmpSolverNecessary = true;\n\t\t\t}\n\t\t}\n\n\t\tif (tmpSolverNecessary)\n\t\t{\n\t\t\tthis.services.PictApplication.solve();\n\t\t}\n\t}\n\n\tonAfterRender()\n\t{\n\t\tif (!this.initialRenderComplete)\n\t\t{\n\t\t\tthis.onAfterInitialRender();\n\t\t\tthis.initialRenderComplete = true;\n\t\t}\n\t}\n\n\tonAfterInitialRender()\n\t{\n\t\t// This is where we wire up and initialize the tuigrid control -- the initial render has put the placeholder content in place.\n\t\t// Check for a tuigrid prototype, and find it in the window object it if it doesn't exist\n\t\tif (!this._tuiGridPrototype)\n\t\t{\n\t\t\tthis.connectTuiGridPrototype();\n\t\t}\n\t\t// This is where we wire up and initialize the tuigrid control\n\t\tif (this.tuiGrid)\n\t\t{\n\t\t\t// The grid is already initialized.\n\t\t\tthis.log.error(`TuiGrid going to ${this.options.TargetElementAddress} is already initialized!`);\n\t\t\treturn false;\n\t\t}\n\n\t\tif (this.options.GridDataAddress)\n\t\t{\n\t\t\tlet tmpAddressedData = this.fable.manifest.getValueByHash(this.AppData, this.options.GridDataAddress);\n\t\t\tif (typeof (tmpAddressedData) != 'object')\n\t\t\t{\n\t\t\t\tthis.log.error(`Address for GridData [${this.options.GridDataAddress}] did not return an object; it was a ${typeof (tmpAddressedData)}.`);\n\t\t\t\tthis.gridData = [];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.gridData = JSON.parse(JSON.stringify(tmpAddressedData));\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.gridData = [];\n\t\t}\n\n\t\tlet tmpTargetElementSet = this.services.ContentAssignment.getElement(this.options.TargetElementAddress);\n\t\tif (tmpTargetElementSet.length < 1)\n\t\t{\n\t\t\tthis.log.error(`Could not find target element [${this.options.TargetElementAddress}] for TuiGrid!  Rendering won't function properly.`);\n\t\t\tthis.targetElement = false;\n\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Just go for the first one.\n\t\t\tthis.targetElement = tmpTargetElementSet[0];\n\t\t}\n\n\t\t// Check to see if there are any custom formatters.\n\t\tthis.columnSchema = this.options.TuiColumnSchema;\n\t\t// Setup the solver and custom schema handlers.\n\t\tfor (let i = 0; i < this.columnSchema.length; i++)\n\t\t{\n\t\t\tlet tmpColumn = this.columnSchema[i];\n\t\t\t// If this bit is set on a column, the Form solver will trigger each time a change happens to that column.\n\t\t\tif (tmpColumn.PictTriggerSolveOnChange)\n\t\t\t{\n\t\t\t\tthis.options.ColumnsToSolveOnChange[tmpColumn.name] = tmpColumn;\n\t\t\t}\n\t\t\t// Look to see if there is an internal formatter that matches the type\n\t\t\tif ((tmpColumn.hasOwnProperty('formatter')) && (this.customFormatters.hasOwnProperty(tmpColumn.formatter)))\n\t\t\t{\n\t\t\t\t// Assign our special formatter to the column.\n\t\t\t\ttmpColumn.formatter = this.customFormatters[tmpColumn.formatter];\n\t\t\t}\n\t\t\t// Look to see if there is an editor stanza\n\t\t\tif (tmpColumn.hasOwnProperty('editor'))\n\t\t\t{\n\t\t\t\t// Look to see if there is an internal editor that matches the type\n\t\t\t\tif ((tmpColumn.editor.hasOwnProperty('type'))\n\t\t\t\t\t&& (typeof (tmpColumn.editor.type) == 'string')\n\t\t\t\t\t&& (this.customEditors.hasOwnProperty(tmpColumn.editor.type)))\n\t\t\t\t{\n\t\t\t\t\t// Assign our special editor to the column.\n\t\t\t\t\ttmpColumn.editor.type = this.customEditors[tmpColumn.editor.type];\n\t\t\t\t}\n\n\t\t\t\t// Look to see if there is an internal editor that matches the type\n\t\t\t\tif ((tmpColumn.editor.hasOwnProperty('options'))\n\t\t\t\t\t&& (typeof (tmpColumn.editor.options) == 'object')\n\t\t\t\t\t&& (tmpColumn.editor.options.hasOwnProperty('listItems'))\n\t\t\t\t\t&& (typeof (tmpColumn.editor.options.listItems) == 'string'))\n\t\t\t\t{\n\t\t\t\t\t// Look for this address!  For the Record object, we will pass in the options.\n\t\t\t\t\tlet tmpListItems = this.fable.manifest.getValueByHash({ AppData: this.AppData, Options: this.options }, tmpColumn.editor.options.listItems);\n\t\t\t\t\tif (typeof (tmpListItems) == 'object')\n\t\t\t\t\t{\n\t\t\t\t\t\ttmpColumn.editor.options.listItems = tmpListItems;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.log.warn(`Pict TuiGrid for column [${tmpColumn.name}] had [${tmpColumn.editor.options.listItems}] as a listItems address, but it didn't return an object.  It was a [${typeof (tmpListItems)}].  Setting to empty list.`);\n\t\t\t\t\t\ttmpColumn.editor.options.listItems = [];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.gridSettings = {\n\t\t\t\tdata: this.gridData,\n\t\t\t\tel: this.targetElement,\n\t\t\t\tcolumns: this.columnSchema,\n\n\t\t\t\t// This is no bueno, yo\n\t\t\t\tusageStatistics: false,\n\n\t\t\t\tscrollY: this.options.GridScrollY,\n\n\t\t\t\tcolumnOptions:\n\t\t\t\t{\n\t\t\t\t\tresizable: this.options.GridColumnWidthResizable\n\t\t\t\t}\n\t\t\t};\n\n\t\tthis.customConfigureGridSettings();\n\n\t\tlet libTuiGrid = this._tuiGridPrototype;\n\t\tthis.tuiGrid = new libTuiGrid(this.gridSettings);\n\t\tthis.tuiGrid.on('beforeChange', (pChangeData) => { this.preChangeHandler(pChangeData); });\n\t\tthis.tuiGrid.on('afterChange', (pChangeData) => { this.changeHandler(pChangeData); });\n\t}\n\n\tcustomConfigureGridSettings ()\n\t{\n\t\t// This can be overloaded to tweak up the this.gridSettings\n\t}\n\n\tSetGridValue(pCellColumnToBeSet, pCellValueToSet, pLookupValue, pLookupColumn)\n\t{\n\t\tif (typeof (pLookupValue) == 'undefined')\n\t\t{\n\t\t\tconsole.log(`Could not set grid value [${pCellColumnToBeSet}] = [${pCellValueToSet}] looked up by [${pLookupColumn}]::[${pLookupValue}].  No valid lookup value!`);\n\t\t\treturn false;\n\t\t}\n\n\t\tif (this.tuiGrid)\n\t\t{\n\t\t\tlet tmpData = this.tuiGrid.getData();\n\n\t\t\tfor (let i = 0; i < tmpData.length; i++)\n\t\t\t{\n\t\t\t\tlet tmpRecord = tmpData[i];\n\n\t\t\t\tif (tmpRecord[pLookupColumn] == pLookupValue)\n\t\t\t\t{\n\t\t\t\t\tthis.tuiGrid.setValue(i, pCellColumnToBeSet, pCellValueToSet);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.log.warn(`Could not set grid value [${pCellColumnToBeSet}] = [${pCellValueToSet}] looked up by [${pLookupColumn}]::[${pLookupValue}].  No valid grid!`);\n\t\t}\n\t}\n\n\tSetGridValueByRowKey(pCellColumnToBeSet, pCellValueToSet, pRowKey)\n\t{\n\t\tif (typeof (pRowKey) == 'undefined')\n\t\t{\n\t\t\tthis.log.error(`Could not set grid value [${pCellColumnToBeSet}] = [${pCellValueToSet}] looked up by row key [${pRowKey}].  No valid row key!`);\n\t\t\treturn false;\n\t\t}\n\n\n\t\tif (this.tuiGrid)\n\t\t{\n\t\t\tthis.tuiGrid.setValue(pRowKey, pCellColumnToBeSet, pCellValueToSet);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.log.warn(`Could not set grid value [${pCellColumnToBeSet}] = [${pCellValueToSet}] looked up by [${pLookupColumn}]::[${pLookupValue}].  No valid grid!`);\n\t\t}\n\t}\n}\n\nmodule.exports = PictSectionTuiGrid;\n\nmodule.exports.default_configuration = require('./Pict-Section-TuiGrid-DefaultConfiguration.json');\n\n},{\"./Pict-Section-TuiGrid-DefaultConfiguration.json\":3,\"./Pict-TuiGrid-Editors.js\":6,\"./Pict-TuiGrid-Formatters.js\":7,\"./Pict-TuiGrid-Headers.js\":8,\"pict-view\":2}],5:[function(require,module,exports){\n// Custom number editor class with an option for precision\nclass tuiCustomEditorNumber\n{\n\tconstructor(pProperties)\n\t{\n\t\tconst tmpElement = document.createElement('input');\n\n\t\tconst decimalPrecision = (pProperties.columnInfo.editor.options.decimalPrecision) ? pProperties.columnInfo.editor.options.decimalPrecision : 3;\n\n\t\ttmpElement.type = 'number';\n\t\ttmpElement.value = String(pProperties.value);\n\t\ttmpElement.oninput = (pElement) =>\n\t\t{\n\t\t\tconst tmpCastNumber = parseFloat(pElement.target.value).toFixed(decimalPrecision).toString()\n\t\t\tif (tmpCastNumber.length < parseFloat(pElement.target.value).toString().length)\n\t\t\t{\n\t\t\t\tpElement.target.value = tmpCastNumber;\n\t\t\t}\n\t\t};\n\n\t\tthis.Element = tmpElement;\n\t}\n\n\tgetElement()\n\t{\n\t\treturn this.Element;\n\t}\n\n\tgetValue()\n\t{\n\t\treturn this.Element.value;\n\t}\n\n\tmounted()\n\t{\n\t\tthis.Element.select();\n\t}\n}\n\nmodule.exports = tuiCustomEditorNumber;\n},{}],6:[function(require,module,exports){\nconst tuiGridHeaders = {};\n\ntuiGridHeaders.EditorNumber = require('./Pict-TuiGrid-Editor-Number.js');\n\nmodule.exports = tuiGridHeaders;\n},{\"./Pict-TuiGrid-Editor-Number.js\":5}],7:[function(require,module,exports){\n// Static functions for formatting data in the grid.\nconst tuiGridFormatters = {};\n\ntuiGridFormatters.FormatterTwoDigitNumber = (pCell) =>\n\t{\n\t\tlet tmpCellValue = Number.parseFloat(pCell.value).toFixed(2);\n\t\tif (isNaN(tmpCellValue))\n\t\t{\n\t\t\treturn '';\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn tmpCellValue;\n\t\t}\n\t}\n\ntuiGridFormatters.FormatterCurrencyNumber = (pCell) =>\n\t{\n\t\tlet tmpCellValue = tuiGridFormatters.FormatterTwoDigitNumber(pCell);\n\t\tif (tmpCellValue == '')\n\t\t{\n\t\t\treturn tmpCellValue;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn `$${tmpCellValue}`;\n\t\t}\n\t}\n\nmodule.exports = tuiGridFormatters;\n},{}],8:[function(require,module,exports){\nconst tuiGridHeaders = {};\n\n// Custom column header where the header is hidden\nclass tuiCustomColumnHeaderNone\n{\n\tconstructor()\n\t{\n\t\tlet tmpElement = document.createElement('input');\n\t\ttmpElement.type = 'hidden';\n\t\ttmpElement.value = '';\n\t\tthis.Element = tmpElement;\n\t}\n\n\tgetElement()\n\t{\n\t\treturn this.Element;\n\t}\n\n\trender()\n\t{\n\t\t// Noop!\n\t}\n}\n\ntuiGridHeaders.CustomColumnHeaderNone = tuiCustomColumnHeaderNone;\n\nmodule.exports = tuiGridHeaders;\n},{}]},{},[4])(4)\n});\n\n","(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","/**\n* Fable Service Base\n* @author <steven@velozo.com>\n*/\n\nclass FableServiceProviderBase\n{\n\t// The constructor can be used in two ways:\n\t// 1) With a fable, options object and service hash (the options object and service hash are optional)\n\t// 2) With an object or nothing as the first parameter, where it will be treated as the options object\n\tconstructor(pFable, pOptions, pServiceHash)\n\t{\n\t\t// Check if a fable was passed in; connect it if so\n\t\tif ((typeof(pFable) === 'object') && pFable.isFable)\n\t\t{\n\t\t\tthis.connectFable(pFable);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.fable = false;\n\t\t}\n\n\t\t// initialize options and UUID based on whether the fable was passed in or not.\n\t\tif (this.fable)\n\t\t{\n\t\t\tthis.UUID = pFable.getUUID();\n\t\t\tthis.options = (typeof(pOptions) === 'object') ? pOptions\n\t\t\t\t\t\t\t: {};\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// With no fable, check to see if there was an object passed into either of the first two\n\t\t\t// Parameters, and if so, treat it as the options object\n\t\t\tthis.options = ((typeof(pFable) === 'object') && !pFable.isFable) ? pFable\n\t\t\t\t\t\t\t: (typeof(pOptions) === 'object') ? pOptions\n\t\t\t\t\t\t\t: {};\n\t\t\tthis.UUID = `CORE-SVC-${Math.floor((Math.random() * (99999 - 10000)) + 10000)}`\n\t\t}\n\n\t\t// It's expected that the deriving class will set this\n\t\tthis.serviceType = `Unknown-${this.UUID}`;\n\n\t\t// The service hash is used to identify the specific instantiation of the service in the services map\n\t\tthis.Hash = (typeof(pServiceHash) === 'string') ? pServiceHash \n\t\t\t\t\t: (!this.fable && (typeof(pOptions) === 'string')) ? pOptions\n\t\t\t\t\t: `${this.UUID}`;\n\t}\n\n\tconnectFable(pFable)\n\t{\n\t\tif ((typeof(pFable) !== 'object') || (!pFable.isFable))\n\t\t{\n\t\t\tlet tmpErrorMessage = `Fable Service Provider Base: Cannot connect to Fable, invalid Fable object passed in.  The pFable parameter was a [${typeof(pFable)}].}`;\n\t\t\tconsole.log(tmpErrorMessage);\n\t\t\treturn new Error(tmpErrorMessage);\n\t\t}\n\n\t\tif (!this.fable)\n\t\t{\n\t\t\tthis.fable = pFable;\n\t\t}\n\n\t\tif (!this.log)\n\t\t{\n\t\t\tthis.log = this.fable.Logging;\n\t\t}\n\t\tif (!this.services)\n\t\t{\n\t\t\tthis.services = this.fable.services;\n\t\t}\n\n\t\tif (!this.servicesMap)\n\t\t{\n\t\t\tthis.servicesMap = this.fable.servicesMap;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tstatic isFableService = true;\n}\n\nmodule.exports = FableServiceProviderBase;\n\n// This is left here in case we want to go back to having different code/base class for \"core\" services\nmodule.exports.CoreServiceProviderBase = FableServiceProviderBase;","const libFableServiceBase = require('fable-serviceproviderbase');\n\nconst defaultPictViewSettings = (\n\t{\n\t\tDefaultRenderable: false,\n\t\tDefaultDestinationAddress: false,\n\t\tDefaultTemplateRecordAddress: false,\n\n\t\tViewIdentifier: false,\n\n\t\t// If this is set to true, when the App initializes this will.\n\t\t// After the App initializes, initialize will be called as soon as it's added.\n\t\tAutoInitialize: true,\n\t\tAutoInitializeOrdinal: 0,\n\n\t\t// If this is set to true, when the App autorenders (on load) this will.\n\t\t// After the App initializes, render will be called as soon as it's added.\n\t\tAutoRender: true,\n\t\tAutoRenderOrdinal: 0,\n\n\t\tAutoSolveWithApp: true,\n\t\tAutoSolveOrdinal: 0,\n\n\t\tCSSHash: false,\n\t\tCSS: false,\n\t\tCSSProvider: false,\n\t\tCSSPriority: 500,\n\n\t\tTemplates: [],\n\n\t\tDefaultTemplates: [],\n\n\t\tRenderables: [],\n\n\t\tManifests: {}\n\t});\n\nclass PictView extends libFableServiceBase\n{\n\tconstructor(pFable, pOptions, pServiceHash)\n\t{\n\t\t// Intersect default options, parent constructor, service information\n\t\tlet tmpOptions = Object.assign({}, JSON.parse(JSON.stringify(defaultPictViewSettings)), pOptions);\n\t\tsuper(pFable, tmpOptions, pServiceHash);\n\t\tif (!this.options.ViewIdentifier)\n\t\t{\n\t\t\tthis.options.ViewIdentifier = `AutoViewID-${this.fable.getUUID()}`;\n\t\t}\n\t\tthis.serviceType = 'PictView';\n\t\t// Convenience and consistency naming\n\t\tthis.pict = this.fable;\n\t\t// Wire in the essential Pict application state\n\t\tthis.AppData = this.pict.AppData;\n\n\t\tthis.initializeTimestamp = false;\n\t\tthis.lastSolvedTimestamp = false;\n\t\tthis.lastRenderedTimestamp = false;\n\t\tthis.lastMarshalFromViewTimestamp = false;\n\t\tthis.lastMarshalToViewTimestamp = false;\n\n\t\t// Load all templates from the array in the options\n\t\t// Templates are in the form of {Hash:'Some-Template-Hash',Template:'Template content',Source:'TemplateSource'}\n\t\tfor (let i = 0; i < this.options.Templates.length; i++)\n\t\t{\n\t\t\tlet tmpTemplate = this.options.Templates[i];\n\n\t\t\tif (!tmpTemplate.hasOwnProperty('Hash') || !tmpTemplate.hasOwnProperty('Template'))\n\t\t\t{\n\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not load Template ${i} in the options array.`, tmpTemplate);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (!tmpTemplate.Source)\n\t\t\t\t{\n\t\t\t\t\ttmpTemplate.Source = `PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} options object.`;\n\t\t\t\t}\n\t\t\t\tthis.pict.TemplateProvider.addTemplate(tmpTemplate.Hash, tmpTemplate.Template, tmpTemplate.Source);\n\t\t\t}\n\t\t}\n\n\t\t// Load all default templates from the array in the options\n\t\t// Templates are in the form of {Prefix:'',Postfix:'-List-Row',Template:'Template content',Source:'TemplateSourceString'}\n\t\tfor (let i = 0; i < this.options.DefaultTemplates.length; i++)\n\t\t{\n\t\t\tlet tmpDefaultTemplate = this.options.DefaultTemplates[i];\n\n\t\t\tif (!tmpDefaultTemplate.hasOwnProperty('Postfix') || !tmpDefaultTemplate.hasOwnProperty('Template'))\n\t\t\t{\n\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not load Default Template ${i} in the options array.`, tmpDefaultTemplate);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (!tmpDefaultTemplate.Source)\n\t\t\t\t{\n\t\t\t\t\ttmpDefaultTemplate.Source = `PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} options object.`;\n\t\t\t\t}\n\t\t\t\tthis.pict.TemplateProvider.addDefaultTemplate(tmpDefaultTemplate.Prefix, tmpDefaultTemplate.Postfix, tmpDefaultTemplate.Template, tmpDefaultTemplate.Source);\n\t\t\t}\n\t\t}\n\n\t\t// Load the CSS if it's available\n\t\tif (this.options.CSS)\n\t\t{\n\t\t\tlet tmpCSSHash = this.options.CSSHash ? this.options.CSSHash : `View-${this.options.ViewIdentifier}`;\n\t\t\tlet tmpCSSProvider = this.options.CSSProvider ? this.options.CSSProvider : tmpCSSHash;\n\t\t\tthis.pict.CSSMap.addCSS(tmpCSSHash, this.options.CSS, tmpCSSProvider, this.options.CSSPriority);\n\t\t}\n\n\t\t// Load all renderables\n\t\t// Renderables are launchable renderable instructions with templates\n\t\t// They look as such: {Identifier:'ContentEntry', TemplateHash:'Content-Entry-Section-Main', ContentDestinationAddress:'#ContentSection', RecordAddress:'AppData.Content.DefaultText', ManifestTransformation:'ManyfestHash', ManifestDestinationAddress:'AppData.Content.DataToTransformContent'}\n\t\t// The only parts that are necessary are Identifier and Template\n\t\t// A developer can then do render('ContentEntry') and it just kinda works.  Or they can override the ContentDestinationAddress\n\t\tthis.renderables = {};\n\t\tfor (let i = 0; i < this.options.Renderables.length; i++)\n\t\t{\n\t\t\tlet tmpRenderable = this.options.Renderables[i];\n\t\t\tthis.addRenderable(this.options.Renderables[i]);\n\t\t}\n\t}\n\n\taddRenderable(pRenderableHash, pTemplateHash, pDefaultTemplateDataAddress, pDefaultDestinationAddress, pRenderMethod)\n\t{\n\t\tlet tmpRenderable = false;\n\n\t\tif (typeof(pRenderableHash) == 'object')\n\t\t{\n\t\t\t// The developer passed in the renderable as an object.\n\t\t\t// Use theirs instead!\n\t\t\ttmpRenderable = pRenderableHash;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlet tmpRenderMethod = (typeof(pRenderMethod) !== 'string') ? pRenderMethod : 'replace';\n\t\t\ttmpRenderable = (\n\t\t\t\t{\n\t\t\t\t\tRenderableHash: pRenderableHash,\n\t\t\t\t\tTemplateHash: pTemplateHash,\n\t\t\t\t\tDefaultTemplateDataAddress: pDefaultTemplateDataAddress,\n\t\t\t\t\tDefaultDestinationAddress: pDefaultDestinationAddress,\n\t\t\t\t\tRenderMethod: tmpRenderMethod\n\t\t\t\t});\n\t\t}\n\n\t\tif ((typeof(tmpRenderable.RenderableHash) != 'string') || (typeof(tmpRenderable.TemplateHash) != 'string'))\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not load Renderable; RenderableHash or TemplateHash are invalid.`, tmpRenderable);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (this.pict.LogNoisiness > 0)\n\t\t\t{\n\t\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} adding renderable [${tmpRenderable.RenderableHash}] pointed to template ${tmpRenderable.TemplateHash}.`);\n\t\t\t}\n\n\t\t\tthis.renderables[tmpRenderable.RenderableHash] = tmpRenderable;\n\t\t}\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*                        Code Section: Initialization                        */\n\t/* -------------------------------------------------------------------------- */\n\tonBeforeInitialize()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onBeforeInitialize:`);\n\t\t}\n\t\treturn true;\n\t}\n\tonBeforeInitializeAsync(fCallback)\n\t{\n\t\tthis.onBeforeInitialize();\n\t\treturn fCallback();\n\t}\n\n\tonInitialize()\n\t{\n\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onInitialize:`);\n\t\t}\n\t\treturn true;\n\t}\n\tonInitializeAsync(fCallback)\n\t{\n\t\tthis.onInitialize();\n\t\treturn fCallback();\n\t}\n\n\tinitialize()\n\t{\n\t\tif (this.pict.LogControlFlow)\n\t\t{\n\t\t\tthis.log.trace(`PICT-ControlFlow VIEW [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} initialize:`);\n\t\t}\n\n\t\tif (!this.initializeTimestamp)\n\t\t{\n\t\t\tthis.onBeforeInitialize();\n\t\t\tthis.onInitialize();\n\t\t\tthis.onAfterInitialize();\n\t\t\tthis.initializeTimestamp = this.pict.log.getTimeStamp();\n\t\t\treturn true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.log.warn(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} initialize called but initialization is already completed.  Aborting.`);\n\t\t\treturn false;\n\t\t}\n\t}\n\tinitializeAsync(fCallback)\n\t{\n\t\tif (this.pict.LogControlFlow)\n\t\t{\n\t\t\tthis.log.trace(`PICT-ControlFlow VIEW [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} initializeAsync:`);\n\t\t}\n\n\t\tif (!this.initializeTimestamp)\n\t\t{\n\t\t\tlet tmpAnticipate = this.pict.instantiateServiceProviderWithoutRegistration('Anticipate');\n\n\t\t\tif (this.pict.LogNoisiness > 0)\n\t\t\t{\n\t\t\t\tthis.log.info(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} beginning initialization...`);\n\t\t\t}\n\n\t\t\ttmpAnticipate.anticipate(this.onBeforeInitializeAsync.bind(this));\n\t\t\ttmpAnticipate.anticipate(this.onInitializeAsync.bind(this));\n\t\t\ttmpAnticipate.anticipate(this.onAfterInitializeAsync.bind(this));\n\n\t\t\ttmpAnticipate.wait(\n\t\t\t\t(pError) =>\n\t\t\t\t{\n\t\t\t\t\tthis.initializeTimestamp = this.pict.log.getTimeStamp();\n\t\t\t\t\tif (this.pict.LogNoisiness > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.log.info(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} initialization complete.`);\n\t\t\t\t\t}\n\t\t\t\t\treturn fCallback();\n\t\t\t\t})\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.log.warn(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} async initialize called but initialization is already completed.  Aborting.`);\n\t\t\t// TODO: Should this be an error?\n\t\t\treturn fCallback();\n\t\t}\n\t}\n\n\tonAfterInitialize()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onAfterInitialize:`);\n\t\t}\n\t\treturn true;\n\t}\n\tonAfterInitializeAsync(fCallback)\n\t{\n\t\tthis.onAfterInitialize();\n\t\treturn fCallback();\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*                            Code Section: Render                            */\n\t/* -------------------------------------------------------------------------- */\n\tonBeforeRender(pRenderable, pRenderDestinationAddress, pData)\n\t{\n\t\t// Overload this to mess with stuff before the content gets generated from the template\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onBeforeRender:`);\n\t\t}\n\t\treturn true;\n\t}\n\tonBeforeRenderAsync(fCallback)\n\t{\n\t\treturn fCallback();\n\t}\n\n\trender(pRenderable, pRenderDestinationAddress, pTemplateDataAddress)\n\t{\n\t\tlet tmpRenderableHash = (typeof (pRenderable) === 'string') ? pRenderable :\n\t\t\t(typeof (this.options.DefaultRenderable) == 'string') ? this.options.DefaultRenderable : false;\n\t\tif (!tmpRenderableHash)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderable}) because it is not a valid renderable.`);\n\t\t\treturn false;\n\t\t}\n\n\t\tlet tmpRenderable = this.renderables[tmpRenderableHash];\n\n\t\tif (!tmpRenderable)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderable}) because it does not exist.`);\n\t\t\treturn false;\n\t\t}\n\n\t\tlet tmpRenderDestinationAddress = (typeof (pRenderDestinationAddress) === 'string') ? pRenderDestinationAddress :\n\t\t\t(typeof (tmpRenderable.ContentDestinationAddress) === 'string') ? tmpRenderable.ContentDestinationAddress :\n\t\t\t\t(typeof (this.options.DefaultDestinationAddress) === 'string') ? this.options.DefaultDestinationAddress : false;\n\n\t\tif (!tmpRenderDestinationAddress)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderable}) because it does not have a valid destination address.`);\n\t\t\treturn false;\n\t\t}\n\n\t\tlet tmpDataAddress;\n\t\tlet tmpData;\n\n\t\tif (typeof(pTemplateDataAddress) === 'object')\n\t\t{\n\t\t\ttmpData = pTemplateDataAddress;\n\t\t\ttmpDataAddress = 'Passed in as object';\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttmpDataAddress = (typeof (pTemplateDataAddress) === 'string') ? pTemplateDataAddress :\n\t\t\t\t(typeof (tmpRenderable.DefaultTemplateRecordAddress) === 'string') ? tmpRenderable.DefaultTemplateRecordAddress :\n\t\t\t\t\t(typeof (this.options.DefaultTemplateRecordAddress) === 'string') ? this.options.DefaultTemplateRecordAddress : false;\n\n\t\t\ttmpData = (typeof (tmpDataAddress) === 'string') ? this.pict.DataProvider.getDataByAddress(tmpDataAddress) : undefined;\n\t\t}\n\n\t\t// Execute the developer-overridable pre-render behavior\n\t\tthis.onBeforeRender(tmpRenderable, tmpRenderDestinationAddress, tmpData);\n\n\t\tif (this.pict.LogControlFlow)\n\t\t{\n\t\t\tthis.log.trace(`PICT-ControlFlow VIEW [${this.UUID}]::[${this.Hash}] Renderable[${tmpRenderableHash}] Destination[${tmpRenderDestinationAddress}] TemplateDataAddress[${tmpDataAddress}] render:`);\n\t\t}\n\n\t\t// Generate the content output from the template and data\n\t\tlet tmpContent = this.pict.parseTemplateByHash(tmpRenderable.TemplateHash, tmpData)\n\n\t\t// Assign the content to the destination address\n\t\tswitch(tmpRenderable.RenderMethod)\n\t\t{\n\t\t\tcase 'append':\n\t\t\t\tthis.pict.ContentAssignment.appendContent(tmpRenderDestinationAddress, tmpContent);\n\t\t\t\tbreak;\n\t\t\tcase 'prepend':\n\t\t\t\tthis.pict.ContentAssignment.prependContent(tmpRenderDestinationAddress, tmpContent);\n\t\t\t\tbreak;\n\t\t\tcase 'append_once':\n\t\t\t\t// Try to find the content in the destination address\n\t\t\t\tlet tmpExistingContent = this.pict.ContentAssignment.getElement(`#${tmpRenderableHash}`);\n\t\t\t\tif (tmpExistingContent.length < 1)\n\t\t\t\t{\n\t\t\t\t\tthis.pict.ContentAssignment.appendContent(tmpRenderDestinationAddress, tmpContent);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'replace':\n\t\t\t\t// TODO: Should this be the default?\n\t\t\tdefault:\n\t\t\t\tthis.pict.ContentAssignment.assignContent(tmpRenderDestinationAddress, tmpContent);\n\t\t\t\tbreak;\n\t\t}\n\n\t\t// Execute the developer-overridable post-render behavior\n\t\tthis.onAfterRender(tmpRenderable, tmpRenderDestinationAddress, tmpData, tmpContent)\n\n\t\tthis.lastRenderedTimestamp = this.pict.log.getTimeStamp();\n\n\t\treturn true;\n\t}\n\trenderAsync(pRenderable, pRenderDestinationAddress, pTemplateDataAddress, fCallback)\n\t{\n\t\tlet tmpRenderableHash = (typeof (pRenderable) === 'string') ? pRenderable :\n\t\t\t(typeof (this.options.DefaultRenderable) == 'string') ? this.options.DefaultRenderable : false;\n\t\tif (!tmpRenderableHash)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not asynchronously render ${tmpRenderableHash} (param ${pRenderable}because it is not a valid renderable.`);\n\t\t\treturn fCallback(Error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not asynchronously render ${tmpRenderableHash} (param ${pRenderable}because it is not a valid renderable.`));\n\t\t}\n\n\t\tlet tmpRenderable = this.renderables[tmpRenderableHash];\n\n\t\tif (!tmpRenderable)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderable}) because it does not exist.`);\n\t\t\treturn fCallback(Error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderable}) because it does not exist.`));\n\t\t}\n\n\t\tlet tmpRenderDestinationAddress = (typeof (pRenderDestinationAddress) === 'string') ? pRenderDestinationAddress :\n\t\t\t(typeof (tmpRenderable.ContentDestinationAddress) === 'string') ? tmpRenderable.ContentDestinationAddress :\n\t\t\t\t(typeof (this.options.DefaultDestinationAddress) === 'string') ? this.options.DefaultDestinationAddress : false;\n\n\t\tif (!tmpRenderDestinationAddress)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderable}) because it does not have a valid destination address.`);\n\t\t\treturn fCallback(Error(`Could not render ${tmpRenderableHash}`));\n\t\t}\n\n\t\tlet tmpDataAddress;\n\t\tlet tmpData;\n\n\t\tif (typeof(pTemplateDataAddress) === 'object')\n\t\t{\n\t\t\ttmpData = pTemplateDataAddress;\n\t\t\ttmpDataAddress = 'Passed in as object';\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttmpDataAddress = (typeof (pTemplateDataAddress) === 'string') ? pTemplateDataAddress :\n\t\t\t\t(typeof (tmpRenderable.DefaultTemplateRecordAddress) === 'string') ? tmpRenderable.DefaultTemplateRecordAddress :\n\t\t\t\t\t(typeof (this.options.DefaultTemplateRecordAddress) === 'string') ? this.options.DefaultTemplateRecordAddress : false;\n\n\t\t\ttmpData = (typeof (tmpDataAddress) === 'string') ? this.pict.DataProvider.getDataByAddress(tmpDataAddress) : undefined;\n\t\t}\n\n\t\tif (this.pict.LogControlFlow)\n\t\t{\n\t\t\tthis.log.trace(`PICT-ControlFlow VIEW [${this.UUID}]::[${this.Hash}] Renderable[${tmpRenderableHash}] Destination[${tmpRenderDestinationAddress}] TemplateDataAddress[${tmpDataAddress}] renderAsync:`);\n\t\t}\n\t\tif (this.pict.LogNoisiness > 2)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} Beginning Asynchronous Render (callback-style)...`);\n\t\t}\n\t\tif (this.pict.LogNoisiness > 4)\n\t\t{\n\t\t\tthis.log.trace(`At-render AppData: `, this.AppData);\n\t\t}\n\n\n\t\tlet tmpAnticipate = this.fable.newAnticipate();\n\n\t\ttmpAnticipate.anticipate(\n\t\t\t(fOnBeforeRenderCallback) =>\n\t\t\t{\n\t\t\t\tthis.onBeforeRender(tmpRenderable, tmpRenderDestinationAddress, tmpData);\n\t\t\t\tthis.onBeforeRenderAsync(fOnBeforeRenderCallback);\n\t\t\t});\n\n\t\ttmpAnticipate.anticipate(\n\t\t\t(fAsyncTemplateCallback) =>\n\t\t\t{\n\t\t\t\t// Render the template (asynchronously)\n\t\t\t\tthis.pict.parseTemplateByHash(tmpRenderable.TemplateHash, tmpData,\n\t\t\t\t\t(pError, pContent) =>\n\t\t\t\t\t{\n\t\t\t\t\t\tif (pError)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render (asynchronously) ${tmpRenderableHash} (param ${pRenderable}) because it did not parse the template.`, pError);\n\t\t\t\t\t\t\treturn fAsyncTemplateCallback(pError);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Assign the content to the destination address\n\t\t\t\t\t\tswitch(tmpRenderable.RenderMethod)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcase 'append':\n\t\t\t\t\t\t\t\tthis.pict.ContentAssignment.appendContent(tmpRenderDestinationAddress, pContent);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'prepend':\n\t\t\t\t\t\t\t\tthis.pict.ContentAssignment.prependContent(tmpRenderDestinationAddress, pContent);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'append_once':\n\t\t\t\t\t\t\t\t// Try to find the content in the destination address\n\t\t\t\t\t\t\t\tlet tmpExistingContent = this.pict.ContentAssignment.getElement(`#${tmpRenderableHash}`);\n\t\t\t\t\t\t\t\tif (tmpExistingContent.length < 1)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tthis.pict.ContentAssignment.appendContent(tmpRenderDestinationAddress, pContent);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcase 'replace':\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tthis.pict.ContentAssignment.assignContent(tmpRenderDestinationAddress, pContent);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Execute the developer-overridable asynchronous post-render behavior\n\t\t\t\t\t\tthis.lastRenderedTimestamp = this.pict.log.getTimeStamp();\n\t\t\t\t\t\treturn fAsyncTemplateCallback();\n\t\t\t\t\t});\n\t\t\t});\n\n\t\ttmpAnticipate.anticipate(\n\t\t\t(fOnAfterRenderCallback) =>\n\t\t\t{\n\t\t\t\tthis.onAfterRender(tmpRenderable, tmpRenderDestinationAddress, tmpData);\n\t\t\t\tthis.onAfterRenderAsync(fOnAfterRenderCallback);\n\t\t\t});\n\n\t\ttmpAnticipate.wait(fCallback);\n\t}\n\trenderDefaultAsync(fCallback)\n\t{\n\t\t// Render the default renderable (falses do the proper forward lookups of values from config and such)\n\t\tthis.renderAsync(false, false, false, fCallback);\n\t}\n\tonAfterRender(pRenderable, pRenderDestinationAddress, pData)\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onAfterRender:`);\n\t\t}\n\t\treturn true;\n\t}\n\tonAfterRenderAsync(fCallback)\n\t{\n\t\treturn fCallback();\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*                            Code Section: Solver                            */\n\t/* -------------------------------------------------------------------------- */\n\tonBeforeSolve()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onBeforeSolve:`);\n\t\t}\n\t\treturn true;\n\t}\n\tonBeforeSolveAsync(fCallback)\n\t{\n\t\tthis.onBeforeSolve();\n\t\treturn fCallback();\n\t}\n\n\tonSolve()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onSolve:`);\n\t\t}\n\t\treturn true;\n\t}\n\tonSolveAsync(fCallback)\n\t{\n\t\tthis.onSolve();\n\t\treturn fCallback();\n\t}\n\n\tsolve()\n\t{\n\t\tif (this.pict.LogNoisiness > 2)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} executing solve() function...`);\n\t\t}\n\t\tthis.onBeforeSolve();\n\t\tthis.onSolve();\n\t\tthis.onAfterSolve();\n\t\tthis.lastSolvedTimestamp = this.pict.log.getTimeStamp();\n\t\treturn true;\n\t}\n\n\tsolveAsync(fCallback)\n\t{\n\t\tlet tmpAnticipate = this.pict.instantiateServiceProviderWithoutRegistration('Anticipate');\n\n\t\ttmpAnticipate.anticipate(this.onBeforeSolveAsync.bind(this));\n\t\ttmpAnticipate.anticipate(this.onSolveAsync.bind(this));\n\t\ttmpAnticipate.anticipate(this.onAfterSolveAsync.bind(this));\n\n\t\ttmpAnticipate.wait(\n\t\t\t(pError) =>\n\t\t\t{\n\t\t\t\tif (this.pict.LogNoisiness > 2)\n\t\t\t\t{\n\t\t\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} solveAsync() complete.`);\n\t\t\t\t}\n\t\t\t\tthis.lastSolvedTimestamp = this.pict.log.getTimeStamp();\n\t\t\t\treturn fCallback(pError);\n\t\t\t});\n\t}\n\n\tonAfterSolve()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onAfterSolve:`);\n\t\t}\n\t\treturn true;\n\t}\n\tonAfterSolveAsync(fCallback)\n\t{\n\t\tthis.onAfterSolve();\n\t\treturn fCallback();\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*                     Code Section: Marshal From View                        */\n\t/* -------------------------------------------------------------------------- */\n\tonBeforeMarshalFromView()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onBeforeMarshalFromView:`);\n\t\t}\n\t\treturn true;\n\t}\n\tonBeforeMarshalFromViewAsync(fCallback)\n\t{\n\t\tthis.onBeforeMarshalFromView();\n\t\treturn fCallback();\n\t}\n\n\tonMarshalFromView()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onMarshalFromView:`);\n\t\t}\n\t\treturn true;\n\t}\n\tonMarshalFromViewAsync(fCallback)\n\t{\n\t\tthis.onMarshalFromView();\n\t\treturn fCallback();\n\t}\n\n\tmarshalFromView()\n\t{\n\t\tif (this.pict.LogNoisiness > 2)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} executing solve() function...`);\n\t\t}\n\t\tthis.onBeforeMarshalFromView();\n\t\tthis.onMarshalFromView();\n\t\tthis.onAfterMarshalFromView();\n\t\tthis.lastMarshalFromViewTimestamp = this.pict.log.getTimeStamp();\n\t\treturn true;\n\t}\n\n\tmarshalFromViewAsync(fCallback)\n\t{\n\t\tlet tmpAnticipate = this.pict.instantiateServiceProviderWithoutRegistration('Anticipate');\n\n\t\ttmpAnticipate.anticipate(this.onBeforeMarshalFromViewAsync.bind(this));\n\t\ttmpAnticipate.anticipate(this.onMarshalFromViewAsync.bind(this));\n\t\ttmpAnticipate.anticipate(this.onAfterMarshalFromViewAsync.bind(this));\n\n\t\ttmpAnticipate.wait(\n\t\t\t(pError) =>\n\t\t\t{\n\t\t\t\tif (this.pict.LogNoisiness > 2)\n\t\t\t\t{\n\t\t\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} solveAsync() complete.`);\n\t\t\t\t}\n\t\t\t\tthis.lastMarshalFromViewTimestamp = this.pict.log.getTimeStamp();\n\t\t\t\treturn fCallback(pError);\n\t\t\t});\n\t}\n\n\tonAfterMarshalFromView()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onAfterMarshalFromView:`);\n\t\t}\n\t\treturn true;\n\t}\n\tonAfterMarshalFromViewAsync(fCallback)\n\t{\n\t\tthis.onAfterMarshalFromView();\n\t\treturn fCallback();\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*                     Code Section: Marshal To View                          */\n\t/* -------------------------------------------------------------------------- */\n\tonBeforeMarshalToView()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onBeforeMarshalToView:`);\n\t\t}\n\t\treturn true;\n\t}\n\tonBeforeMarshalToViewAsync(fCallback)\n\t{\n\t\tthis.onBeforeMarshalToView();\n\t\treturn fCallback();\n\t}\n\n\tonMarshalToView()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onMarshalToView:`);\n\t\t}\n\t\treturn true;\n\t}\n\tonMarshalToViewAsync(fCallback)\n\t{\n\t\tthis.onMarshalToView();\n\t\treturn fCallback();\n\t}\n\n\tmarshalToView()\n\t{\n\t\tif (this.pict.LogNoisiness > 2)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} executing solve() function...`);\n\t\t}\n\t\tthis.onBeforeMarshalToView();\n\t\tthis.onMarshalToView();\n\t\tthis.onAfterMarshalToView();\n\t\tthis.lastMarshalToViewTimestamp = this.pict.log.getTimeStamp();\n\t\treturn true;\n\t}\n\n\tmarshalToViewAsync(fCallback)\n\t{\n\t\tlet tmpAnticipate = this.pict.instantiateServiceProviderWithoutRegistration('Anticipate');\n\n\t\ttmpAnticipate.anticipate(this.onBeforeMarshalToViewAsync.bind(this));\n\t\ttmpAnticipate.anticipate(this.onMarshalToViewAsync.bind(this));\n\t\ttmpAnticipate.anticipate(this.onAfterMarshalToViewAsync.bind(this));\n\n\t\ttmpAnticipate.wait(\n\t\t\t(pError) =>\n\t\t\t{\n\t\t\t\tif (this.pict.LogNoisiness > 2)\n\t\t\t\t{\n\t\t\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} solveAsync() complete.`);\n\t\t\t\t}\n\t\t\t\tthis.lastMarshalToViewTimestamp = this.pict.log.getTimeStamp();\n\t\t\t\treturn fCallback(pError);\n\t\t\t});\n\t}\n\n\tonAfterMarshalToView()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onAfterMarshalToView:`);\n\t\t}\n\t\treturn true;\n\t}\n\tonAfterMarshalToViewAsync(fCallback)\n\t{\n\t\tthis.onAfterMarshalToView();\n\t\treturn fCallback();\n\t}\n}\n\nmodule.exports = PictView;","module.exports={\n\t\"RenderOnLoad\": true,\n\n\t\"GridWidth\": \"auto\",\n\t\"GridRowHeight\": 40,\n\t\n\t\"GridBodyHeight\": \"auto\",\n\t\"GridBodyMinHeight\": 130,\n\n\t\"GridColumnMinWidth\": 50,\n\t\"GridColumnWidthResizable\": true,\n\t\"GridColumnHeightResizable\": false,\n\n\t\"GridColumnFrozenCount\": 0,\n\t\"GridColumnFrozenBorderWidth\": 3,\n\n\t\"GridScrollX\": true,\n\t\"GridScrollY\": true,\n\n\t\"GridShowDummyRows\": false,\n\t\"GridDraggableRows\": false,\n\n\t\"GridSelectionUnit\": \"cell\",\n\n\t\"DefaultRenderable\": \"TuiGrid-Wrap\",\n\t\"DefaultDestinationAddress\": \"#TuiGrid-Container-Div\",\n\n\t\"Templates\": [\n\t\t{\n\t\t\t\"Hash\": \"TuiGrid-Container\",\n\t\t\t\"Template\": \"<!-- TuiGrid-Container Rendering Soon -->\"\n\t\t}\n\t],\n\n\t\"Renderables\": [\n\t\t{\n\t\t\t\"RenderableHash\": \"TuiGrid-Wrap\",\n\t\t\t\"TemplateHash\": \"TuiGrid-Container\",\n\t\t\t\"DestinationAddress\": \"#TuiGrid-Container-Div\"\n\t\t}\n\t],\n\n\t\"TargetElementAddress\": \"#TuiGrid-Container-Div\",\n\n\t\"GridDataAddress\": false,\n\n\t\"GridData\": [\n\t\t{\n\t\t\t\"idrecord\": 1,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 1\",\n\t\t\t\"description\": \"description 1\"\n\t\t},\n\t\t{\n\t\t\t\"idrecord\": 2,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 2\",\n\t\t\t\"description\": \"description 2\"\n\t\t},\n\t\t{\n\t\t\t\"idrecord\": 3,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 3\",\n\t\t\t\"description\": \"description 3\"\n\t\t},\n\t\t{\n\t\t\t\"idrecord\": 4,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 4\",\n\t\t\t\"description\": \"description 4\"\n\t\t},\n\t\t{\n\t\t\t\"idrecord\": 5,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 5\",\n\t\t\t\"description\": \"description 5\"\n\t\t},\n\t\t{\n\t\t\t\"idrecord\": 6,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 6\",\n\t\t\t\"description\": \"description 6\"\n\t\t},\n\t\t{\n\t\t\t\"idrecord\": 7,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 7\",\n\t\t\t\"description\": \"description 7\"\n\t\t},\n\t\t{\n\t\t\t\"idrecord\": 8,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 8\",\n\t\t\t\"description\": \"description 8\"\n\t\t},\n\t\t{\n\t\t\t\"idrecord\": 9,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 9\",\n\t\t\t\"description\": \"description 9\"\n\t\t}\n\t],\n\t\"ColumnsToSolveOnChange\": {},\n\t\"TuiColumnSchema\": [\n\t\t{\n\t\t\t\"header\": \"IDRecord\",\n\t\t\t\"name\": \"idrecord\",\n\t\t\t\"PictTriggerSolveOnChange\": true\n\t\t},\n\t\t{\n\t\t\t\"header\": \"Entity\",\n\t\t\t\"name\": \"entity\",\n\t\t\t\"PictTriggerSolveOnChange\": true\n\t\t},\n\t\t{\n\t\t\t\"header\": \"Name\",\n\t\t\t\"name\": \"name\",\n\t\t\t\"editor\": \"text\"\n\t\t},\n\t\t{\n\t\t\t\"header\": \"Description\",\n\t\t\t\"name\": \"description\",\n\t\t\t\"editor\": \"text\"\n\t\t}\n\t]\n}","const libPictViewClass = require('pict-view');\n\nclass PictSectionTuiGrid extends libPictViewClass\n{\n\tconstructor(pFable, pOptions, pServiceHash)\n\t{\n\t\tlet tmpOptions = Object.assign({}, require('./Pict-Section-TuiGrid-DefaultConfiguration.json'), pOptions);\n\n\t\tsuper(pFable, tmpOptions, pServiceHash);\n\n\t\tthis.initialRenderComplete = false;\n\t}\n\n\tonBeforeInitialize()\n\t{\n\t\tsuper.onBeforeInitialize();\n\n\t\tthis._tuiGridPrototype = false;\n\n\t\tthis.tuiGrid = false;\n\n\t\tthis.customHeaders = require('./Pict-TuiGrid-Headers.js');\n\t\tthis.customEditors = require('./Pict-TuiGrid-Editors.js');\n\t\tthis.customFormatters = require('./Pict-TuiGrid-Formatters.js');\n\n\t\tthis.columnSchema = false;\n\t\tthis.targetElementAddress = false;\n\t\tthis.gridData = false;\n\t}\n\n\t// Overload the connectTuiGrid() function to use the inline version of the TuiGrid\n\tconnectTuiGridPrototype(pTuiGridPrototype)\n\t{\n\t\tif (typeof (pTuiGridPrototype) != 'undefined')\n\t\t{\n\t\t\tthis._tuiGridPrototype = pTuiGridPrototype;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.log.trace(`PICT-TuiGrid No TuiGrid Prototype defined or explicitly set; looking for it in the window object.`);\n\t\t\tif (typeof (window) != 'undefined')\n\t\t\t{\n\t\t\t\tif ((typeof (window.tui) != 'undefined') && (typeof (window.tui.Grid) != 'undefined'))\n\t\t\t\t{\n\t\t\t\t\tthis.log.trace(`PICT-TuiGrid Found TuiGrid Prototype in window.tuiGrid.`);\n\t\t\t\t\tthis.connectTuiGridPrototype(window.tui.Grid);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.log.error(`PICT-TuiGrid No TuiGrid Prototype found in window.tuiGrid.`);\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.log.error(`PICT-TuiGrid No TuiGrid Prototype found in window.tuiGrid -- window object unavailable.`);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @typedef {Object} TUIGridCellChange\n\t * @property {any} rowKey - The key of the row that changed.\n\t * @property {string} columnName - The name of the column that changed.\n\t * @property {any} value - The \"current\" value of the cell. Slightly different meaning in preChangeHandler vs changeHandler (before / after the change is applied).\n\t * @property {any} [nextValue] - The value that the cell will have after the change. Only populated in preChangeHandler (not changeHandler).\n\t * @property {any} [prevValue] - The value that the cell had before the change. Only populated in changeHandler (not preChangeHandler).\n\t */\n\n\t/**\n\t * @typedef {Object} TUIGridChangeEvent\n\t * @property {Object} instance - The TuiGrid instance that fired the event.\n\t * @property {TUIGridCellChange[]} changes - An array of objects representing the changes to grid cell values.\n\t */\n\n\t/**\n\t * Interface method for handling changesets from the TuiGrid control. Invoked before the change has been applied to the affected cells.\n\t *\n\t * * The pre-change cell value is stored in value while the new cell value is stored in nextValue.\n\t * * Any changes made to nextValue in this method will be reflected in the grid for that cell.\n\t *\n\t * @param {TUIGridChangeEvent} pChangeData - An event containing an array of objects representing the changes to grid cell values.\n\t */\n\tpreChangeHandler(pChangeData)\n\t{\n\t}\n\n\t/**\n\t * Interface method for handling changesets from the TuiGrid control. Invoked after the change has been applied to the affected cells.\n\t *\n\t * * Performs solver trigger for changes to any columns configured in \"ColumnsToSolveOnChange\" or with \"PictTriggerSolveOnChange\": true on a specific row.\n\t * * The previous cell value is stored in prevValue while the next cell value is stored in value.\n\t *\n\t * @param {TUIGridChangeEvent} pChangeData - An event object containing an array of objects representing the changes to grid cell values.\n\t */\n\tchangeHandler(pChangeData)\n\t{\n\t\tlet tmpSolverNecessary = false;\n\n\t\tfor (let i = 0; i < pChangeData.changes.length; i++)\n\t\t{\n\t\t\tlet tmpEntity = pChangeData.instance.getValue(pChangeData.changes[i].rowKey, 'entity');\n\t\t\tlet tmpIDRecord = pChangeData.instance.getValue(pChangeData.changes[i].rowKey, 'idrecord');\n\n\t\t\tthis.log.trace(`Generic Change Handler for TuiGrid Fired, Entity ${tmpEntity} IDRecord ${tmpIDRecord} setting Column [${pChangeData.changes[i].value}] to new Value [${pChangeData.changes[i].value}]`);\n\n\t\t\t//if (pChangeData.changes[i].columnName == 'some_important_column')\n\t\t\t//{\n\t\t\t//if (pChangeData.changes[i].value > some_important_threshold)\n\t\t\t//{\n\t\t\t// Do something\n\t\t\t//}\n\t\t\t//}\n\t\t\tif (this.options.ColumnsToSolveOnChange.hasOwnProperty(pChangeData.changes[i].columnName))\n\t\t\t{\n\t\t\t\ttmpSolverNecessary = true;\n\t\t\t}\n\t\t}\n\n\t\tif (tmpSolverNecessary)\n\t\t{\n\t\t\tthis.services.PictApplication.solve();\n\t\t}\n\t}\n\n\tonAfterRender()\n\t{\n\t\tif (!this.initialRenderComplete)\n\t\t{\n\t\t\tthis.onAfterInitialRender();\n\t\t\tthis.initialRenderComplete = true;\n\t\t}\n\t}\n\n\tonAfterInitialRender()\n\t{\n\t\t// This is where we wire up and initialize the tuigrid control -- the initial render has put the placeholder content in place.\n\t\t// Check for a tuigrid prototype, and find it in the window object it if it doesn't exist\n\t\tif (!this._tuiGridPrototype)\n\t\t{\n\t\t\tthis.connectTuiGridPrototype();\n\t\t}\n\t\t// This is where we wire up and initialize the tuigrid control\n\t\tif (this.tuiGrid)\n\t\t{\n\t\t\t// The grid is already initialized.\n\t\t\tthis.log.error(`TuiGrid going to ${this.options.TargetElementAddress} is already initialized!`);\n\t\t\treturn false;\n\t\t}\n\n\t\tif (this.options.GridDataAddress)\n\t\t{\n\t\t\tlet tmpAddressedData = this.fable.manifest.getValueByHash(this.AppData, this.options.GridDataAddress);\n\t\t\tif (typeof (tmpAddressedData) != 'object')\n\t\t\t{\n\t\t\t\tthis.log.error(`Address for GridData [${this.options.GridDataAddress}] did not return an object; it was a ${typeof (tmpAddressedData)}.`);\n\t\t\t\tthis.gridData = [];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.gridData = JSON.parse(JSON.stringify(tmpAddressedData));\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.gridData = [];\n\t\t}\n\n\t\tlet tmpTargetElementSet = this.services.ContentAssignment.getElement(this.options.TargetElementAddress);\n\t\tif (tmpTargetElementSet.length < 1)\n\t\t{\n\t\t\tthis.log.error(`Could not find target element [${this.options.TargetElementAddress}] for TuiGrid!  Rendering won't function properly.`);\n\t\t\tthis.targetElement = false;\n\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Just go for the first one.\n\t\t\tthis.targetElement = tmpTargetElementSet[0];\n\t\t}\n\n\t\t// Check to see if there are any custom formatters.\n\t\tthis.columnSchema = this.options.TuiColumnSchema;\n\t\t// Setup the solver and custom schema handlers.\n\t\tfor (let i = 0; i < this.columnSchema.length; i++)\n\t\t{\n\t\t\tlet tmpColumn = this.columnSchema[i];\n\t\t\t// If this bit is set on a column, the Form solver will trigger each time a change happens to that column.\n\t\t\tif (tmpColumn.PictTriggerSolveOnChange)\n\t\t\t{\n\t\t\t\tthis.options.ColumnsToSolveOnChange[tmpColumn.name] = tmpColumn;\n\t\t\t}\n\t\t\t// Look to see if there is an internal formatter that matches the type\n\t\t\tif ((tmpColumn.hasOwnProperty('formatter')) && (this.customFormatters.hasOwnProperty(tmpColumn.formatter)))\n\t\t\t{\n\t\t\t\t// Assign our special formatter to the column.\n\t\t\t\ttmpColumn.formatter = this.customFormatters[tmpColumn.formatter];\n\t\t\t}\n\t\t\t// Look to see if there is an editor stanza\n\t\t\tif (tmpColumn.hasOwnProperty('editor'))\n\t\t\t{\n\t\t\t\t// Look to see if there is an internal editor that matches the type\n\t\t\t\tif ((tmpColumn.editor.hasOwnProperty('type'))\n\t\t\t\t\t&& (typeof (tmpColumn.editor.type) == 'string')\n\t\t\t\t\t&& (this.customEditors.hasOwnProperty(tmpColumn.editor.type)))\n\t\t\t\t{\n\t\t\t\t\t// Assign our special editor to the column.\n\t\t\t\t\ttmpColumn.editor.type = this.customEditors[tmpColumn.editor.type];\n\t\t\t\t}\n\n\t\t\t\t// Look to see if there is an internal editor that matches the type\n\t\t\t\tif ((tmpColumn.editor.hasOwnProperty('options'))\n\t\t\t\t\t&& (typeof (tmpColumn.editor.options) == 'object')\n\t\t\t\t\t&& (tmpColumn.editor.options.hasOwnProperty('listItems'))\n\t\t\t\t\t&& (typeof (tmpColumn.editor.options.listItems) == 'string'))\n\t\t\t\t{\n\t\t\t\t\t// Look for this address!  For the Record object, we will pass in the options.\n\t\t\t\t\tlet tmpListItems = this.fable.manifest.getValueByHash({ AppData: this.AppData, Options: this.options }, tmpColumn.editor.options.listItems);\n\t\t\t\t\tif (typeof (tmpListItems) == 'object')\n\t\t\t\t\t{\n\t\t\t\t\t\ttmpColumn.editor.options.listItems = tmpListItems;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.log.warn(`Pict TuiGrid for column [${tmpColumn.name}] had [${tmpColumn.editor.options.listItems}] as a listItems address, but it didn't return an object.  It was a [${typeof (tmpListItems)}].  Setting to empty list.`);\n\t\t\t\t\t\ttmpColumn.editor.options.listItems = [];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.gridSettings = {\n\t\t\t\tdata: this.gridData,\n\t\t\t\tel: this.targetElement,\n\t\t\t\tcolumns: this.columnSchema,\n\n\t\t\t\t// This is no bueno, yo\n\t\t\t\tusageStatistics: false,\n\n\t\t\t\tscrollY: this.options.GridScrollY,\n\n\t\t\t\tcolumnOptions:\n\t\t\t\t{\n\t\t\t\t\tresizable: this.options.GridColumnWidthResizable\n\t\t\t\t}\n\t\t\t};\n\n\t\tthis.customConfigureGridSettings();\n\n\t\tlet libTuiGrid = this._tuiGridPrototype;\n\t\tthis.tuiGrid = new libTuiGrid(this.gridSettings);\n\t\tthis.tuiGrid.on('beforeChange', (pChangeData) => { this.preChangeHandler(pChangeData); });\n\t\tthis.tuiGrid.on('afterChange', (pChangeData) => { this.changeHandler(pChangeData); });\n\t}\n\n\tcustomConfigureGridSettings ()\n\t{\n\t\t// This can be overloaded to tweak up the this.gridSettings\n\t}\n\n\tSetGridValue(pCellColumnToBeSet, pCellValueToSet, pLookupValue, pLookupColumn)\n\t{\n\t\tif (typeof (pLookupValue) == 'undefined')\n\t\t{\n\t\t\tconsole.log(`Could not set grid value [${pCellColumnToBeSet}] = [${pCellValueToSet}] looked up by [${pLookupColumn}]::[${pLookupValue}].  No valid lookup value!`);\n\t\t\treturn false;\n\t\t}\n\n\t\tif (this.tuiGrid)\n\t\t{\n\t\t\tlet tmpData = this.tuiGrid.getData();\n\n\t\t\tfor (let i = 0; i < tmpData.length; i++)\n\t\t\t{\n\t\t\t\tlet tmpRecord = tmpData[i];\n\n\t\t\t\tif (tmpRecord[pLookupColumn] == pLookupValue)\n\t\t\t\t{\n\t\t\t\t\tthis.tuiGrid.setValue(i, pCellColumnToBeSet, pCellValueToSet);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.log.warn(`Could not set grid value [${pCellColumnToBeSet}] = [${pCellValueToSet}] looked up by [${pLookupColumn}]::[${pLookupValue}].  No valid grid!`);\n\t\t}\n\t}\n\n\tSetGridValueByRowKey(pCellColumnToBeSet, pCellValueToSet, pRowKey)\n\t{\n\t\tif (typeof (pRowKey) == 'undefined')\n\t\t{\n\t\t\tthis.log.error(`Could not set grid value [${pCellColumnToBeSet}] = [${pCellValueToSet}] looked up by row key [${pRowKey}].  No valid row key!`);\n\t\t\treturn false;\n\t\t}\n\n\n\t\tif (this.tuiGrid)\n\t\t{\n\t\t\tthis.tuiGrid.setValue(pRowKey, pCellColumnToBeSet, pCellValueToSet);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.log.warn(`Could not set grid value [${pCellColumnToBeSet}] = [${pCellValueToSet}] looked up by [${pLookupColumn}]::[${pLookupValue}].  No valid grid!`);\n\t\t}\n\t}\n}\n\nmodule.exports = PictSectionTuiGrid;\n\nmodule.exports.default_configuration = require('./Pict-Section-TuiGrid-DefaultConfiguration.json');\n","// Custom number editor class with an option for precision\nclass tuiCustomEditorNumber\n{\n\tconstructor(pProperties)\n\t{\n\t\tconst tmpElement = document.createElement('input');\n\n\t\tconst decimalPrecision = (pProperties.columnInfo.editor.options.decimalPrecision) ? pProperties.columnInfo.editor.options.decimalPrecision : 3;\n\n\t\ttmpElement.type = 'number';\n\t\ttmpElement.value = String(pProperties.value);\n\t\ttmpElement.oninput = (pElement) =>\n\t\t{\n\t\t\tconst tmpCastNumber = parseFloat(pElement.target.value).toFixed(decimalPrecision).toString()\n\t\t\tif (tmpCastNumber.length < parseFloat(pElement.target.value).toString().length)\n\t\t\t{\n\t\t\t\tpElement.target.value = tmpCastNumber;\n\t\t\t}\n\t\t};\n\n\t\tthis.Element = tmpElement;\n\t}\n\n\tgetElement()\n\t{\n\t\treturn this.Element;\n\t}\n\n\tgetValue()\n\t{\n\t\treturn this.Element.value;\n\t}\n\n\tmounted()\n\t{\n\t\tthis.Element.select();\n\t}\n}\n\nmodule.exports = tuiCustomEditorNumber;","const tuiGridHeaders = {};\n\ntuiGridHeaders.EditorNumber = require('./Pict-TuiGrid-Editor-Number.js');\n\nmodule.exports = tuiGridHeaders;","// Static functions for formatting data in the grid.\nconst tuiGridFormatters = {};\n\ntuiGridFormatters.FormatterTwoDigitNumber = (pCell) =>\n\t{\n\t\tlet tmpCellValue = Number.parseFloat(pCell.value).toFixed(2);\n\t\tif (isNaN(tmpCellValue))\n\t\t{\n\t\t\treturn '';\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn tmpCellValue;\n\t\t}\n\t}\n\ntuiGridFormatters.FormatterCurrencyNumber = (pCell) =>\n\t{\n\t\tlet tmpCellValue = tuiGridFormatters.FormatterTwoDigitNumber(pCell);\n\t\tif (tmpCellValue == '')\n\t\t{\n\t\t\treturn tmpCellValue;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn `$${tmpCellValue}`;\n\t\t}\n\t}\n\nmodule.exports = tuiGridFormatters;","const tuiGridHeaders = {};\n\n// Custom column header where the header is hidden\nclass tuiCustomColumnHeaderNone\n{\n\tconstructor()\n\t{\n\t\tlet tmpElement = document.createElement('input');\n\t\ttmpElement.type = 'hidden';\n\t\ttmpElement.value = '';\n\t\tthis.Element = tmpElement;\n\t}\n\n\tgetElement()\n\t{\n\t\treturn this.Element;\n\t}\n\n\trender()\n\t{\n\t\t// Noop!\n\t}\n}\n\ntuiGridHeaders.CustomColumnHeaderNone = tuiCustomColumnHeaderNone;\n\nmodule.exports = tuiGridHeaders;"]}