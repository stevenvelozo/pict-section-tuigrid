{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/fable-serviceproviderbase/package.json","pict-section-tuigrid.compatible.js","node_modules/fable-serviceproviderbase/source/Fable-ServiceProviderBase.js","node_modules/pict-view/package.json","node_modules/pict-view/source/Pict-View.js","source/Pict-Section-TuiGrid-DefaultConfiguration.json","source/Pict-Section-TuiGrid.js","source/Pict-TuiGrid-Editor-Number.js","source/Pict-TuiGrid-Editor-Text.js","source/Pict-TuiGrid-Editors.js","source/Pict-TuiGrid-Headers.js"],"names":["f","exports","_typeof","module","define","amd","g","window","global","self","PictSectionTuigrid","r","e","n","t","o","i","c","require","u","a","Error","code","p","call","length","libPackage","FableServiceProviderBase","pFable","pOptions","pServiceHash","_classCallCheck","isFable","connectFable","fable","_PackageFableServiceProvider","UUID","getUUID","options","concat","Math","floor","random","serviceType","Hash","_createClass","key","value","tmpErrorMessage","console","log","Logging","services","servicesMap","_defineProperty","CoreServiceProviderBase","libFableServiceBase","defaultPictViewSettings","DefaultRenderable","DefaultDestinationAddress","DefaultTemplateRecordAddress","ViewIdentifier","AutoInitialize","AutoInitializeOrdinal","AutoRender","AutoRenderOrdinal","AutoSolveWithApp","AutoSolveOrdinal","CSSHash","CSS","CSSProvider","CSSPriority","Templates","DefaultTemplates","Renderables","Manifests","PictView","_libFableServiceBase","_this","tmpOptions","Object","assign","JSON","parse","stringify","_callSuper","_Package","pict","AppData","Bundle","initializeTimestamp","lastSolvedTimestamp","lastRenderedTimestamp","lastMarshalFromViewTimestamp","lastMarshalToViewTimestamp","tmpTemplate","error","Source","TemplateProvider","addTemplate","Template","tmpDefaultTemplate","addDefaultTemplate","Prefix","Postfix","tmpCSSHash","tmpCSSProvider","CSSMap","addCSS","renderables","tmpRenderable","addRenderable","_inherits","pRenderableHash","pTemplateHash","pDefaultTemplateRecordAddress","pDefaultDestinationAddress","pRenderMethod","tmpRenderMethod","RenderableHash","TemplateHash","ContentDestinationAddress","RenderMethod","LogNoisiness","trace","onBeforeInitialize","onBeforeInitializeAsync","fCallback","onInitialize","onInitializeAsync","initialize","LogControlFlow","onAfterInitialize","getTimeStamp","warn","initializeAsync","_this2","tmpAnticipate","instantiateServiceProviderWithoutRegistration","info","anticipate","bind","onAfterInitializeAsync","wait","pError","message","stack","onBeforeRender","pRenderable","pRenderDestinationAddress","pRecord","onBeforeRenderAsync","buildRenderOptions","pTemplateRecordAddress","tmpRenderOptions","Valid","Renderable","DestinationAddress","RecordAddress","Record","DataProvider","getDataByAddress","undefined","assignRenderContent","pContent","ContentAssignment","projectContent","TestAddress","render","tmpRenderableHash","tmpRenderDestinationAddress","tmpRecordAddress","tmpRecord","tmpContent","parseTemplateByHash","onAfterRender","renderAsync","_this3","tmpCallback","Name","newAnticipate","fOnBeforeRenderCallback","fAsyncTemplateCallback","fOnAfterRenderCallback","onAfterRenderAsync","renderDefaultAsync","basicRender","basicRenderAsync","_this4","onBeforeSolve","onBeforeSolveAsync","onSolve","onSolveAsync","solve","onAfterSolve","solveAsync","_this5","onAfterSolveAsync","onBeforeMarshalFromView","onBeforeMarshalFromViewAsync","onMarshalFromView","onMarshalFromViewAsync","marshalFromView","onAfterMarshalFromView","marshalFromViewAsync","_this6","onAfterMarshalFromViewAsync","onBeforeMarshalToView","onBeforeMarshalToViewAsync","onMarshalToView","onMarshalToViewAsync","marshalToView","onAfterMarshalToView","marshalToViewAsync","_this7","onAfterMarshalToViewAsync","get","libPictViewClass","PictSectionTuiGrid","_libPictViewClass","_this8","dateFormatter","initialRenderComplete","customFormatters","_superPropGet","_tuiGridPrototype","tuiGrid","customHeaders","customEditors","initializeCustomFormatters","columnSchema","targetElementAddress","gridData","_this9","FormatterTwoDigitNumber","pCell","_pCell$decimalPrecisi","tmpCellValue","Number","parseFloat","tmpPrecision","decimalPrecision","isNaN","roundPrecise","FormatterCurrencyNumber","_pCell$decimalPrecisi2","DataFormat","formatterDollars","FormatterRoundedNumber","_pCell$decimalPrecisi3","FormatterDate","tmpDate","Dates","dayJS","utc","dateformat","format","connectTuiGridPrototype","pTuiGridPrototype","tui","Grid","preChangeHandler","pChangeData","changeHandler","tmpSolverNecessary","changes","tmpEntity","instance","getValue","rowKey","tmpIDRecord","ColumnsToSolveOnChange","hasOwnProperty","columnName","PictApplication","onAfterInitialRender","_this10","TargetElementAddress","GridDataAddress","tmpAddressSpace","Fable","Pict","Options","tmpAddressedData","manifest","getValueByHash","tmpTargetElementSet","getElement","targetElement","TuiColumnSchema","tmpColumn","PictTriggerSolveOnChange","name","formatter","editor","type","listItems","tmpListItems","gridSettings","data","el","columns","usageStatistics","scrollY","GridScrollY","columnOptions","resizable","GridColumnWidthResizable","customConfigureGridSettings","libTuiGrid","on","tmpChangeData","SetGridValue","pCellColumnToBeSet","pCellValueToSet","pLookupValue","pLookupColumn","tmpData","getData","setValue","SetGridValueByRowKey","pRowKey","default_configuration","tuiCustomEditorNumber","pProperties","tmpElement","document","createElement","columnInfo","String","oninput","pElement","target","HTMLInputElement","tmpCastNumber","toFixed","toString","Element","mounted","select","tuiCustomEditorText","placeholder","pattern","minLength","maxLength","required","EditorNumber","EditorText","tuiCustomColumnHeaderNone","CustomColumnHeaderNone"],"mappings":"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","file":"pict-section-tuigrid.compatible.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","module.exports={\n    \"name\": \"fable-serviceproviderbase\",\n    \"version\": \"3.0.15\",\n    \"description\": \"Simple base classes for fable services.\",\n    \"main\": \"source/Fable-ServiceProviderBase.js\",\n    \"scripts\": {\n        \"start\": \"node source/Fable-ServiceProviderBase.js\",\n        \"test\": \"npx mocha -u tdd -R spec\",\n        \"tests\": \"npx mocha -u tdd --exit -R spec --grep\",\n        \"coverage\": \"npx nyc --reporter=lcov --reporter=text-lcov npx mocha -- -u tdd -R spec\",\n        \"build\": \"npx quack build\"\n    },\n    \"mocha\": {\n        \"diff\": true,\n        \"extension\": [\n            \"js\"\n        ],\n        \"package\": \"./package.json\",\n        \"reporter\": \"spec\",\n        \"slow\": \"75\",\n        \"timeout\": \"5000\",\n        \"ui\": \"tdd\",\n        \"watch-files\": [\n            \"source/**/*.js\",\n            \"test/**/*.js\"\n        ],\n        \"watch-ignore\": [\n            \"lib/vendor\"\n        ]\n    },\n    \"repository\": {\n        \"type\": \"git\",\n        \"url\": \"https://github.com/stevenvelozo/fable-serviceproviderbase.git\"\n    },\n    \"keywords\": [\n        \"entity\",\n        \"behavior\"\n    ],\n    \"author\": \"Steven Velozo <steven@velozo.com> (http://velozo.com/)\",\n    \"license\": \"MIT\",\n    \"bugs\": {\n        \"url\": \"https://github.com/stevenvelozo/fable-serviceproviderbase/issues\"\n    },\n    \"homepage\": \"https://github.com/stevenvelozo/fable-serviceproviderbase\",\n    \"devDependencies\": {\n        \"fable\": \"^3.0.143\",\n        \"quackage\": \"^1.0.33\"\n    }\n}","(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.PictSectionTuigrid = f()}})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){\nmodule.exports={\n    \"name\": \"fable-serviceproviderbase\",\n    \"version\": \"3.0.15\",\n    \"description\": \"Simple base classes for fable services.\",\n    \"main\": \"source/Fable-ServiceProviderBase.js\",\n    \"scripts\": {\n        \"start\": \"node source/Fable-ServiceProviderBase.js\",\n        \"test\": \"npx mocha -u tdd -R spec\",\n        \"tests\": \"npx mocha -u tdd --exit -R spec --grep\",\n        \"coverage\": \"npx nyc --reporter=lcov --reporter=text-lcov npx mocha -- -u tdd -R spec\",\n        \"build\": \"npx quack build\"\n    },\n    \"mocha\": {\n        \"diff\": true,\n        \"extension\": [\n            \"js\"\n        ],\n        \"package\": \"./package.json\",\n        \"reporter\": \"spec\",\n        \"slow\": \"75\",\n        \"timeout\": \"5000\",\n        \"ui\": \"tdd\",\n        \"watch-files\": [\n            \"source/**/*.js\",\n            \"test/**/*.js\"\n        ],\n        \"watch-ignore\": [\n            \"lib/vendor\"\n        ]\n    },\n    \"repository\": {\n        \"type\": \"git\",\n        \"url\": \"https://github.com/stevenvelozo/fable-serviceproviderbase.git\"\n    },\n    \"keywords\": [\n        \"entity\",\n        \"behavior\"\n    ],\n    \"author\": \"Steven Velozo <steven@velozo.com> (http://velozo.com/)\",\n    \"license\": \"MIT\",\n    \"bugs\": {\n        \"url\": \"https://github.com/stevenvelozo/fable-serviceproviderbase/issues\"\n    },\n    \"homepage\": \"https://github.com/stevenvelozo/fable-serviceproviderbase\",\n    \"devDependencies\": {\n        \"fable\": \"^3.0.143\",\n        \"quackage\": \"^1.0.33\"\n    }\n}\n},{}],2:[function(require,module,exports){\n/**\n* Fable Service Base\n* @author <steven@velozo.com>\n*/\n\nconst libPackage = require('../package.json');\n\nclass FableServiceProviderBase\n{\n\t// The constructor can be used in two ways:\n\t// 1) With a fable, options object and service hash (the options object and service hash are optional)\n\t// 2) With an object or nothing as the first parameter, where it will be treated as the options object\n\tconstructor(pFable, pOptions, pServiceHash)\n\t{\n\t\t// Check if a fable was passed in; connect it if so\n\t\tif ((typeof(pFable) === 'object') && pFable.isFable)\n\t\t{\n\t\t\tthis.connectFable(pFable);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.fable = false;\n\t\t}\n\n\t\t// Initialize the services map if it wasn't passed in\n\t\t/** @type {Object} */\n\t\tthis._PackageFableServiceProvider = libPackage;\n\n\t\t// initialize options and UUID based on whether the fable was passed in or not.\n\t\tif (this.fable)\n\t\t{\n\t\t\tthis.UUID = pFable.getUUID();\n\t\t\tthis.options = (typeof(pOptions) === 'object') ? pOptions\n\t\t\t\t\t\t\t: {};\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// With no fable, check to see if there was an object passed into either of the first two\n\t\t\t// Parameters, and if so, treat it as the options object\n\t\t\tthis.options = ((typeof(pFable) === 'object') && !pFable.isFable) ? pFable\n\t\t\t\t\t\t\t: (typeof(pOptions) === 'object') ? pOptions\n\t\t\t\t\t\t\t: {};\n\t\t\tthis.UUID = `CORE-SVC-${Math.floor((Math.random() * (99999 - 10000)) + 10000)}`\n\t\t}\n\n\t\t// It's expected that the deriving class will set this\n\t\tthis.serviceType = `Unknown-${this.UUID}`;\n\n\t\t// The service hash is used to identify the specific instantiation of the service in the services map\n\t\tthis.Hash = (typeof(pServiceHash) === 'string') ? pServiceHash \n\t\t\t\t\t: (!this.fable && (typeof(pOptions) === 'string')) ? pOptions\n\t\t\t\t\t: `${this.UUID}`;\n\t}\n\n\tconnectFable(pFable)\n\t{\n\t\tif ((typeof(pFable) !== 'object') || (!pFable.isFable))\n\t\t{\n\t\t\tlet tmpErrorMessage = `Fable Service Provider Base: Cannot connect to Fable, invalid Fable object passed in.  The pFable parameter was a [${typeof(pFable)}].}`;\n\t\t\tconsole.log(tmpErrorMessage);\n\t\t\treturn new Error(tmpErrorMessage);\n\t\t}\n\n\t\tif (!this.fable)\n\t\t{\n\t\t\tthis.fable = pFable;\n\t\t}\n\n\t\tif (!this.log)\n\t\t{\n\t\t\tthis.log = this.fable.Logging;\n\t\t}\n\t\tif (!this.services)\n\t\t{\n\t\t\tthis.services = this.fable.services;\n\t\t}\n\n\t\tif (!this.servicesMap)\n\t\t{\n\t\t\tthis.servicesMap = this.fable.servicesMap;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tstatic isFableService = true;\n}\n\nmodule.exports = FableServiceProviderBase;\n\n// This is left here in case we want to go back to having different code/base class for \"core\" services\nmodule.exports.CoreServiceProviderBase = FableServiceProviderBase;\n},{\"../package.json\":1}],3:[function(require,module,exports){\nmodule.exports={\n    \"name\": \"pict-view\",\n    \"version\": \"1.0.61\",\n    \"description\": \"Pict View Base Class\",\n    \"main\": \"source/Pict-View.js\",\n    \"scripts\": {\n        \"test\": \"./node_modules/.bin/mocha -u tdd -R spec\",\n        \"start\": \"node source/Pict-View.js\",\n        \"coverage\": \"./node_modules/.bin/nyc --reporter=lcov --reporter=text-lcov ./node_modules/mocha/bin/_mocha -- -u tdd -R spec\",\n        \"build\": \"npx quack build\",\n        \"docker-dev-build\": \"docker build ./ -f Dockerfile_LUXURYCode -t pict-view-image:local\",\n        \"docker-dev-run\": \"docker run -it -d --name pict-view-dev -p 30001:8080 -p 38086:8086 -v \\\"$PWD/.config:/home/coder/.config\\\"  -v \\\"$PWD:/home/coder/pict-view\\\" -u \\\"$(id -u):$(id -g)\\\" -e \\\"DOCKER_USER=$USER\\\" pict-view-image:local\",\n        \"docker-dev-shell\": \"docker exec -it pict-view-dev /bin/bash\",\n        \"types\": \"tsc -p .\",\n        \"lint\": \"eslint source/**\"\n    },\n    \"types\": \"types/source/Pict-View.d.ts\",\n    \"repository\": {\n        \"type\": \"git\",\n        \"url\": \"git+https://github.com/stevenvelozo/pict-view.git\"\n    },\n    \"author\": \"steven velozo <steven@velozo.com>\",\n    \"license\": \"MIT\",\n    \"bugs\": {\n        \"url\": \"https://github.com/stevenvelozo/pict-view/issues\"\n    },\n    \"homepage\": \"https://github.com/stevenvelozo/pict-view#readme\",\n    \"devDependencies\": {\n        \"@eslint/js\": \"^9.28.0\",\n        \"browser-env\": \"^3.3.0\",\n        \"eslint\": \"^9.28.0\",\n        \"pict\": \"^1.0.272\",\n        \"quackage\": \"^1.0.41\",\n        \"typescript\": \"^5.8.3\"\n    },\n    \"mocha\": {\n        \"diff\": true,\n        \"extension\": [\n            \"js\"\n        ],\n        \"package\": \"./package.json\",\n        \"reporter\": \"spec\",\n        \"slow\": \"75\",\n        \"timeout\": \"5000\",\n        \"ui\": \"tdd\",\n        \"watch-files\": [\n            \"source/**/*.js\",\n            \"test/**/*.js\"\n        ],\n        \"watch-ignore\": [\n            \"lib/vendor\"\n        ]\n    },\n    \"dependencies\": {\n        \"fable\": \"^3.1.11\",\n        \"fable-serviceproviderbase\": \"^3.0.15\"\n    }\n}\n\n},{}],4:[function(require,module,exports){\n\nconst libFableServiceBase = require('fable-serviceproviderbase');\n\nconst libPackage = require('../package.json');\n\nconst defaultPictViewSettings = (\n\t{\n\t\tDefaultRenderable: false,\n\t\tDefaultDestinationAddress: false,\n\t\tDefaultTemplateRecordAddress: false,\n\n\t\tViewIdentifier: false,\n\n\t\t// If this is set to true, when the App initializes this will.\n\t\t// After the App initializes, initialize will be called as soon as it's added.\n\t\tAutoInitialize: true,\n\t\tAutoInitializeOrdinal: 0,\n\n\t\t// If this is set to true, when the App autorenders (on load) this will.\n\t\t// After the App initializes, render will be called as soon as it's added.\n\t\tAutoRender: true,\n\t\tAutoRenderOrdinal: 0,\n\n\t\tAutoSolveWithApp: true,\n\t\tAutoSolveOrdinal: 0,\n\n\t\tCSSHash: false,\n\t\tCSS: false,\n\t\tCSSProvider: false,\n\t\tCSSPriority: 500,\n\n\t\tTemplates: [],\n\n\t\tDefaultTemplates: [],\n\n\t\tRenderables: [],\n\n\t\tManifests: {}\n\t});\n\n/** @typedef {(error?: Error) => void} ErrorCallback */\n/** @typedef {number | boolean} PictTimestamp */\n\n/**\n * @typedef {'replace' | 'append' | 'prepend' | 'append_once'} RenderMethod\n */\n/**\n * @typedef {Object} Renderable\n *\n * @property {string} RenderableHash - A unique hash for the renderable.\n * @property {string} TemplateHash] - The hash of the template to use for rendering this renderable.\n * @property {string} [DefaultTemplateRecordAddress] - The default address for resolving the data record for this renderable.\n * @property {string} [ContentDestinationAddress] - The default address (DOM CSS selector) for rendering the content of this renderable.\n * @property {RenderMethod} [RenderMethod=replace] - The method to use when projecting the renderable to the DOM ('replace', 'append', 'prepend', 'append_once').\n * @property {string} [TestAddress] - The address to use for testing the renderable.\n */\n\n/**\n * Represents a view in the Pict ecosystem.\n */\nclass PictView extends libFableServiceBase\n{\n\t/**\n\t * @param {any} pFable - The Fable object that this service is attached to.\n\t * @param {any} [pOptions] - (optional) The options for this service.\n\t * @param {string} [pServiceHash] - (optional) The hash of the service.\n\t */\n\tconstructor(pFable, pOptions, pServiceHash)\n\t{\n\t\t// Intersect default options, parent constructor, service information\n\t\tlet tmpOptions = Object.assign({}, JSON.parse(JSON.stringify(defaultPictViewSettings)), pOptions);\n\t\tsuper(pFable, tmpOptions, pServiceHash);\n\t\t//FIXME: add types to fable and ancillaries\n\t\t/** @type {any} */\n\t\tthis.fable;\n\t\t/** @type {any} */\n\t\tthis.options;\n\t\t/** @type {String} */\n\t\tthis.UUID;\n\t\t/** @type {String} */\n\t\tthis.Hash;\n\t\t/** @type {any} */\n\t\tthis.log;\n\n\t\tif (!this.options.ViewIdentifier)\n\t\t{\n\t\t\tthis.options.ViewIdentifier = `AutoViewID-${this.fable.getUUID()}`;\n\t\t}\n\t\tthis.serviceType = 'PictView';\n\t\t/** @type {Record<string, any>} */\n\t\tthis._Package = libPackage;\n\t\t// Convenience and consistency naming\n\t\t/** @type {import('pict') & { log: any, instantiateServiceProviderWithoutRegistration: (hash: String) => any }} */\n\t\tthis.pict = this.fable;\n\t\t// Wire in the essential Pict application state\n\t\tthis.AppData = this.pict.AppData;\n\t\tthis.Bundle = this.pict.Bundle;\n\n\t\t/** @type {PictTimestamp} */\n\t\tthis.initializeTimestamp = false;\n\t\t/** @type {PictTimestamp} */\n\t\tthis.lastSolvedTimestamp = false;\n\t\t/** @type {PictTimestamp} */\n\t\tthis.lastRenderedTimestamp = false;\n\t\t/** @type {PictTimestamp} */\n\t\tthis.lastMarshalFromViewTimestamp = false;\n\t\t/** @type {PictTimestamp} */\n\t\tthis.lastMarshalToViewTimestamp = false;\n\n\t\t// Load all templates from the array in the options\n\t\t// Templates are in the form of {Hash:'Some-Template-Hash',Template:'Template content',Source:'TemplateSource'}\n\t\tfor (let i = 0; i < this.options.Templates.length; i++)\n\t\t{\n\t\t\tlet tmpTemplate = this.options.Templates[i];\n\n\t\t\tif (!('Hash' in tmpTemplate) || !('Template' in tmpTemplate))\n\t\t\t{\n\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not load Template ${i} in the options array.`, tmpTemplate);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (!tmpTemplate.Source)\n\t\t\t\t{\n\t\t\t\t\ttmpTemplate.Source = `PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} options object.`;\n\t\t\t\t}\n\t\t\t\tthis.pict.TemplateProvider.addTemplate(tmpTemplate.Hash, tmpTemplate.Template, tmpTemplate.Source);\n\t\t\t}\n\t\t}\n\n\t\t// Load all default templates from the array in the options\n\t\t// Templates are in the form of {Prefix:'',Postfix:'-List-Row',Template:'Template content',Source:'TemplateSourceString'}\n\t\tfor (let i = 0; i < this.options.DefaultTemplates.length; i++)\n\t\t{\n\t\t\tlet tmpDefaultTemplate = this.options.DefaultTemplates[i];\n\n\t\t\tif (!('Postfix' in tmpDefaultTemplate) || !('Template' in tmpDefaultTemplate))\n\t\t\t{\n\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not load Default Template ${i} in the options array.`, tmpDefaultTemplate);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (!tmpDefaultTemplate.Source)\n\t\t\t\t{\n\t\t\t\t\ttmpDefaultTemplate.Source = `PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} options object.`;\n\t\t\t\t}\n\t\t\t\tthis.pict.TemplateProvider.addDefaultTemplate(tmpDefaultTemplate.Prefix, tmpDefaultTemplate.Postfix, tmpDefaultTemplate.Template, tmpDefaultTemplate.Source);\n\t\t\t}\n\t\t}\n\n\t\t// Load the CSS if it's available\n\t\tif (this.options.CSS)\n\t\t{\n\t\t\tlet tmpCSSHash = this.options.CSSHash ? this.options.CSSHash : `View-${this.options.ViewIdentifier}`;\n\t\t\tlet tmpCSSProvider = this.options.CSSProvider ? this.options.CSSProvider : tmpCSSHash;\n\t\t\tthis.pict.CSSMap.addCSS(tmpCSSHash, this.options.CSS, tmpCSSProvider, this.options.CSSPriority);\n\t\t}\n\n\t\t// Load all renderables\n\t\t// Renderables are launchable renderable instructions with templates\n\t\t// They look as such: {Identifier:'ContentEntry', TemplateHash:'Content-Entry-Section-Main', ContentDestinationAddress:'#ContentSection', RecordAddress:'AppData.Content.DefaultText', ManifestTransformation:'ManyfestHash', ManifestDestinationAddress:'AppData.Content.DataToTransformContent'}\n\t\t// The only parts that are necessary are Identifier and Template\n\t\t// A developer can then do render('ContentEntry') and it just kinda works.  Or they can override the ContentDestinationAddress\n\t\t/** @type {Object<String, Renderable>} */\n\t\tthis.renderables = {};\n\t\tfor (let i = 0; i < this.options.Renderables.length; i++)\n\t\t{\n\t\t\t/** @type {Renderable} */\n\t\t\tlet tmpRenderable = this.options.Renderables[i];\n\t\t\tthis.addRenderable(tmpRenderable);\n\t\t}\n\t}\n\n\t/**\n\t * Adds a renderable to the view.\n\t *\n\t * @param {string | Renderable} pRenderableHash - The hash of the renderable, or a renderable object.\n\t * @param {string} [pTemplateHash] - (optional) The hash of the template for the renderable.\n\t * @param {string} [pDefaultTemplateRecordAddress] - (optional) The default data address for the template.\n\t * @param {string} [pDefaultDestinationAddress] - (optional) The default destination address for the renderable.\n\t * @param {RenderMethod} [pRenderMethod=replace] - (optional) The method to use when rendering the renderable (ex. 'replace').\n\t */\n\taddRenderable(pRenderableHash, pTemplateHash, pDefaultTemplateRecordAddress, pDefaultDestinationAddress, pRenderMethod)\n\t{\n\t\t/** @type {Renderable} */\n\t\tlet tmpRenderable;\n\n\t\tif (typeof(pRenderableHash) == 'object')\n\t\t{\n\t\t\t// The developer passed in the renderable as an object.\n\t\t\t// Use theirs instead!\n\t\t\ttmpRenderable = pRenderableHash;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t/** @type {RenderMethod} */\n\t\t\tlet tmpRenderMethod = (typeof(pRenderMethod) !== 'string') ? pRenderMethod : 'replace';\n\t\t\ttmpRenderable = (\n\t\t\t\t{\n\t\t\t\t\tRenderableHash: pRenderableHash,\n\t\t\t\t\tTemplateHash: pTemplateHash,\n\t\t\t\t\tDefaultTemplateRecordAddress: pDefaultTemplateRecordAddress,\n\t\t\t\t\tContentDestinationAddress: pDefaultDestinationAddress,\n\t\t\t\t\tRenderMethod: tmpRenderMethod\n\t\t\t\t});\n\t\t}\n\n\t\tif ((typeof(tmpRenderable.RenderableHash) != 'string') || (typeof(tmpRenderable.TemplateHash) != 'string'))\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not load Renderable; RenderableHash or TemplateHash are invalid.`, tmpRenderable);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (this.pict.LogNoisiness > 0)\n\t\t\t{\n\t\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} adding renderable [${tmpRenderable.RenderableHash}] pointed to template ${tmpRenderable.TemplateHash}.`);\n\t\t\t}\n\n\t\t\tthis.renderables[tmpRenderable.RenderableHash] = tmpRenderable;\n\t\t}\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*                        Code Section: Initialization                        */\n\t/* -------------------------------------------------------------------------- */\n\t/**\n\t * Lifecycle hook that triggers before the view is initialized.\n\t */\n\tonBeforeInitialize()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onBeforeInitialize:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers before the view is initialized (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonBeforeInitializeAsync(fCallback)\n\t{\n\t\tthis.onBeforeInitialize();\n\t\treturn fCallback();\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers when the view is initialized.\n\t */\n\tonInitialize()\n\t{\n\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onInitialize:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers when the view is initialized (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonInitializeAsync(fCallback)\n\t{\n\t\tthis.onInitialize();\n\t\treturn fCallback();\n\t}\n\n\t/**\n\t * Performs view initialization.\n\t */\n\tinitialize()\n\t{\n\t\tif (this.pict.LogControlFlow)\n\t\t{\n\t\t\tthis.log.trace(`PICT-ControlFlow VIEW [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} initialize:`);\n\t\t}\n\n\t\tif (!this.initializeTimestamp)\n\t\t{\n\t\t\tthis.onBeforeInitialize();\n\t\t\tthis.onInitialize();\n\t\t\tthis.onAfterInitialize();\n\t\t\tthis.initializeTimestamp = this.pict.log.getTimeStamp();\n\t\t\treturn true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.log.warn(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} initialize called but initialization is already completed.  Aborting.`);\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * Performs view initialization (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tinitializeAsync(fCallback)\n\t{\n\t\tif (this.pict.LogControlFlow)\n\t\t{\n\t\t\tthis.log.trace(`PICT-ControlFlow VIEW [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} initializeAsync:`);\n\t\t}\n\n\t\tif (!this.initializeTimestamp)\n\t\t{\n\t\t\tlet tmpAnticipate = this.pict.instantiateServiceProviderWithoutRegistration('Anticipate');\n\n\t\t\tif (this.pict.LogNoisiness > 0)\n\t\t\t{\n\t\t\t\tthis.log.info(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} beginning initialization...`);\n\t\t\t}\n\n\t\t\ttmpAnticipate.anticipate(this.onBeforeInitializeAsync.bind(this));\n\t\t\ttmpAnticipate.anticipate(this.onInitializeAsync.bind(this));\n\t\t\ttmpAnticipate.anticipate(this.onAfterInitializeAsync.bind(this));\n\n\t\t\ttmpAnticipate.wait(\n\t\t\t\t/** @param {Error} pError */\n\t\t\t\t(pError) =>\n\t\t\t\t{\n\t\t\t\t\tif (pError)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} initialization failed: ${pError.message || pError}`, { stack: pError.stack });\n\t\t\t\t\t}\n\t\t\t\t\tthis.initializeTimestamp = this.pict.log.getTimeStamp();\n\t\t\t\t\tif (this.pict.LogNoisiness > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.log.info(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} initialization complete.`);\n\t\t\t\t\t}\n\t\t\t\t\treturn fCallback();\n\t\t\t\t});\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.log.warn(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} async initialize called but initialization is already completed.  Aborting.`);\n\t\t\t// TODO: Should this be an error?\n\t\t\treturn fCallback();\n\t\t}\n\t}\n\n\tonAfterInitialize()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onAfterInitialize:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers after the view is initialized (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonAfterInitializeAsync(fCallback)\n\t{\n\t\tthis.onAfterInitialize();\n\t\treturn fCallback();\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*                            Code Section: Render                            */\n\t/* -------------------------------------------------------------------------- */\n\t/**\n\t * Lifecycle hook that triggers before the view is rendered.\n\t *\n\t * @param {Renderable} pRenderable - The renderable that will be rendered.\n\t * @param {string} pRenderDestinationAddress - The address where the renderable will be rendered.\n\t * @param {any} pRecord - The record (data) that will be used to render the renderable.\n\t */\n\tonBeforeRender(pRenderable, pRenderDestinationAddress, pRecord)\n\t{\n\t\t// Overload this to mess with stuff before the content gets generated from the template\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onBeforeRender:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers before the view is rendered (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonBeforeRenderAsync(fCallback)\n\t{\n\t\treturn fCallback();\n\t}\n\n\t/**\n\t * Builds the render options for a renderable.\n\t *\n\t * For DRY purposes on the three flavors of render.\n\t *\n\t * @param {string|ErrorCallback} [pRenderableHash] - The hash of the renderable to render.\n\t * @param {string|ErrorCallback} [pRenderDestinationAddress] - The address where the renderable will be rendered.\n\t * @param {string|object|ErrorCallback} [pTemplateRecordAddress] - The address of (or actual obejct) where the data for the template is stored.\n\t */\n\tbuildRenderOptions(pRenderableHash, pRenderDestinationAddress, pTemplateRecordAddress)\n\t{\n\t\tlet tmpRenderOptions = {Valid: true};\n\t\ttmpRenderOptions.RenderableHash = (typeof (pRenderableHash) === 'string') ? pRenderableHash :\n\t\t\t\t\t\t\t\t(typeof (this.options.DefaultRenderable) == 'string') ?\n\t\t\t\t\t\t\t\tthis.options.DefaultRenderable : false;\n\t\tif (!tmpRenderOptions.RenderableHash)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not find a suitable RenderableHash ${tmpRenderOptions.RenderableHash} (param ${pRenderableHash}because it is not a valid renderable.`);\n\t\t\ttmpRenderOptions.Valid = false;\n\t\t}\n\n\t\ttmpRenderOptions.Renderable = this.renderables[tmpRenderOptions.RenderableHash];\n\t\tif (!tmpRenderOptions.Renderable)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderOptions.RenderableHash} (param ${pRenderableHash}) because it does not exist.`);\n\t\t\ttmpRenderOptions.Valid = false;\n\t\t}\n\n\t\ttmpRenderOptions.DestinationAddress = (typeof (pRenderDestinationAddress) === 'string') ? pRenderDestinationAddress :\n\t\t\t(typeof (tmpRenderOptions.Renderable.ContentDestinationAddress) === 'string') ? tmpRenderOptions.Renderable.ContentDestinationAddress :\n\t\t\t\t(typeof (this.options.DefaultDestinationAddress) === 'string') ? this.options.DefaultDestinationAddress : false;\n\t\tif (!tmpRenderOptions.DestinationAddress)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderOptions.RenderableHash} (param ${pRenderableHash}) because it does not have a valid destination address (param ${pRenderDestinationAddress}).`);\n\t\t\ttmpRenderOptions.Valid = false;\n\t\t}\n\n\t\tif (typeof(pTemplateRecordAddress) === 'object')\n\t\t{\n\t\t\ttmpRenderOptions.RecordAddress = 'Passed in as object';\n\t\t\ttmpRenderOptions.Record = pTemplateRecordAddress;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttmpRenderOptions.RecordAddress = (typeof (pTemplateRecordAddress) === 'string') ? pTemplateRecordAddress :\n\t\t\t\t(typeof (tmpRenderOptions.Renderable.DefaultTemplateRecordAddress) === 'string') ? tmpRenderOptions.Renderable.DefaultTemplateRecordAddress :\n\t\t\t\t(typeof (this.options.DefaultTemplateRecordAddress) === 'string') ? this.options.DefaultTemplateRecordAddress : false;\n\t\t\ttmpRenderOptions.Record = (typeof (tmpRenderOptions.RecordAddress) === 'string') ? this.pict.DataProvider.getDataByAddress(tmpRenderOptions.RecordAddress) : undefined;\n\t\t}\n\n\t\treturn tmpRenderOptions;\n\t}\n\n\t/**\n\t * Assigns the content to the destination address.\n\t *\n\t * For DRY purposes on the three flavors of render.\n\t *\n\t * @param {Renderable} pRenderable - The renderable to render.\n\t * @param {string} pRenderDestinationAddress - The address where the renderable will be rendered.\n\t * @param {string} pContent - The content to render.\n\t * @returns {boolean} - Returns true if the content was assigned successfully.\n\t * @memberof PictView\n\t */\n\tassignRenderContent(pRenderable, pRenderDestinationAddress, pContent)\n\t{\n\t\treturn this.pict.ContentAssignment.projectContent(pRenderable.RenderMethod, pRenderDestinationAddress, pContent, pRenderable.TestAddress);\n\t}\n\n\t/**\n\t * Render a renderable from this view.\n\t *\n\t * @param {string} [pRenderable] - The hash of the renderable to render.\n\t * @param {string} [pRenderDestinationAddress] - The address where the renderable will be rendered.\n\t * @param {string|object} [pTemplateRecordAddress] - The address where the data for the template is stored.\n\t * @return {boolean}\n\t */\n\trender(pRenderable, pRenderDestinationAddress, pTemplateRecordAddress)\n\t{\n\t\tlet tmpRenderableHash = (typeof (pRenderable) === 'string') ? pRenderable :\n\t\t\t(typeof (this.options.DefaultRenderable) == 'string') ? this.options.DefaultRenderable : false;\n\t\tif (!tmpRenderableHash)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderable}) because it is not a valid renderable.`);\n\t\t\treturn false;\n\t\t}\n\n\t\tlet tmpRenderable;\n\t\tif (tmpRenderableHash == '__Virtual')\n\t\t{\n\t\t\ttmpRenderable = {\n\t\t\t\t\tRenderableHash: '__Virtual',\n\t\t\t\t\tTemplateHash: this.renderables[this.options.DefaultRenderable].TemplateHash,\n\t\t\t\t\tDestinationAddress: pRenderDestinationAddress,\n\t\t\t\t\tRenderMethod: 'virtual-assignment'\n\t\t\t\t};\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttmpRenderable = this.renderables[tmpRenderableHash];\n\t\t}\n\n\t\tif (!tmpRenderable)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderable}) because it does not exist.`);\n\t\t\treturn false;\n\t\t}\n\n\t\tlet tmpRenderDestinationAddress = (typeof (pRenderDestinationAddress) === 'string') ? pRenderDestinationAddress :\n\t\t\t(typeof (tmpRenderable.ContentDestinationAddress) === 'string') ? tmpRenderable.ContentDestinationAddress :\n\t\t\t\t(typeof (this.options.DefaultDestinationAddress) === 'string') ? this.options.DefaultDestinationAddress : false;\n\n\t\tif (!tmpRenderDestinationAddress)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderable}) because it does not have a valid destination address.`);\n\t\t\treturn false;\n\t\t}\n\n\t\tlet tmpRecordAddress;\n\t\tlet tmpRecord;\n\n\t\tif (typeof(pTemplateRecordAddress) === 'object')\n\t\t{\n\t\t\ttmpRecord = pTemplateRecordAddress;\n\t\t\ttmpRecordAddress = 'Passed in as object';\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttmpRecordAddress = (typeof (pTemplateRecordAddress) === 'string') ? pTemplateRecordAddress :\n\t\t\t\t(typeof (tmpRenderable.DefaultTemplateRecordAddress) === 'string') ? tmpRenderable.DefaultTemplateRecordAddress :\n\t\t\t\t\t(typeof (this.options.DefaultTemplateRecordAddress) === 'string') ? this.options.DefaultTemplateRecordAddress : false;\n\n\t\t\ttmpRecord = (typeof (tmpRecordAddress) === 'string') ? this.pict.DataProvider.getDataByAddress(tmpRecordAddress) : undefined;\n\t\t}\n\n\t\t// Execute the developer-overridable pre-render behavior\n\t\tthis.onBeforeRender(tmpRenderable, tmpRenderDestinationAddress, tmpRecord);\n\n\t\tif (this.pict.LogControlFlow)\n\t\t{\n\t\t\tthis.log.trace(`PICT-ControlFlow VIEW [${this.UUID}]::[${this.Hash}] Renderable[${tmpRenderableHash}] Destination[${tmpRenderDestinationAddress}] TemplateRecordAddress[${tmpRecordAddress}] render:`);\n\t\t}\n\t\tif (this.pict.LogNoisiness > 0)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} Beginning Render of Renderable[${tmpRenderableHash}] to Destination [${tmpRenderDestinationAddress}]...`);\n\t\t}\n\t\t// Generate the content output from the template and data\n\t\tlet tmpContent = this.pict.parseTemplateByHash(tmpRenderable.TemplateHash, tmpRecord, null, [this]);\n\n\t\tif (this.pict.LogNoisiness > 0)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} Assigning Renderable[${tmpRenderableHash}] content length ${tmpContent.length} to Destination [${tmpRenderDestinationAddress}] using render method [${tmpRenderable.RenderMethod}].`);\n\t\t}\n\n\t\t// Assign the content to the destination address\n\t\tthis.pict.ContentAssignment.projectContent(tmpRenderable.RenderMethod, tmpRenderDestinationAddress, tmpContent, tmpRenderable.TestAddress);\n\n\t\t// Execute the developer-overridable post-render behavior\n\t\tthis.onAfterRender(tmpRenderable, tmpRenderDestinationAddress, tmpRecord, tmpContent);\n\n\t\tthis.lastRenderedTimestamp = this.pict.log.getTimeStamp();\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Render a renderable from this view.\n\t *\n\t * @param {string|ErrorCallback} [pRenderableHash] - The hash of the renderable to render.\n\t * @param {string|ErrorCallback} [pRenderDestinationAddress] - The address where the renderable will be rendered.\n\t * @param {string|object|ErrorCallback} [pTemplateRecordAddress] - The address where the data for the template is stored.\n\t * @param {ErrorCallback} [fCallback] - The callback to call when the async operation is complete.\n\t *\n\t * @return {void}\n\t */\n\trenderAsync(pRenderableHash, pRenderDestinationAddress, pTemplateRecordAddress, fCallback)\n\t{\n\t\tlet tmpRenderableHash = (typeof (pRenderableHash) === 'string') ? pRenderableHash :\n\t\t\t(typeof (this.options.DefaultRenderable) == 'string') ? this.options.DefaultRenderable : false;\n\n\t\t// Allow the callback to be passed in as the last parameter no matter what\n\t\t/** @type {ErrorCallback} */\n\t\tlet tmpCallback = (typeof(fCallback) === 'function') ? fCallback :\n\t\t\t\t\t\t\t(typeof(pTemplateRecordAddress) === 'function') ? pTemplateRecordAddress :\n\t\t\t\t\t\t\t(typeof(pRenderDestinationAddress) === 'function') ? pRenderDestinationAddress :\n\t\t\t\t\t\t\t(typeof(pRenderableHash) === 'function') ? pRenderableHash :\n\t\t\t\t\t\t\tnull;\n\n\t\tif (!tmpCallback)\n\t\t{\n\t\t\tthis.log.warn(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.Name} renderAsync was called without a valid callback.  A callback will be generated but this could lead to race conditions.`);\n\t\t\ttmpCallback = (pError) =>\n\t\t\t\t{\n\t\t\t\t\tif (pError)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.Name} renderAsync Auto Callback Error: ${pError}`, pError);\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t}\n\n\t\tif (!tmpRenderableHash)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not asynchronously render ${tmpRenderableHash} (param ${pRenderableHash}because it is not a valid renderable.`);\n\t\t\treturn tmpCallback(new Error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not asynchronously render ${tmpRenderableHash} (param ${pRenderableHash}because it is not a valid renderable.`));\n\t\t}\n\n\t\tlet tmpRenderable;\n\t\tif (tmpRenderableHash == '__Virtual')\n\t\t{\n\t\t\ttmpRenderable = {\n\t\t\t\t\tRenderableHash: '__Virtual',\n\t\t\t\t\tTemplateHash: this.renderables[this.options.DefaultRenderable].TemplateHash,\n\t\t\t\t\tDestinationAddress: pRenderDestinationAddress,\n\t\t\t\t\tRenderMethod: 'virtual-assignment'\n\t\t\t\t};\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttmpRenderable = this.renderables[tmpRenderableHash];\n\t\t}\n\n\t\tif (!tmpRenderable)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderableHash}) because it does not exist.`);\n\t\t\treturn tmpCallback(new Error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderableHash}) because it does not exist.`));\n\t\t}\n\n\t\tlet tmpRenderDestinationAddress = (typeof (pRenderDestinationAddress) === 'string') ? pRenderDestinationAddress :\n\t\t\t(typeof (tmpRenderable.ContentDestinationAddress) === 'string') ? tmpRenderable.ContentDestinationAddress :\n\t\t\t\t(typeof (this.options.DefaultDestinationAddress) === 'string') ? this.options.DefaultDestinationAddress : false;\n\n\t\tif (!tmpRenderDestinationAddress)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderableHash}) because it does not have a valid destination address.`);\n\t\t\treturn tmpCallback(new Error(`Could not render ${tmpRenderableHash}`));\n\t\t}\n\n\t\tlet tmpRecordAddress;\n\t\tlet tmpRecord;\n\n\t\tif (typeof(pTemplateRecordAddress) === 'object')\n\t\t{\n\t\t\ttmpRecord = pTemplateRecordAddress;\n\t\t\ttmpRecordAddress = 'Passed in as object';\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttmpRecordAddress = (typeof (pTemplateRecordAddress) === 'string') ? pTemplateRecordAddress :\n\t\t\t\t(typeof (tmpRenderable.DefaultTemplateRecordAddress) === 'string') ? tmpRenderable.DefaultTemplateRecordAddress :\n\t\t\t\t\t(typeof (this.options.DefaultTemplateRecordAddress) === 'string') ? this.options.DefaultTemplateRecordAddress : false;\n\n\t\t\ttmpRecord = (typeof (tmpRecordAddress) === 'string') ? this.pict.DataProvider.getDataByAddress(tmpRecordAddress) : undefined;\n\t\t}\n\n\t\tif (this.pict.LogControlFlow)\n\t\t{\n\t\t\tthis.log.trace(`PICT-ControlFlow VIEW [${this.UUID}]::[${this.Hash}] Renderable[${tmpRenderableHash}] Destination[${tmpRenderDestinationAddress}] TemplateRecordAddress[${tmpRecordAddress}] renderAsync:`);\n\t\t}\n\t\tif (this.pict.LogNoisiness > 2)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} Beginning Asynchronous Render (callback-style)...`);\n\t\t}\n\n\t\tlet tmpAnticipate = this.fable.newAnticipate();\n\n\t\ttmpAnticipate.anticipate(\n\t\t\t(fOnBeforeRenderCallback) =>\n\t\t\t{\n\t\t\t\tthis.onBeforeRender(tmpRenderable, tmpRenderDestinationAddress, tmpRecord);\n\t\t\t\tthis.onBeforeRenderAsync(fOnBeforeRenderCallback);\n\t\t\t});\n\n\t\tlet tmpContent;\n\t\ttmpAnticipate.anticipate(\n\t\t\t(fAsyncTemplateCallback) =>\n\t\t\t{\n\t\t\t\t// Render the template (asynchronously)\n\t\t\t\tthis.pict.parseTemplateByHash(tmpRenderable.TemplateHash, tmpRecord,\n\t\t\t\t\t(pError, pContent) =>\n\t\t\t\t\t{\n\t\t\t\t\t\tif (pError)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render (asynchronously) ${tmpRenderableHash} (param ${pRenderableHash}) because it did not parse the template.`, pError);\n\t\t\t\t\t\t\treturn fAsyncTemplateCallback(pError);\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttmpContent = pContent;\n\n\t\t\t\t\t\tif (this.pict.LogNoisiness > 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} Assigning Renderable[${tmpRenderableHash}] content length ${pContent.length} to Destination [${tmpRenderDestinationAddress}] using Async render method ${tmpRenderable.RenderMethod}.`);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthis.pict.ContentAssignment.projectContent(tmpRenderable.RenderMethod, tmpRenderDestinationAddress, pContent, tmpRenderable.TestAddress);\n\n\t\t\t\t\t\t// Execute the developer-overridable asynchronous post-render behavior\n\t\t\t\t\t\tthis.lastRenderedTimestamp = this.pict.log.getTimeStamp();\n\t\t\t\t\t\treturn fAsyncTemplateCallback();\n\t\t\t\t\t}, [this]);\n\t\t\t});\n\n\t\ttmpAnticipate.anticipate(\n\t\t\t(fOnAfterRenderCallback) =>\n\t\t\t{\n\t\t\t\tthis.onAfterRender(tmpRenderable, tmpRenderDestinationAddress, tmpRecord, tmpContent);\n\t\t\t\tthis.onAfterRenderAsync(fOnAfterRenderCallback);\n\t\t\t});\n\n\t\ttmpAnticipate.wait(tmpCallback);\n\t}\n\n\t/**\n\t * Renders the default renderable.\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\trenderDefaultAsync(fCallback)\n\t{\n\t\t// Render the default renderable\n\t\tthis.renderAsync(fCallback);\n\t}\n\n\t/**\n\t * @param {string} [pRenderableHash] - The hash of the renderable to render.\n\t * @param {string} [pRenderDestinationAddress] - The address where the renderable will be rendered.\n\t * @param {string|object} [pTemplateRecordAddress] - The address of (or actual obejct) where the data for the template is stored.\n\t */\n\tbasicRender(pRenderableHash, pRenderDestinationAddress, pTemplateRecordAddress)\n\t{\n\t\tlet tmpRenderOptions = this.buildRenderOptions(pRenderableHash, pRenderDestinationAddress, pTemplateRecordAddress);\n\t\tif (tmpRenderOptions.Valid)\n\t\t{\n\t\t\tthis.assignRenderContent(tmpRenderOptions.Renderable, tmpRenderOptions.DestinationAddress, this.pict.parseTemplateByHash(tmpRenderOptions.Renderable.TemplateHash, tmpRenderOptions.Record, null, [this]));\n\t\t\treturn true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not perform a basic render of ${tmpRenderOptions.RenderableHash} because it is not valid.`);\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * @param {string|ErrorCallback} [pRenderableHash] - The hash of the renderable to render.\n\t * @param {string|ErrorCallback} [pRenderDestinationAddress] - The address where the renderable will be rendered.\n\t * @param {string|Object|ErrorCallback} [pTemplateRecordAddress] - The address of (or actual obejct) where the data for the template is stored.\n\t * @param {ErrorCallback} [fCallback] - The callback to call when the async operation is complete.\n\t */\n\tbasicRenderAsync(pRenderableHash, pRenderDestinationAddress, pTemplateRecordAddress, fCallback)\n\t{\n\t\t// Allow the callback to be passed in as the last parameter no matter what\n\t\t/** @type {ErrorCallback} */\n\t\tlet tmpCallback = (typeof(fCallback) === 'function') ? fCallback :\n\t\t\t\t\t\t\t(typeof(pTemplateRecordAddress) === 'function') ? pTemplateRecordAddress :\n\t\t\t\t\t\t\t(typeof(pRenderDestinationAddress) === 'function') ? pRenderDestinationAddress :\n\t\t\t\t\t\t\t(typeof(pRenderableHash) === 'function') ? pRenderableHash :\n\t\t\t\t\t\t\tnull;\n\t\tif (!tmpCallback)\n\t\t{\n\t\t\tthis.log.warn(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.Name} basicRenderAsync was called without a valid callback.  A callback will be generated but this could lead to race conditions.`);\n\t\t\ttmpCallback = (pError) =>\n\t\t\t\t{\n\t\t\t\t\tif (pError)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.Name} basicRenderAsync Auto Callback Error: ${pError}`, pError);\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t}\n\n\t\tconst tmpRenderOptions = this.buildRenderOptions(pRenderableHash, pRenderDestinationAddress, pTemplateRecordAddress);\n\t\tif (tmpRenderOptions.Valid)\n\t\t{\n\t\t\tthis.pict.parseTemplateByHash(tmpRenderOptions.Renderable.TemplateHash, tmpRenderOptions.Record,\n\t\t\t\t/**\n\t\t\t\t * @param {Error} [pError] - The error that occurred during template parsing.\n\t\t\t\t * @param {string} [pContent] - The content that was rendered from the template.\n\t\t\t\t */\n\t\t\t\t(pError, pContent) =>\n\t\t\t\t{\n\t\t\t\t\tif (pError)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render (asynchronously) ${tmpRenderOptions.RenderableHash} because it did not parse the template.`, pError);\n\t\t\t\t\t\treturn tmpCallback(pError);\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.assignRenderContent(tmpRenderOptions.Renderable, tmpRenderOptions.DestinationAddress, pContent);\n\t\t\t\t\treturn tmpCallback();\n\t\t\t\t}, [this]);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlet tmpErrorMessage = `PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not perform a basic render of ${tmpRenderOptions.RenderableHash} because it is not valid.`;\n\t\t\tthis.log.error(tmpErrorMessage);\n\t\t\treturn tmpCallback(new Error(tmpErrorMessage));\n\t\t}\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers after the view is rendered.\n\t *\n\t * @param {Renderable} pRenderable - The renderable that was rendered.\n\t * @param {string} pRenderDestinationAddress - The address where the renderable was rendered.\n\t * @param {any} pRecord - The record (data) that was used by the renderable.\n\t * @param {string} pContent - The content that was rendered.\n\t */\n\tonAfterRender(pRenderable, pRenderDestinationAddress, pRecord, pContent)\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onAfterRender:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers after the view is rendered (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonAfterRenderAsync(fCallback)\n\t{\n\t\treturn fCallback();\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*                            Code Section: Solver                            */\n\t/* -------------------------------------------------------------------------- */\n\t/**\n\t * Lifecycle hook that triggers before the view is solved.\n\t */\n\tonBeforeSolve()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onBeforeSolve:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers before the view is solved (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonBeforeSolveAsync(fCallback)\n\t{\n\t\tthis.onBeforeSolve();\n\t\treturn fCallback();\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers when the view is solved.\n\t */\n\tonSolve()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onSolve:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers when the view is solved (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonSolveAsync(fCallback)\n\t{\n\t\tthis.onSolve();\n\t\treturn fCallback();\n\t}\n\n\t/**\n\t * Performs view solving and triggers lifecycle hooks.\n\t *\n\t * @return {boolean} - True if the view was solved successfully, false otherwise.\n\t */\n\tsolve()\n\t{\n\t\tif (this.pict.LogNoisiness > 2)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} executing solve() function...`);\n\t\t}\n\t\tthis.onBeforeSolve();\n\t\tthis.onSolve();\n\t\tthis.onAfterSolve();\n\t\tthis.lastSolvedTimestamp = this.pict.log.getTimeStamp();\n\t\treturn true;\n\t}\n\n\t/**\n\t * Performs view solving and triggers lifecycle hooks (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tsolveAsync(fCallback)\n\t{\n\t\tlet tmpAnticipate = this.pict.instantiateServiceProviderWithoutRegistration('Anticipate');\n\n\t\t/** @type {ErrorCallback} */\n\t\tlet tmpCallback = (typeof(fCallback) === 'function') ? fCallback : null;\n\t\tif (!tmpCallback)\n\t\t{\n\t\t\tthis.log.warn(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.Name} solveAsync was called without a valid callback.  A callback will be generated but this could lead to race conditions.`);\n\t\t\ttmpCallback = (pError) =>\n\t\t\t\t{\n\t\t\t\t\tif (pError)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.Name} solveAsync Auto Callback Error: ${pError}`, pError);\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t}\n\n\t\ttmpAnticipate.anticipate(this.onBeforeSolveAsync.bind(this));\n\t\ttmpAnticipate.anticipate(this.onSolveAsync.bind(this));\n\t\ttmpAnticipate.anticipate(this.onAfterSolveAsync.bind(this));\n\n\t\ttmpAnticipate.wait(\n\t\t\t(pError) =>\n\t\t\t{\n\t\t\t\tif (this.pict.LogNoisiness > 2)\n\t\t\t\t{\n\t\t\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} solveAsync() complete.`);\n\t\t\t\t}\n\t\t\t\tthis.lastSolvedTimestamp = this.pict.log.getTimeStamp();\n\t\t\t\treturn tmpCallback(pError);\n\t\t\t});\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers after the view is solved.\n\t */\n\tonAfterSolve()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onAfterSolve:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers after the view is solved (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonAfterSolveAsync(fCallback)\n\t{\n\t\tthis.onAfterSolve();\n\t\treturn fCallback();\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*                     Code Section: Marshal From View                        */\n\t/* -------------------------------------------------------------------------- */\n\t/**\n\t * Lifecycle hook that triggers before data is marshaled from the view.\n\t *\n\t * @return {boolean} - True if the operation was successful, false otherwise.\n\t */\n\tonBeforeMarshalFromView()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onBeforeMarshalFromView:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers before data is marshaled from the view (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonBeforeMarshalFromViewAsync(fCallback)\n\t{\n\t\tthis.onBeforeMarshalFromView();\n\t\treturn fCallback();\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers when data is marshaled from the view.\n\t */\n\tonMarshalFromView()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onMarshalFromView:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers when data is marshaled from the view (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonMarshalFromViewAsync(fCallback)\n\t{\n\n\t\tthis.onMarshalFromView();\n\t\treturn fCallback();\n\t}\n\n\t/**\n\t * Marshals data from the view.\n\t *\n\t * @return {boolean} - True if the operation was successful, false otherwise.\n\t */\n\tmarshalFromView()\n\t{\n\t\tif (this.pict.LogNoisiness > 2)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} executing solve() function...`);\n\t\t}\n\t\tthis.onBeforeMarshalFromView();\n\t\tthis.onMarshalFromView();\n\t\tthis.onAfterMarshalFromView();\n\t\tthis.lastMarshalFromViewTimestamp = this.pict.log.getTimeStamp();\n\t\treturn true;\n\t}\n\n\t/**\n\t * Marshals data from the view (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tmarshalFromViewAsync(fCallback)\n\t{\n\t\tlet tmpAnticipate = this.pict.instantiateServiceProviderWithoutRegistration('Anticipate');\n\n\t\t/** @type {ErrorCallback} */\n\t\tlet tmpCallback = (typeof(fCallback) === 'function') ? fCallback : null;\n\t\tif (!tmpCallback)\n\t\t{\n\t\t\tthis.log.warn(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.Name} marshalFromViewAsync was called without a valid callback.  A callback will be generated but this could lead to race conditions.`);\n\t\t\ttmpCallback = (pError) =>\n\t\t\t\t{\n\t\t\t\t\tif (pError)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.Name} marshalFromViewAsync Auto Callback Error: ${pError}`, pError);\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t}\n\n\t\ttmpAnticipate.anticipate(this.onBeforeMarshalFromViewAsync.bind(this));\n\t\ttmpAnticipate.anticipate(this.onMarshalFromViewAsync.bind(this));\n\t\ttmpAnticipate.anticipate(this.onAfterMarshalFromViewAsync.bind(this));\n\n\t\ttmpAnticipate.wait(\n\t\t\t(pError) =>\n\t\t\t{\n\t\t\t\tif (this.pict.LogNoisiness > 2)\n\t\t\t\t{\n\t\t\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} marshalFromViewAsync() complete.`);\n\t\t\t\t}\n\t\t\t\tthis.lastMarshalFromViewTimestamp = this.pict.log.getTimeStamp();\n\t\t\t\treturn tmpCallback(pError);\n\t\t\t});\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers after data is marshaled from the view.\n\t */\n\tonAfterMarshalFromView()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onAfterMarshalFromView:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers after data is marshaled from the view (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonAfterMarshalFromViewAsync(fCallback)\n\t{\n\t\tthis.onAfterMarshalFromView();\n\t\treturn fCallback();\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*                     Code Section: Marshal To View                          */\n\t/* -------------------------------------------------------------------------- */\n\t/**\n\t * Lifecycle hook that triggers before data is marshaled into the view.\n\t */\n\tonBeforeMarshalToView()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onBeforeMarshalToView:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers before data is marshaled into the view (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonBeforeMarshalToViewAsync(fCallback)\n\t{\n\t\tthis.onBeforeMarshalToView();\n\t\treturn fCallback();\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers when data is marshaled into the view.\n\t */\n\tonMarshalToView()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onMarshalToView:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers when data is marshaled into the view (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonMarshalToViewAsync(fCallback)\n\t{\n\t\tthis.onMarshalToView();\n\t\treturn fCallback();\n\t}\n\n\t/**\n\t * Marshals data into the view.\n\t *\n\t * @return {boolean} - True if the operation was successful, false otherwise.\n\t */\n\tmarshalToView()\n\t{\n\t\tif (this.pict.LogNoisiness > 2)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} executing solve() function...`);\n\t\t}\n\t\tthis.onBeforeMarshalToView();\n\t\tthis.onMarshalToView();\n\t\tthis.onAfterMarshalToView();\n\t\tthis.lastMarshalToViewTimestamp = this.pict.log.getTimeStamp();\n\t\treturn true;\n\t}\n\n\t/**\n\t * Marshals data into the view (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tmarshalToViewAsync(fCallback)\n\t{\n\t\tlet tmpAnticipate = this.pict.instantiateServiceProviderWithoutRegistration('Anticipate');\n\n\n\t\t/** @type {ErrorCallback} */\n\t\tlet tmpCallback = (typeof(fCallback) === 'function') ? fCallback : null;\n\t\tif (!tmpCallback)\n\t\t{\n\t\t\tthis.log.warn(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.Name} marshalToViewAsync was called without a valid callback.  A callback will be generated but this could lead to race conditions.`);\n\t\t\ttmpCallback = (pError) =>\n\t\t\t\t{\n\t\t\t\t\tif (pError)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.Name} marshalToViewAsync Auto Callback Error: ${pError}`, pError);\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t}\n\t\ttmpAnticipate.anticipate(this.onBeforeMarshalToViewAsync.bind(this));\n\t\ttmpAnticipate.anticipate(this.onMarshalToViewAsync.bind(this));\n\t\ttmpAnticipate.anticipate(this.onAfterMarshalToViewAsync.bind(this));\n\n\t\ttmpAnticipate.wait(\n\t\t\t(pError) =>\n\t\t\t{\n\t\t\t\tif (this.pict.LogNoisiness > 2)\n\t\t\t\t{\n\t\t\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} marshalToViewAsync() complete.`);\n\t\t\t\t}\n\t\t\t\tthis.lastMarshalToViewTimestamp = this.pict.log.getTimeStamp();\n\t\t\t\treturn tmpCallback(pError);\n\t\t\t});\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers after data is marshaled into the view.\n\t */\n\tonAfterMarshalToView()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onAfterMarshalToView:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers after data is marshaled into the view (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonAfterMarshalToViewAsync(fCallback)\n\t{\n\t\tthis.onAfterMarshalToView();\n\t\treturn fCallback();\n\t}\n\n\t/** @return {boolean} - True if the object is a PictView. */\n\tget isPictView()\n\t{\n\t\treturn true;\n\t}\n}\n\nmodule.exports = PictView;\n\n},{\"../package.json\":3,\"fable-serviceproviderbase\":2}],5:[function(require,module,exports){\nmodule.exports={\n\t\"RenderOnLoad\": true,\n\n\t\"GridWidth\": \"auto\",\n\t\"GridRowHeight\": 40,\n\n\t\"GridBodyHeight\": \"auto\",\n\t\"GridBodyMinHeight\": 130,\n\n\t\"GridColumnMinWidth\": 50,\n\t\"GridColumnWidthResizable\": true,\n\t\"GridColumnHeightResizable\": false,\n\n\t\"GridColumnFrozenCount\": 0,\n\t\"GridColumnFrozenBorderWidth\": 3,\n\n\t\"GridScrollX\": true,\n\t\"GridScrollY\": true,\n\n\t\"GridShowDummyRows\": false,\n\t\"GridDraggableRows\": false,\n\n\t\"GridSelectionUnit\": \"cell\",\n\n\t\"DefaultRenderable\": \"TuiGrid-Wrap\",\n\t\"DefaultDestinationAddress\": \"#TuiGrid-Container-Div\",\n\n\t\"Templates\": [\n\t\t{\n\t\t\t\"Hash\": \"TuiGrid-Container\",\n\t\t\t\"Template\": \"<!-- TuiGrid-Container Rendering Soon -->\"\n\t\t}\n\t],\n\n\t\"Renderables\": [\n\t\t{\n\t\t\t\"RenderableHash\": \"TuiGrid-Wrap\",\n\t\t\t\"TemplateHash\": \"TuiGrid-Container\",\n\t\t\t\"DestinationAddress\": \"#TuiGrid-Container-Div\"\n\t\t}\n\t],\n\n\t\"TargetElementAddress\": \"#TuiGrid-Container-Div\",\n\n\t\"GridDataAddress\": false,\n\n\t\"GridData\": [\n\t\t{\n\t\t\t\"idrecord\": 1,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 1\",\n\t\t\t\"description\": \"description 1\"\n\t\t},\n\t\t{\n\t\t\t\"idrecord\": 2,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 2\",\n\t\t\t\"description\": \"description 2\"\n\t\t},\n\t\t{\n\t\t\t\"idrecord\": 3,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 3\",\n\t\t\t\"description\": \"description 3\"\n\t\t},\n\t\t{\n\t\t\t\"idrecord\": 4,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 4\",\n\t\t\t\"description\": \"description 4\"\n\t\t},\n\t\t{\n\t\t\t\"idrecord\": 5,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 5\",\n\t\t\t\"description\": \"description 5\"\n\t\t},\n\t\t{\n\t\t\t\"idrecord\": 6,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 6\",\n\t\t\t\"description\": \"description 6\"\n\t\t},\n\t\t{\n\t\t\t\"idrecord\": 7,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 7\",\n\t\t\t\"description\": \"description 7\"\n\t\t},\n\t\t{\n\t\t\t\"idrecord\": 8,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 8\",\n\t\t\t\"description\": \"description 8\"\n\t\t},\n\t\t{\n\t\t\t\"idrecord\": 9,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 9\",\n\t\t\t\"description\": \"description 9\"\n\t\t}\n\t],\n\t\"ColumnsToSolveOnChange\": {},\n\t\"TuiColumnSchema\": [\n\t\t{\n\t\t\t\"header\": \"IDRecord\",\n\t\t\t\"name\": \"idrecord\",\n\t\t\t\"PictTriggerSolveOnChange\": true\n\t\t},\n\t\t{\n\t\t\t\"header\": \"Entity\",\n\t\t\t\"name\": \"entity\",\n\t\t\t\"PictTriggerSolveOnChange\": true\n\t\t},\n\t\t{\n\t\t\t\"header\": \"Name\",\n\t\t\t\"name\": \"name\",\n\t\t\t\"editor\": \"text\"\n\t\t},\n\t\t{\n\t\t\t\"header\": \"Description\",\n\t\t\t\"name\": \"description\",\n\t\t\t\"editor\": \"text\"\n\t\t}\n\t]\n}\n\n},{}],6:[function(require,module,exports){\nconst libPictViewClass = require('pict-view');\n\n/**\n * @typedef {typeof import('tui-grid').default} TuiGridClass\n * @typedef {import('tui-grid').default} TuiGrid\n */\n\nclass PictSectionTuiGrid extends libPictViewClass\n{\n\tconstructor(pFable, pOptions, pServiceHash)\n\t{\n\t\tlet tmpOptions = Object.assign({}, require('./Pict-Section-TuiGrid-DefaultConfiguration.json'), pOptions);\n\n\t\tsuper(pFable, tmpOptions, pServiceHash);\n\n\t\t/** @type {{ [key: string]: any }} */\n\t\tthis.services;\n\t\tthis.dateFormatter = this.fable.instantiateServiceProviderWithoutRegistration('Dates');\n\n\t\tthis.initialRenderComplete = false;\n\n\t\tthis.customFormatters = {};\n\t}\n\n\tonBeforeInitialize()\n\t{\n\t\tsuper.onBeforeInitialize();\n\n\t\t/** @type {TuiGridClass} */\n\t\tthis._tuiGridPrototype = null;\n\n\t\t/** @type {TuiGrid} */\n\t\tthis.tuiGrid = null;\n\n\t\tthis.customHeaders = require('./Pict-TuiGrid-Headers.js');\n\t\tthis.customEditors = require('./Pict-TuiGrid-Editors.js');\n\t\tthis.initializeCustomFormatters();\n\n\t\tthis.columnSchema = false;\n\t\tthis.targetElementAddress = false;\n\t\t/** @type {Array<any>} */\n\t\tthis.gridData = null;\n\n\t\treturn super.onBeforeInitialize();\n\t}\n\n\tinitializeCustomFormatters()\n\t{\n\t\tthis.customFormatters.FormatterTwoDigitNumber = (pCell) =>\n\t\t\t{\n\t\t\t\tlet tmpCellValue = Number.parseFloat(pCell.value);\n\t\t\t\tlet tmpPrecision = pCell?.decimalPrecision ?? 2;\n\t\t\t\tif (isNaN(tmpCellValue))\n\t\t\t\t{\n\t\t\t\t\treturn '';\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\treturn this.fable.Math.roundPrecise(pCell.value, tmpPrecision);\n\t\t\t\t}\n\t\t\t};\n\t\tthis.customFormatters.FormatterCurrencyNumber = (pCell) =>\n\t\t\t{\n\t\t\t\tlet tmpPrecision = pCell?.decimalPrecision ?? 2;\n\t\t\t\tlet tmpCellValue = this.fable.DataFormat.formatterDollars(pCell.value, tmpPrecision);\n\t\t\t\treturn tmpCellValue;\n\t\t\t};\n\n\t\tthis.customFormatters.FormatterRoundedNumber = (pCell) =>\n\t\t\t{\n\t\t\t\tlet tmpCellValue = Number.parseFloat(pCell.value);\n\t\t\t\tlet tmpPrecision = pCell?.decimalPrecision ?? 2;\n\t\t\t\tif (isNaN(tmpCellValue))\n\t\t\t\t{\n\t\t\t\t\treturn '';\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\treturn this.fable.Math.roundPrecise(pCell.value, tmpPrecision);\n\t\t\t\t}\n\t\t\t};\n\n\t\tthis.customFormatters.FormatterDate = (pCell) =>\n\t\t\t{\n\t\t\t\tlet tmpDate = this.fable.Dates.dayJS.utc(pCell.value);\n\t\t\t\tif (pCell.dateformat)\n\t\t\t\t{\n\t\t\t\t\treturn tmpDate.format(pCell.dateformat);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\treturn tmpDate.format();\n\t\t\t\t}\n\t\t\t};\n\t}\n\n\t/**\n\t * Construct a tuiGrid instance and connect it to the browser's dom object for the grid.  If the\n\t * prototype is not passed in, try to find a window.tui (where the library puts itself) in the window\n\t * object.\n\t *\n\t * @param {TuiGridClass} [pTuiGridPrototype] - The TuiGrid prototype class expected to be loaded in the browser\n\t * @returns\n\t */\n\tconnectTuiGridPrototype(pTuiGridPrototype)\n\t{\n\t\tif (typeof (pTuiGridPrototype) != 'undefined')\n\t\t{\n\t\t\tthis._tuiGridPrototype = pTuiGridPrototype;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.log.trace(`PICT-TuiGrid No TuiGrid Prototype defined or explicitly set; looking for it in the window object.`);\n\t\t\tif (typeof (window) != 'undefined')\n\t\t\t{\n\t\t\t\tif ((typeof (window.tui) != 'undefined') && (typeof (window.tui.Grid) != 'undefined'))\n\t\t\t\t{\n\t\t\t\t\tthis.log.trace(`PICT-TuiGrid Found TuiGrid Prototype in window.tuiGrid.`);\n\t\t\t\t\tthis.connectTuiGridPrototype(window.tui.Grid);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.log.error(`PICT-TuiGrid No TuiGrid Prototype found in window.tuiGrid.`);\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.log.error(`PICT-TuiGrid No TuiGrid Prototype found in window.tuiGrid -- window object unavailable.`);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @typedef {Object} TUIGridCellChange\n\t * @property {any} rowKey - The key of the row that changed.\n\t * @property {string} columnName - The name of the column that changed.\n\t * @property {any} value - The \"current\" value of the cell. Slightly different meaning in preChangeHandler vs changeHandler (before / after the change is applied).\n\t * @property {any} [nextValue] - The value that the cell will have after the change. Only populated in preChangeHandler (not changeHandler).\n\t * @property {any} [prevValue] - The value that the cell had before the change. Only populated in changeHandler (not preChangeHandler).\n\t */\n\n\t/**\n\t * @typedef {Object} TUIGridChangeEvent\n\t * @property {TuiGrid} instance - The TuiGrid instance that fired the event.\n\t * @property {TUIGridCellChange[]} changes - An array of objects representing the changes to grid cell values.\n\t */\n\n\t/**\n\t * Interface method for handling changesets from the TuiGrid control. Invoked before the change has been applied to the affected cells.\n\t *\n\t * * The pre-change cell value is stored in value while the new cell value is stored in nextValue.\n\t * * Any changes made to nextValue in this method will be reflected in the grid for that cell.\n\t *\n\t * @param {TUIGridChangeEvent} pChangeData - An event containing an array of objects representing the changes to grid cell values.\n\t */\n\tpreChangeHandler(pChangeData)\n\t{\n\t}\n\n\t/**\n\t * Interface method for handling changesets from the TuiGrid control. Invoked after the change has been applied to the affected cells.\n\t *\n\t * * Performs solver trigger for changes to any columns configured in \"ColumnsToSolveOnChange\" or with \"PictTriggerSolveOnChange\": true on a specific row.\n\t * * The previous cell value is stored in prevValue while the next cell value is stored in value.\n\t *\n\t * @param {TUIGridChangeEvent} pChangeData - An event object containing an array of objects representing the changes to grid cell values.\n\t */\n\tchangeHandler(pChangeData)\n\t{\n\t\tlet tmpSolverNecessary = false;\n\n\t\tfor (let i = 0; i < pChangeData.changes.length; i++)\n\t\t{\n\t\t\tlet tmpEntity = pChangeData.instance.getValue(pChangeData.changes[i].rowKey, 'entity');\n\t\t\tlet tmpIDRecord = pChangeData.instance.getValue(pChangeData.changes[i].rowKey, 'idrecord');\n\n\t\t\tthis.log.trace(`Generic Change Handler for TuiGrid Fired, Entity ${tmpEntity} IDRecord ${tmpIDRecord} setting Column [${pChangeData.changes[i].value}] to new Value [${pChangeData.changes[i].value}]`);\n\n\t\t\tif (this.options.ColumnsToSolveOnChange.hasOwnProperty(pChangeData.changes[i].columnName))\n\t\t\t{\n\t\t\t\ttmpSolverNecessary = true;\n\t\t\t}\n\t\t}\n\n\t\tif (tmpSolverNecessary)\n\t\t{\n\t\t\tthis.services.PictApplication.solve();\n\t\t}\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers after the view is rendered.\n\t *\n\t * @param {import('pict-view').Renderable} pRenderable - The renderable that was rendered.\n\t * @param {string} pRenderDestinationAddress - The address where the renderable was rendered.\n\t * @param {any} pRecord - The record (data) that was used by the renderable.\n\t * @param {string} pContent - The content that was rendered.\n\t */\n\tonAfterRender(pRenderable, pRenderDestinationAddress, pRecord, pContent)\n\t{\n\t\tif (!this.initialRenderComplete)\n\t\t{\n\t\t\tthis.onAfterInitialRender();\n\t\t\tthis.initialRenderComplete = true;\n\t\t}\n\t\treturn super.onAfterRender(pRenderable, pRenderDestinationAddress, pRecord, pContent);\n\t}\n\n\tonAfterInitialRender()\n\t{\n\t\t// This is where we wire up and initialize the tuigrid control -- the initial render has put the placeholder content in place.\n\t\t// Check for a tuigrid prototype, and find it in the window object it if it doesn't exist\n\t\tif (!this._tuiGridPrototype)\n\t\t{\n\t\t\tthis.connectTuiGridPrototype();\n\t\t}\n\t\t// This is where we wire up and initialize the tuigrid control\n\t\tif (this.tuiGrid)\n\t\t{\n\t\t\t// The grid is already initialized.\n\t\t\tthis.log.error(`TuiGrid going to ${this.options.TargetElementAddress} is already initialized!`);\n\t\t\treturn false;\n\t\t}\n\n\t\tif (this.options.GridDataAddress)\n\t\t{\n\t\t\tconst tmpAddressSpace =\n\t\t\t{\n\t\t\t\tFable: this.fable,\n\t\t\t\tPict: this.fable,\n\t\t\t\tAppData: this.AppData,\n\t\t\t\tBundle: this.Bundle,\n\t\t\t\tOptions: this.options,\n\t\t\t};\n\t\t\tlet tmpAddressedData = this.fable.manifest.getValueByHash(tmpAddressSpace, this.options.GridDataAddress);\n\t\t\tif (typeof (tmpAddressedData) != 'object')\n\t\t\t{\n\t\t\t\tthis.log.error(`Address for GridData [${this.options.GridDataAddress}] did not return an object; it was a ${typeof (tmpAddressedData)}.`);\n\t\t\t\tthis.gridData = [];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.gridData = JSON.parse(JSON.stringify(tmpAddressedData));\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.gridData = [];\n\t\t}\n\n\t\tlet tmpTargetElementSet = this.services.ContentAssignment.getElement(this.options.TargetElementAddress);\n\t\tif (tmpTargetElementSet.length < 1)\n\t\t{\n\t\t\tthis.log.error(`Could not find target element [${this.options.TargetElementAddress}] for TuiGrid!  Rendering won't function properly.`);\n\t\t\tthis.targetElement = false;\n\t\t\treturn false;\n\t\t}\n\n\t\t// Just go for the first one.\n\t\tthis.targetElement = tmpTargetElementSet[0];\n\n\t\t// Check to see if there are any custom formatters.\n\t\tthis.columnSchema = this.options.TuiColumnSchema;\n\t\t// Setup the solver and custom schema handlers.\n\t\tfor (let i = 0; i < this.columnSchema.length; i++)\n\t\t{\n\t\t\tlet tmpColumn = this.columnSchema[i];\n\t\t\t// If this bit is set on a column, the Form solver will trigger each time a change happens to that column.\n\t\t\tif (tmpColumn.PictTriggerSolveOnChange)\n\t\t\t{\n\t\t\t\tthis.options.ColumnsToSolveOnChange[tmpColumn.name] = tmpColumn;\n\t\t\t}\n\t\t\t// Look to see if there is an internal formatter that matches the type\n\t\t\tif ((tmpColumn.hasOwnProperty('formatter')) && (this.customFormatters.hasOwnProperty(tmpColumn.formatter)))\n\t\t\t{\n\t\t\t\t// Assign our special formatter to the column.\n\t\t\t\ttmpColumn.formatter = this.customFormatters[tmpColumn.formatter];\n\t\t\t}\n\t\t\t// Look to see if there is an editor stanza\n\t\t\tif (tmpColumn.hasOwnProperty('editor'))\n\t\t\t{\n\t\t\t\t// Look to see if there is an internal editor that matches the type\n\t\t\t\tif ((tmpColumn.editor.hasOwnProperty('type'))\n\t\t\t\t\t&& (typeof (tmpColumn.editor.type) == 'string')\n\t\t\t\t\t&& (this.customEditors.hasOwnProperty(tmpColumn.editor.type)))\n\t\t\t\t{\n\t\t\t\t\t// Assign our special editor to the column.\n\t\t\t\t\ttmpColumn.editor.type = this.customEditors[tmpColumn.editor.type];\n\t\t\t\t}\n\n\t\t\t\t// Look to see if there is an internal editor that matches the type\n\t\t\t\tif ((tmpColumn.editor.hasOwnProperty('options'))\n\t\t\t\t\t&& (typeof (tmpColumn.editor.options) == 'object')\n\t\t\t\t\t&& (tmpColumn.editor.options.hasOwnProperty('listItems'))\n\t\t\t\t\t&& (typeof (tmpColumn.editor.options.listItems) == 'string'))\n\t\t\t\t{\n\t\t\t\t\t// Look for this address!  For the Record object, we will pass in the options.\n\t\t\t\t\tconst tmpAddressSpace =\n\t\t\t\t\t{\n\t\t\t\t\t\tFable: this.fable,\n\t\t\t\t\t\tPict: this.fable,\n\t\t\t\t\t\tAppData: this.AppData,\n\t\t\t\t\t\tBundle: this.Bundle,\n\t\t\t\t\t\tOptions: this.options,\n\t\t\t\t\t};\n\t\t\t\t\tlet tmpListItems = this.fable.manifest.getValueByHash(tmpAddressSpace, tmpColumn.editor.options.listItems);\n\t\t\t\t\tif (typeof (tmpListItems) == 'object')\n\t\t\t\t\t{\n\t\t\t\t\t\ttmpColumn.editor.options.listItems = tmpListItems;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.log.warn(`Pict TuiGrid for column [${tmpColumn.name}] had [${tmpColumn.editor.options.listItems}] as a listItems address, but it didn't return an object.  It was a [${typeof (tmpListItems)}].  Setting to empty list.`);\n\t\t\t\t\t\ttmpColumn.editor.options.listItems = [];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.gridSettings = {\n\t\t\t\tdata: this.gridData,\n\t\t\t\tel: this.targetElement,\n\t\t\t\tcolumns: this.columnSchema,\n\n\t\t\t\t// This is no bueno, yo\n\t\t\t\tusageStatistics: false,\n\n\t\t\t\tscrollY: this.options.GridScrollY,\n\n\t\t\t\tcolumnOptions:\n\t\t\t\t{\n\t\t\t\t\tresizable: this.options.GridColumnWidthResizable\n\t\t\t\t}\n\t\t\t};\n\n\t\tthis.customConfigureGridSettings();\n\n\t\tlet libTuiGrid = this._tuiGridPrototype;\n\t\tthis.tuiGrid = new libTuiGrid(this.gridSettings);\n\t\tthis.tuiGrid.on('beforeChange', (pChangeData) =>\n\t\t{\n\t\t\t//TODO: the exported event type from tui-grid is incomplete so mask it here\n\t\t\t/** @type {any} */\n\t\t\tconst tmpChangeData = pChangeData;\n\t\t\tthis.preChangeHandler(tmpChangeData);\n\t\t});\n\t\tthis.tuiGrid.on('afterChange', (pChangeData) =>\n\t\t{\n\t\t\t//TODO: the exported event type from tui-grid is incomplete so mask it here\n\t\t\t/** @type {any} */\n\t\t\tconst tmpChangeData = pChangeData;\n\t\t\tthis.changeHandler(tmpChangeData);\n\t\t});\n\t}\n\n\t/**\n\t * This is expected to be overloaded with anything that needs to be added to the grid configuration\n\t * before the Toast UI Grid component is initialized in the browser.\n\t */\n\tcustomConfigureGridSettings ()\n\t{\n\t\t// This can be overloaded to tweak up the this.gridSettings\n\t}\n\n\t/**\n\t * Lookup a specific record in the toast ui grid data set by value and pull the value from the map into the browser.\n\t *\n\t * This function exists because if we mutate data in the map of plain javascript records tuigrid\n\t * manages, it doesn't automatically refresh the UI.  From reading the TUIGrid documentation, this\n\t * is because they don't want to refresh until all the data has changed.\n\t *\n\t * The best practice has been to have a hidden column behind the tuigrid that maps the correct entity\n\t * value set to the record in the map (e.g. IDRecord in one column and Entity in another).\n\t *\n\t * @param {string} pCellColumnToBeSet - the Column hash to set\n\t * @param {string} pCellValueToSet - Value to be set\n\t * @param {string} pLookupValue - the Value to look up in tuigrid\n\t * @param {string} pLookupColumn - the key of the column in the tuigrid record (which are plain javascript objects defined by the tuigrid config)\n\t * @return {void}\n\t */\n\tSetGridValue(pCellColumnToBeSet, pCellValueToSet, pLookupValue, pLookupColumn)\n\t{\n\t\tif (typeof (pLookupValue) == 'undefined')\n\t\t{\n\t\t\tconsole.log(`Could not set grid value [${pCellColumnToBeSet}] = [${pCellValueToSet}] looked up by [${pLookupColumn}]::[${pLookupValue}].  No valid lookup value!`);\n\t\t\treturn;\n\t\t}\n\n\t\tif (!this.tuiGrid)\n\t\t{\n\t\t\tthis.log.warn(`Could not set grid value [${pCellColumnToBeSet}] = [${pCellValueToSet}] looked up by [${pLookupColumn}]::[${pLookupValue}].  No valid grid!`);\n\t\t\treturn;\n\t\t}\n\n\t\tconst tmpData = this.tuiGrid.getData();\n\n\t\tfor (let i = 0; i < tmpData.length; i++)\n\t\t{\n\t\t\tconst tmpRecord = tmpData[i];\n\n\t\t\tif (tmpRecord[pLookupColumn] == pLookupValue)\n\t\t\t{\n\t\t\t\tthis.tuiGrid.setValue(i, pCellColumnToBeSet, pCellValueToSet);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Lookup a specific record in the toast ui grid data set by row key and pull in a column.\n\t *\n\t * This function exists because if we mutate data in the map of plain javascript records tuigrid\n\t * manages, it doesn't automatically refresh the UI.  From reading the TUIGrid documentation, this\n\t * is because they don't want to refresh until all the data has changed.\n\t *\n\t *\n\t * @param {string} pCellColumnToBeSet - the Column hash to set\n\t * @param {string} pCellValueToSet - Value to be set\n\t * @param {string} pRowKey - the key of the row to be set\n\t * @return {boolean}\n\t */\n\tSetGridValueByRowKey(pCellColumnToBeSet, pCellValueToSet, pRowKey)\n\t{\n\t\tif (typeof (pRowKey) == 'undefined')\n\t\t{\n\t\t\tthis.log.error(`Could not set grid value [${pCellColumnToBeSet}] = [${pCellValueToSet}] looked up by row key [${pRowKey}].  No valid row key!`);\n\t\t\treturn false;\n\t\t}\n\n\t\tif (!this.tuiGrid)\n\t\t{\n\t\t\tthis.log.warn(`Could not set grid value [${pCellColumnToBeSet}] = [${pCellValueToSet}] looked up by row key [${pRowKey}].  No valid grid!`);\n\t\t\treturn false;\n\t\t}\n\n\t\tthis.tuiGrid.setValue(pRowKey, pCellColumnToBeSet, pCellValueToSet);\n\t\treturn true;\n\t}\n}\n\nmodule.exports = PictSectionTuiGrid;\n\n/** @type {Record<string, any>} */\nmodule.exports.default_configuration = require('./Pict-Section-TuiGrid-DefaultConfiguration.json');\n\n},{\"./Pict-Section-TuiGrid-DefaultConfiguration.json\":5,\"./Pict-TuiGrid-Editors.js\":9,\"./Pict-TuiGrid-Headers.js\":10,\"pict-view\":4}],7:[function(require,module,exports){\n// Custom number editor class with an option for precision\nclass tuiCustomEditorNumber\n{\n\tconstructor(pProperties)\n\t{\n\t\tconst tmpElement = document.createElement('input');\n\n\t\tconst decimalPrecision = (pProperties.columnInfo.editor.options.decimalPrecision) ? pProperties.columnInfo.editor.options.decimalPrecision : 3;\n\n\t\ttmpElement.type = 'number';\n\t\ttmpElement.value = String(pProperties.value);\n\t\ttmpElement.oninput = (pElement) =>\n\t\t{\n\t\t\tif (pElement.target instanceof HTMLInputElement)\n\t\t\t{\n\t\t\t\tconst tmpCastNumber = parseFloat(pElement.target.value).toFixed(decimalPrecision).toString()\n\t\t\t\tif (tmpCastNumber.length < parseFloat(pElement.target.value).toString().length)\n\t\t\t\t{\n\t\t\t\t\tpElement.target.value = tmpCastNumber;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tthis.Element = tmpElement;\n\t}\n\n\tgetElement()\n\t{\n\t\treturn this.Element;\n\t}\n\n\tgetValue()\n\t{\n\t\treturn this.Element.value;\n\t}\n\n\tmounted()\n\t{\n\t\tthis.Element.select();\n\t}\n}\n\nmodule.exports = tuiCustomEditorNumber;\n\n},{}],8:[function(require,module,exports){\n// Custom number editor class with an option for precision\nclass tuiCustomEditorText\n{\n\tconstructor(pProperties)\n\t{\n\t\tconst tmpElement = document.createElement('input');\n\n\t\ttmpElement.type = 'text';\n\t\ttmpElement.value = String(pProperties.value);\n\t\ttmpElement.placeholder =  pProperties.columnInfo.editor.options.placeholder || '';\n\t\ttmpElement.pattern = pProperties.columnInfo.editor.options.pattern || '';\n\t\ttmpElement.minLength = pProperties.columnInfo.editor.options.minLength || '';\n\t\ttmpElement.maxLength = pProperties.columnInfo.editor.options.maxLength || '';\n\t\ttmpElement.required = pProperties.columnInfo.editor.options.required || '';\n\n\t\tthis.Element = tmpElement;\n\t}\n\n\tgetElement()\n\t{\n\t\treturn this.Element;\n\t}\n\n\tgetValue()\n\t{\n\t\treturn this.Element.value;\n\t}\n\n\tmounted()\n\t{\n\t\tthis.Element.select();\n\t}\n}\n\nmodule.exports = tuiCustomEditorText;\n\n},{}],9:[function(require,module,exports){\nmodule.exports =\n{\n\tEditorNumber: require('./Pict-TuiGrid-Editor-Number.js'),\n\tEditorText: require('./Pict-TuiGrid-Editor-Text.js'),\n};\n\n},{\"./Pict-TuiGrid-Editor-Number.js\":7,\"./Pict-TuiGrid-Editor-Text.js\":8}],10:[function(require,module,exports){\n// Custom column header where the header is hidden\nclass tuiCustomColumnHeaderNone\n{\n\tconstructor()\n\t{\n\t\tlet tmpElement = document.createElement('input');\n\t\ttmpElement.type = 'hidden';\n\t\ttmpElement.value = '';\n\t\tthis.Element = tmpElement;\n\t}\n\n\tgetElement()\n\t{\n\t\treturn this.Element;\n\t}\n\n\trender()\n\t{\n\t\t// Noop!\n\t}\n}\n\nmodule.exports =\n{\n\tCustomColumnHeaderNone: tuiCustomColumnHeaderNone,\n};\n\n},{}]},{},[6])(6)\n});\n\n","/**\n* Fable Service Base\n* @author <steven@velozo.com>\n*/\n\nconst libPackage = require('../package.json');\n\nclass FableServiceProviderBase\n{\n\t// The constructor can be used in two ways:\n\t// 1) With a fable, options object and service hash (the options object and service hash are optional)\n\t// 2) With an object or nothing as the first parameter, where it will be treated as the options object\n\tconstructor(pFable, pOptions, pServiceHash)\n\t{\n\t\t// Check if a fable was passed in; connect it if so\n\t\tif ((typeof(pFable) === 'object') && pFable.isFable)\n\t\t{\n\t\t\tthis.connectFable(pFable);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.fable = false;\n\t\t}\n\n\t\t// Initialize the services map if it wasn't passed in\n\t\t/** @type {Object} */\n\t\tthis._PackageFableServiceProvider = libPackage;\n\n\t\t// initialize options and UUID based on whether the fable was passed in or not.\n\t\tif (this.fable)\n\t\t{\n\t\t\tthis.UUID = pFable.getUUID();\n\t\t\tthis.options = (typeof(pOptions) === 'object') ? pOptions\n\t\t\t\t\t\t\t: {};\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// With no fable, check to see if there was an object passed into either of the first two\n\t\t\t// Parameters, and if so, treat it as the options object\n\t\t\tthis.options = ((typeof(pFable) === 'object') && !pFable.isFable) ? pFable\n\t\t\t\t\t\t\t: (typeof(pOptions) === 'object') ? pOptions\n\t\t\t\t\t\t\t: {};\n\t\t\tthis.UUID = `CORE-SVC-${Math.floor((Math.random() * (99999 - 10000)) + 10000)}`\n\t\t}\n\n\t\t// It's expected that the deriving class will set this\n\t\tthis.serviceType = `Unknown-${this.UUID}`;\n\n\t\t// The service hash is used to identify the specific instantiation of the service in the services map\n\t\tthis.Hash = (typeof(pServiceHash) === 'string') ? pServiceHash \n\t\t\t\t\t: (!this.fable && (typeof(pOptions) === 'string')) ? pOptions\n\t\t\t\t\t: `${this.UUID}`;\n\t}\n\n\tconnectFable(pFable)\n\t{\n\t\tif ((typeof(pFable) !== 'object') || (!pFable.isFable))\n\t\t{\n\t\t\tlet tmpErrorMessage = `Fable Service Provider Base: Cannot connect to Fable, invalid Fable object passed in.  The pFable parameter was a [${typeof(pFable)}].}`;\n\t\t\tconsole.log(tmpErrorMessage);\n\t\t\treturn new Error(tmpErrorMessage);\n\t\t}\n\n\t\tif (!this.fable)\n\t\t{\n\t\t\tthis.fable = pFable;\n\t\t}\n\n\t\tif (!this.log)\n\t\t{\n\t\t\tthis.log = this.fable.Logging;\n\t\t}\n\t\tif (!this.services)\n\t\t{\n\t\t\tthis.services = this.fable.services;\n\t\t}\n\n\t\tif (!this.servicesMap)\n\t\t{\n\t\t\tthis.servicesMap = this.fable.servicesMap;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tstatic isFableService = true;\n}\n\nmodule.exports = FableServiceProviderBase;\n\n// This is left here in case we want to go back to having different code/base class for \"core\" services\nmodule.exports.CoreServiceProviderBase = FableServiceProviderBase;","module.exports={\n    \"name\": \"pict-view\",\n    \"version\": \"1.0.61\",\n    \"description\": \"Pict View Base Class\",\n    \"main\": \"source/Pict-View.js\",\n    \"scripts\": {\n        \"test\": \"./node_modules/.bin/mocha -u tdd -R spec\",\n        \"start\": \"node source/Pict-View.js\",\n        \"coverage\": \"./node_modules/.bin/nyc --reporter=lcov --reporter=text-lcov ./node_modules/mocha/bin/_mocha -- -u tdd -R spec\",\n        \"build\": \"npx quack build\",\n        \"docker-dev-build\": \"docker build ./ -f Dockerfile_LUXURYCode -t pict-view-image:local\",\n        \"docker-dev-run\": \"docker run -it -d --name pict-view-dev -p 30001:8080 -p 38086:8086 -v \\\"$PWD/.config:/home/coder/.config\\\"  -v \\\"$PWD:/home/coder/pict-view\\\" -u \\\"$(id -u):$(id -g)\\\" -e \\\"DOCKER_USER=$USER\\\" pict-view-image:local\",\n        \"docker-dev-shell\": \"docker exec -it pict-view-dev /bin/bash\",\n        \"types\": \"tsc -p .\",\n        \"lint\": \"eslint source/**\"\n    },\n    \"types\": \"types/source/Pict-View.d.ts\",\n    \"repository\": {\n        \"type\": \"git\",\n        \"url\": \"git+https://github.com/stevenvelozo/pict-view.git\"\n    },\n    \"author\": \"steven velozo <steven@velozo.com>\",\n    \"license\": \"MIT\",\n    \"bugs\": {\n        \"url\": \"https://github.com/stevenvelozo/pict-view/issues\"\n    },\n    \"homepage\": \"https://github.com/stevenvelozo/pict-view#readme\",\n    \"devDependencies\": {\n        \"@eslint/js\": \"^9.28.0\",\n        \"browser-env\": \"^3.3.0\",\n        \"eslint\": \"^9.28.0\",\n        \"pict\": \"^1.0.272\",\n        \"quackage\": \"^1.0.41\",\n        \"typescript\": \"^5.8.3\"\n    },\n    \"mocha\": {\n        \"diff\": true,\n        \"extension\": [\n            \"js\"\n        ],\n        \"package\": \"./package.json\",\n        \"reporter\": \"spec\",\n        \"slow\": \"75\",\n        \"timeout\": \"5000\",\n        \"ui\": \"tdd\",\n        \"watch-files\": [\n            \"source/**/*.js\",\n            \"test/**/*.js\"\n        ],\n        \"watch-ignore\": [\n            \"lib/vendor\"\n        ]\n    },\n    \"dependencies\": {\n        \"fable\": \"^3.1.11\",\n        \"fable-serviceproviderbase\": \"^3.0.15\"\n    }\n}\n","\nconst libFableServiceBase = require('fable-serviceproviderbase');\n\nconst libPackage = require('../package.json');\n\nconst defaultPictViewSettings = (\n\t{\n\t\tDefaultRenderable: false,\n\t\tDefaultDestinationAddress: false,\n\t\tDefaultTemplateRecordAddress: false,\n\n\t\tViewIdentifier: false,\n\n\t\t// If this is set to true, when the App initializes this will.\n\t\t// After the App initializes, initialize will be called as soon as it's added.\n\t\tAutoInitialize: true,\n\t\tAutoInitializeOrdinal: 0,\n\n\t\t// If this is set to true, when the App autorenders (on load) this will.\n\t\t// After the App initializes, render will be called as soon as it's added.\n\t\tAutoRender: true,\n\t\tAutoRenderOrdinal: 0,\n\n\t\tAutoSolveWithApp: true,\n\t\tAutoSolveOrdinal: 0,\n\n\t\tCSSHash: false,\n\t\tCSS: false,\n\t\tCSSProvider: false,\n\t\tCSSPriority: 500,\n\n\t\tTemplates: [],\n\n\t\tDefaultTemplates: [],\n\n\t\tRenderables: [],\n\n\t\tManifests: {}\n\t});\n\n/** @typedef {(error?: Error) => void} ErrorCallback */\n/** @typedef {number | boolean} PictTimestamp */\n\n/**\n * @typedef {'replace' | 'append' | 'prepend' | 'append_once'} RenderMethod\n */\n/**\n * @typedef {Object} Renderable\n *\n * @property {string} RenderableHash - A unique hash for the renderable.\n * @property {string} TemplateHash] - The hash of the template to use for rendering this renderable.\n * @property {string} [DefaultTemplateRecordAddress] - The default address for resolving the data record for this renderable.\n * @property {string} [ContentDestinationAddress] - The default address (DOM CSS selector) for rendering the content of this renderable.\n * @property {RenderMethod} [RenderMethod=replace] - The method to use when projecting the renderable to the DOM ('replace', 'append', 'prepend', 'append_once').\n * @property {string} [TestAddress] - The address to use for testing the renderable.\n */\n\n/**\n * Represents a view in the Pict ecosystem.\n */\nclass PictView extends libFableServiceBase\n{\n\t/**\n\t * @param {any} pFable - The Fable object that this service is attached to.\n\t * @param {any} [pOptions] - (optional) The options for this service.\n\t * @param {string} [pServiceHash] - (optional) The hash of the service.\n\t */\n\tconstructor(pFable, pOptions, pServiceHash)\n\t{\n\t\t// Intersect default options, parent constructor, service information\n\t\tlet tmpOptions = Object.assign({}, JSON.parse(JSON.stringify(defaultPictViewSettings)), pOptions);\n\t\tsuper(pFable, tmpOptions, pServiceHash);\n\t\t//FIXME: add types to fable and ancillaries\n\t\t/** @type {any} */\n\t\tthis.fable;\n\t\t/** @type {any} */\n\t\tthis.options;\n\t\t/** @type {String} */\n\t\tthis.UUID;\n\t\t/** @type {String} */\n\t\tthis.Hash;\n\t\t/** @type {any} */\n\t\tthis.log;\n\n\t\tif (!this.options.ViewIdentifier)\n\t\t{\n\t\t\tthis.options.ViewIdentifier = `AutoViewID-${this.fable.getUUID()}`;\n\t\t}\n\t\tthis.serviceType = 'PictView';\n\t\t/** @type {Record<string, any>} */\n\t\tthis._Package = libPackage;\n\t\t// Convenience and consistency naming\n\t\t/** @type {import('pict') & { log: any, instantiateServiceProviderWithoutRegistration: (hash: String) => any }} */\n\t\tthis.pict = this.fable;\n\t\t// Wire in the essential Pict application state\n\t\tthis.AppData = this.pict.AppData;\n\t\tthis.Bundle = this.pict.Bundle;\n\n\t\t/** @type {PictTimestamp} */\n\t\tthis.initializeTimestamp = false;\n\t\t/** @type {PictTimestamp} */\n\t\tthis.lastSolvedTimestamp = false;\n\t\t/** @type {PictTimestamp} */\n\t\tthis.lastRenderedTimestamp = false;\n\t\t/** @type {PictTimestamp} */\n\t\tthis.lastMarshalFromViewTimestamp = false;\n\t\t/** @type {PictTimestamp} */\n\t\tthis.lastMarshalToViewTimestamp = false;\n\n\t\t// Load all templates from the array in the options\n\t\t// Templates are in the form of {Hash:'Some-Template-Hash',Template:'Template content',Source:'TemplateSource'}\n\t\tfor (let i = 0; i < this.options.Templates.length; i++)\n\t\t{\n\t\t\tlet tmpTemplate = this.options.Templates[i];\n\n\t\t\tif (!('Hash' in tmpTemplate) || !('Template' in tmpTemplate))\n\t\t\t{\n\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not load Template ${i} in the options array.`, tmpTemplate);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (!tmpTemplate.Source)\n\t\t\t\t{\n\t\t\t\t\ttmpTemplate.Source = `PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} options object.`;\n\t\t\t\t}\n\t\t\t\tthis.pict.TemplateProvider.addTemplate(tmpTemplate.Hash, tmpTemplate.Template, tmpTemplate.Source);\n\t\t\t}\n\t\t}\n\n\t\t// Load all default templates from the array in the options\n\t\t// Templates are in the form of {Prefix:'',Postfix:'-List-Row',Template:'Template content',Source:'TemplateSourceString'}\n\t\tfor (let i = 0; i < this.options.DefaultTemplates.length; i++)\n\t\t{\n\t\t\tlet tmpDefaultTemplate = this.options.DefaultTemplates[i];\n\n\t\t\tif (!('Postfix' in tmpDefaultTemplate) || !('Template' in tmpDefaultTemplate))\n\t\t\t{\n\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not load Default Template ${i} in the options array.`, tmpDefaultTemplate);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (!tmpDefaultTemplate.Source)\n\t\t\t\t{\n\t\t\t\t\ttmpDefaultTemplate.Source = `PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} options object.`;\n\t\t\t\t}\n\t\t\t\tthis.pict.TemplateProvider.addDefaultTemplate(tmpDefaultTemplate.Prefix, tmpDefaultTemplate.Postfix, tmpDefaultTemplate.Template, tmpDefaultTemplate.Source);\n\t\t\t}\n\t\t}\n\n\t\t// Load the CSS if it's available\n\t\tif (this.options.CSS)\n\t\t{\n\t\t\tlet tmpCSSHash = this.options.CSSHash ? this.options.CSSHash : `View-${this.options.ViewIdentifier}`;\n\t\t\tlet tmpCSSProvider = this.options.CSSProvider ? this.options.CSSProvider : tmpCSSHash;\n\t\t\tthis.pict.CSSMap.addCSS(tmpCSSHash, this.options.CSS, tmpCSSProvider, this.options.CSSPriority);\n\t\t}\n\n\t\t// Load all renderables\n\t\t// Renderables are launchable renderable instructions with templates\n\t\t// They look as such: {Identifier:'ContentEntry', TemplateHash:'Content-Entry-Section-Main', ContentDestinationAddress:'#ContentSection', RecordAddress:'AppData.Content.DefaultText', ManifestTransformation:'ManyfestHash', ManifestDestinationAddress:'AppData.Content.DataToTransformContent'}\n\t\t// The only parts that are necessary are Identifier and Template\n\t\t// A developer can then do render('ContentEntry') and it just kinda works.  Or they can override the ContentDestinationAddress\n\t\t/** @type {Object<String, Renderable>} */\n\t\tthis.renderables = {};\n\t\tfor (let i = 0; i < this.options.Renderables.length; i++)\n\t\t{\n\t\t\t/** @type {Renderable} */\n\t\t\tlet tmpRenderable = this.options.Renderables[i];\n\t\t\tthis.addRenderable(tmpRenderable);\n\t\t}\n\t}\n\n\t/**\n\t * Adds a renderable to the view.\n\t *\n\t * @param {string | Renderable} pRenderableHash - The hash of the renderable, or a renderable object.\n\t * @param {string} [pTemplateHash] - (optional) The hash of the template for the renderable.\n\t * @param {string} [pDefaultTemplateRecordAddress] - (optional) The default data address for the template.\n\t * @param {string} [pDefaultDestinationAddress] - (optional) The default destination address for the renderable.\n\t * @param {RenderMethod} [pRenderMethod=replace] - (optional) The method to use when rendering the renderable (ex. 'replace').\n\t */\n\taddRenderable(pRenderableHash, pTemplateHash, pDefaultTemplateRecordAddress, pDefaultDestinationAddress, pRenderMethod)\n\t{\n\t\t/** @type {Renderable} */\n\t\tlet tmpRenderable;\n\n\t\tif (typeof(pRenderableHash) == 'object')\n\t\t{\n\t\t\t// The developer passed in the renderable as an object.\n\t\t\t// Use theirs instead!\n\t\t\ttmpRenderable = pRenderableHash;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t/** @type {RenderMethod} */\n\t\t\tlet tmpRenderMethod = (typeof(pRenderMethod) !== 'string') ? pRenderMethod : 'replace';\n\t\t\ttmpRenderable = (\n\t\t\t\t{\n\t\t\t\t\tRenderableHash: pRenderableHash,\n\t\t\t\t\tTemplateHash: pTemplateHash,\n\t\t\t\t\tDefaultTemplateRecordAddress: pDefaultTemplateRecordAddress,\n\t\t\t\t\tContentDestinationAddress: pDefaultDestinationAddress,\n\t\t\t\t\tRenderMethod: tmpRenderMethod\n\t\t\t\t});\n\t\t}\n\n\t\tif ((typeof(tmpRenderable.RenderableHash) != 'string') || (typeof(tmpRenderable.TemplateHash) != 'string'))\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not load Renderable; RenderableHash or TemplateHash are invalid.`, tmpRenderable);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (this.pict.LogNoisiness > 0)\n\t\t\t{\n\t\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} adding renderable [${tmpRenderable.RenderableHash}] pointed to template ${tmpRenderable.TemplateHash}.`);\n\t\t\t}\n\n\t\t\tthis.renderables[tmpRenderable.RenderableHash] = tmpRenderable;\n\t\t}\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*                        Code Section: Initialization                        */\n\t/* -------------------------------------------------------------------------- */\n\t/**\n\t * Lifecycle hook that triggers before the view is initialized.\n\t */\n\tonBeforeInitialize()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onBeforeInitialize:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers before the view is initialized (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonBeforeInitializeAsync(fCallback)\n\t{\n\t\tthis.onBeforeInitialize();\n\t\treturn fCallback();\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers when the view is initialized.\n\t */\n\tonInitialize()\n\t{\n\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onInitialize:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers when the view is initialized (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonInitializeAsync(fCallback)\n\t{\n\t\tthis.onInitialize();\n\t\treturn fCallback();\n\t}\n\n\t/**\n\t * Performs view initialization.\n\t */\n\tinitialize()\n\t{\n\t\tif (this.pict.LogControlFlow)\n\t\t{\n\t\t\tthis.log.trace(`PICT-ControlFlow VIEW [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} initialize:`);\n\t\t}\n\n\t\tif (!this.initializeTimestamp)\n\t\t{\n\t\t\tthis.onBeforeInitialize();\n\t\t\tthis.onInitialize();\n\t\t\tthis.onAfterInitialize();\n\t\t\tthis.initializeTimestamp = this.pict.log.getTimeStamp();\n\t\t\treturn true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.log.warn(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} initialize called but initialization is already completed.  Aborting.`);\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * Performs view initialization (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tinitializeAsync(fCallback)\n\t{\n\t\tif (this.pict.LogControlFlow)\n\t\t{\n\t\t\tthis.log.trace(`PICT-ControlFlow VIEW [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} initializeAsync:`);\n\t\t}\n\n\t\tif (!this.initializeTimestamp)\n\t\t{\n\t\t\tlet tmpAnticipate = this.pict.instantiateServiceProviderWithoutRegistration('Anticipate');\n\n\t\t\tif (this.pict.LogNoisiness > 0)\n\t\t\t{\n\t\t\t\tthis.log.info(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} beginning initialization...`);\n\t\t\t}\n\n\t\t\ttmpAnticipate.anticipate(this.onBeforeInitializeAsync.bind(this));\n\t\t\ttmpAnticipate.anticipate(this.onInitializeAsync.bind(this));\n\t\t\ttmpAnticipate.anticipate(this.onAfterInitializeAsync.bind(this));\n\n\t\t\ttmpAnticipate.wait(\n\t\t\t\t/** @param {Error} pError */\n\t\t\t\t(pError) =>\n\t\t\t\t{\n\t\t\t\t\tif (pError)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} initialization failed: ${pError.message || pError}`, { stack: pError.stack });\n\t\t\t\t\t}\n\t\t\t\t\tthis.initializeTimestamp = this.pict.log.getTimeStamp();\n\t\t\t\t\tif (this.pict.LogNoisiness > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.log.info(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} initialization complete.`);\n\t\t\t\t\t}\n\t\t\t\t\treturn fCallback();\n\t\t\t\t});\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.log.warn(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} async initialize called but initialization is already completed.  Aborting.`);\n\t\t\t// TODO: Should this be an error?\n\t\t\treturn fCallback();\n\t\t}\n\t}\n\n\tonAfterInitialize()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onAfterInitialize:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers after the view is initialized (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonAfterInitializeAsync(fCallback)\n\t{\n\t\tthis.onAfterInitialize();\n\t\treturn fCallback();\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*                            Code Section: Render                            */\n\t/* -------------------------------------------------------------------------- */\n\t/**\n\t * Lifecycle hook that triggers before the view is rendered.\n\t *\n\t * @param {Renderable} pRenderable - The renderable that will be rendered.\n\t * @param {string} pRenderDestinationAddress - The address where the renderable will be rendered.\n\t * @param {any} pRecord - The record (data) that will be used to render the renderable.\n\t */\n\tonBeforeRender(pRenderable, pRenderDestinationAddress, pRecord)\n\t{\n\t\t// Overload this to mess with stuff before the content gets generated from the template\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onBeforeRender:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers before the view is rendered (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonBeforeRenderAsync(fCallback)\n\t{\n\t\treturn fCallback();\n\t}\n\n\t/**\n\t * Builds the render options for a renderable.\n\t *\n\t * For DRY purposes on the three flavors of render.\n\t *\n\t * @param {string|ErrorCallback} [pRenderableHash] - The hash of the renderable to render.\n\t * @param {string|ErrorCallback} [pRenderDestinationAddress] - The address where the renderable will be rendered.\n\t * @param {string|object|ErrorCallback} [pTemplateRecordAddress] - The address of (or actual obejct) where the data for the template is stored.\n\t */\n\tbuildRenderOptions(pRenderableHash, pRenderDestinationAddress, pTemplateRecordAddress)\n\t{\n\t\tlet tmpRenderOptions = {Valid: true};\n\t\ttmpRenderOptions.RenderableHash = (typeof (pRenderableHash) === 'string') ? pRenderableHash :\n\t\t\t\t\t\t\t\t(typeof (this.options.DefaultRenderable) == 'string') ?\n\t\t\t\t\t\t\t\tthis.options.DefaultRenderable : false;\n\t\tif (!tmpRenderOptions.RenderableHash)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not find a suitable RenderableHash ${tmpRenderOptions.RenderableHash} (param ${pRenderableHash}because it is not a valid renderable.`);\n\t\t\ttmpRenderOptions.Valid = false;\n\t\t}\n\n\t\ttmpRenderOptions.Renderable = this.renderables[tmpRenderOptions.RenderableHash];\n\t\tif (!tmpRenderOptions.Renderable)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderOptions.RenderableHash} (param ${pRenderableHash}) because it does not exist.`);\n\t\t\ttmpRenderOptions.Valid = false;\n\t\t}\n\n\t\ttmpRenderOptions.DestinationAddress = (typeof (pRenderDestinationAddress) === 'string') ? pRenderDestinationAddress :\n\t\t\t(typeof (tmpRenderOptions.Renderable.ContentDestinationAddress) === 'string') ? tmpRenderOptions.Renderable.ContentDestinationAddress :\n\t\t\t\t(typeof (this.options.DefaultDestinationAddress) === 'string') ? this.options.DefaultDestinationAddress : false;\n\t\tif (!tmpRenderOptions.DestinationAddress)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderOptions.RenderableHash} (param ${pRenderableHash}) because it does not have a valid destination address (param ${pRenderDestinationAddress}).`);\n\t\t\ttmpRenderOptions.Valid = false;\n\t\t}\n\n\t\tif (typeof(pTemplateRecordAddress) === 'object')\n\t\t{\n\t\t\ttmpRenderOptions.RecordAddress = 'Passed in as object';\n\t\t\ttmpRenderOptions.Record = pTemplateRecordAddress;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttmpRenderOptions.RecordAddress = (typeof (pTemplateRecordAddress) === 'string') ? pTemplateRecordAddress :\n\t\t\t\t(typeof (tmpRenderOptions.Renderable.DefaultTemplateRecordAddress) === 'string') ? tmpRenderOptions.Renderable.DefaultTemplateRecordAddress :\n\t\t\t\t(typeof (this.options.DefaultTemplateRecordAddress) === 'string') ? this.options.DefaultTemplateRecordAddress : false;\n\t\t\ttmpRenderOptions.Record = (typeof (tmpRenderOptions.RecordAddress) === 'string') ? this.pict.DataProvider.getDataByAddress(tmpRenderOptions.RecordAddress) : undefined;\n\t\t}\n\n\t\treturn tmpRenderOptions;\n\t}\n\n\t/**\n\t * Assigns the content to the destination address.\n\t *\n\t * For DRY purposes on the three flavors of render.\n\t *\n\t * @param {Renderable} pRenderable - The renderable to render.\n\t * @param {string} pRenderDestinationAddress - The address where the renderable will be rendered.\n\t * @param {string} pContent - The content to render.\n\t * @returns {boolean} - Returns true if the content was assigned successfully.\n\t * @memberof PictView\n\t */\n\tassignRenderContent(pRenderable, pRenderDestinationAddress, pContent)\n\t{\n\t\treturn this.pict.ContentAssignment.projectContent(pRenderable.RenderMethod, pRenderDestinationAddress, pContent, pRenderable.TestAddress);\n\t}\n\n\t/**\n\t * Render a renderable from this view.\n\t *\n\t * @param {string} [pRenderable] - The hash of the renderable to render.\n\t * @param {string} [pRenderDestinationAddress] - The address where the renderable will be rendered.\n\t * @param {string|object} [pTemplateRecordAddress] - The address where the data for the template is stored.\n\t * @return {boolean}\n\t */\n\trender(pRenderable, pRenderDestinationAddress, pTemplateRecordAddress)\n\t{\n\t\tlet tmpRenderableHash = (typeof (pRenderable) === 'string') ? pRenderable :\n\t\t\t(typeof (this.options.DefaultRenderable) == 'string') ? this.options.DefaultRenderable : false;\n\t\tif (!tmpRenderableHash)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderable}) because it is not a valid renderable.`);\n\t\t\treturn false;\n\t\t}\n\n\t\tlet tmpRenderable;\n\t\tif (tmpRenderableHash == '__Virtual')\n\t\t{\n\t\t\ttmpRenderable = {\n\t\t\t\t\tRenderableHash: '__Virtual',\n\t\t\t\t\tTemplateHash: this.renderables[this.options.DefaultRenderable].TemplateHash,\n\t\t\t\t\tDestinationAddress: pRenderDestinationAddress,\n\t\t\t\t\tRenderMethod: 'virtual-assignment'\n\t\t\t\t};\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttmpRenderable = this.renderables[tmpRenderableHash];\n\t\t}\n\n\t\tif (!tmpRenderable)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderable}) because it does not exist.`);\n\t\t\treturn false;\n\t\t}\n\n\t\tlet tmpRenderDestinationAddress = (typeof (pRenderDestinationAddress) === 'string') ? pRenderDestinationAddress :\n\t\t\t(typeof (tmpRenderable.ContentDestinationAddress) === 'string') ? tmpRenderable.ContentDestinationAddress :\n\t\t\t\t(typeof (this.options.DefaultDestinationAddress) === 'string') ? this.options.DefaultDestinationAddress : false;\n\n\t\tif (!tmpRenderDestinationAddress)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderable}) because it does not have a valid destination address.`);\n\t\t\treturn false;\n\t\t}\n\n\t\tlet tmpRecordAddress;\n\t\tlet tmpRecord;\n\n\t\tif (typeof(pTemplateRecordAddress) === 'object')\n\t\t{\n\t\t\ttmpRecord = pTemplateRecordAddress;\n\t\t\ttmpRecordAddress = 'Passed in as object';\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttmpRecordAddress = (typeof (pTemplateRecordAddress) === 'string') ? pTemplateRecordAddress :\n\t\t\t\t(typeof (tmpRenderable.DefaultTemplateRecordAddress) === 'string') ? tmpRenderable.DefaultTemplateRecordAddress :\n\t\t\t\t\t(typeof (this.options.DefaultTemplateRecordAddress) === 'string') ? this.options.DefaultTemplateRecordAddress : false;\n\n\t\t\ttmpRecord = (typeof (tmpRecordAddress) === 'string') ? this.pict.DataProvider.getDataByAddress(tmpRecordAddress) : undefined;\n\t\t}\n\n\t\t// Execute the developer-overridable pre-render behavior\n\t\tthis.onBeforeRender(tmpRenderable, tmpRenderDestinationAddress, tmpRecord);\n\n\t\tif (this.pict.LogControlFlow)\n\t\t{\n\t\t\tthis.log.trace(`PICT-ControlFlow VIEW [${this.UUID}]::[${this.Hash}] Renderable[${tmpRenderableHash}] Destination[${tmpRenderDestinationAddress}] TemplateRecordAddress[${tmpRecordAddress}] render:`);\n\t\t}\n\t\tif (this.pict.LogNoisiness > 0)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} Beginning Render of Renderable[${tmpRenderableHash}] to Destination [${tmpRenderDestinationAddress}]...`);\n\t\t}\n\t\t// Generate the content output from the template and data\n\t\tlet tmpContent = this.pict.parseTemplateByHash(tmpRenderable.TemplateHash, tmpRecord, null, [this]);\n\n\t\tif (this.pict.LogNoisiness > 0)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} Assigning Renderable[${tmpRenderableHash}] content length ${tmpContent.length} to Destination [${tmpRenderDestinationAddress}] using render method [${tmpRenderable.RenderMethod}].`);\n\t\t}\n\n\t\t// Assign the content to the destination address\n\t\tthis.pict.ContentAssignment.projectContent(tmpRenderable.RenderMethod, tmpRenderDestinationAddress, tmpContent, tmpRenderable.TestAddress);\n\n\t\t// Execute the developer-overridable post-render behavior\n\t\tthis.onAfterRender(tmpRenderable, tmpRenderDestinationAddress, tmpRecord, tmpContent);\n\n\t\tthis.lastRenderedTimestamp = this.pict.log.getTimeStamp();\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Render a renderable from this view.\n\t *\n\t * @param {string|ErrorCallback} [pRenderableHash] - The hash of the renderable to render.\n\t * @param {string|ErrorCallback} [pRenderDestinationAddress] - The address where the renderable will be rendered.\n\t * @param {string|object|ErrorCallback} [pTemplateRecordAddress] - The address where the data for the template is stored.\n\t * @param {ErrorCallback} [fCallback] - The callback to call when the async operation is complete.\n\t *\n\t * @return {void}\n\t */\n\trenderAsync(pRenderableHash, pRenderDestinationAddress, pTemplateRecordAddress, fCallback)\n\t{\n\t\tlet tmpRenderableHash = (typeof (pRenderableHash) === 'string') ? pRenderableHash :\n\t\t\t(typeof (this.options.DefaultRenderable) == 'string') ? this.options.DefaultRenderable : false;\n\n\t\t// Allow the callback to be passed in as the last parameter no matter what\n\t\t/** @type {ErrorCallback} */\n\t\tlet tmpCallback = (typeof(fCallback) === 'function') ? fCallback :\n\t\t\t\t\t\t\t(typeof(pTemplateRecordAddress) === 'function') ? pTemplateRecordAddress :\n\t\t\t\t\t\t\t(typeof(pRenderDestinationAddress) === 'function') ? pRenderDestinationAddress :\n\t\t\t\t\t\t\t(typeof(pRenderableHash) === 'function') ? pRenderableHash :\n\t\t\t\t\t\t\tnull;\n\n\t\tif (!tmpCallback)\n\t\t{\n\t\t\tthis.log.warn(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.Name} renderAsync was called without a valid callback.  A callback will be generated but this could lead to race conditions.`);\n\t\t\ttmpCallback = (pError) =>\n\t\t\t\t{\n\t\t\t\t\tif (pError)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.Name} renderAsync Auto Callback Error: ${pError}`, pError);\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t}\n\n\t\tif (!tmpRenderableHash)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not asynchronously render ${tmpRenderableHash} (param ${pRenderableHash}because it is not a valid renderable.`);\n\t\t\treturn tmpCallback(new Error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not asynchronously render ${tmpRenderableHash} (param ${pRenderableHash}because it is not a valid renderable.`));\n\t\t}\n\n\t\tlet tmpRenderable;\n\t\tif (tmpRenderableHash == '__Virtual')\n\t\t{\n\t\t\ttmpRenderable = {\n\t\t\t\t\tRenderableHash: '__Virtual',\n\t\t\t\t\tTemplateHash: this.renderables[this.options.DefaultRenderable].TemplateHash,\n\t\t\t\t\tDestinationAddress: pRenderDestinationAddress,\n\t\t\t\t\tRenderMethod: 'virtual-assignment'\n\t\t\t\t};\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttmpRenderable = this.renderables[tmpRenderableHash];\n\t\t}\n\n\t\tif (!tmpRenderable)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderableHash}) because it does not exist.`);\n\t\t\treturn tmpCallback(new Error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderableHash}) because it does not exist.`));\n\t\t}\n\n\t\tlet tmpRenderDestinationAddress = (typeof (pRenderDestinationAddress) === 'string') ? pRenderDestinationAddress :\n\t\t\t(typeof (tmpRenderable.ContentDestinationAddress) === 'string') ? tmpRenderable.ContentDestinationAddress :\n\t\t\t\t(typeof (this.options.DefaultDestinationAddress) === 'string') ? this.options.DefaultDestinationAddress : false;\n\n\t\tif (!tmpRenderDestinationAddress)\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render ${tmpRenderableHash} (param ${pRenderableHash}) because it does not have a valid destination address.`);\n\t\t\treturn tmpCallback(new Error(`Could not render ${tmpRenderableHash}`));\n\t\t}\n\n\t\tlet tmpRecordAddress;\n\t\tlet tmpRecord;\n\n\t\tif (typeof(pTemplateRecordAddress) === 'object')\n\t\t{\n\t\t\ttmpRecord = pTemplateRecordAddress;\n\t\t\ttmpRecordAddress = 'Passed in as object';\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttmpRecordAddress = (typeof (pTemplateRecordAddress) === 'string') ? pTemplateRecordAddress :\n\t\t\t\t(typeof (tmpRenderable.DefaultTemplateRecordAddress) === 'string') ? tmpRenderable.DefaultTemplateRecordAddress :\n\t\t\t\t\t(typeof (this.options.DefaultTemplateRecordAddress) === 'string') ? this.options.DefaultTemplateRecordAddress : false;\n\n\t\t\ttmpRecord = (typeof (tmpRecordAddress) === 'string') ? this.pict.DataProvider.getDataByAddress(tmpRecordAddress) : undefined;\n\t\t}\n\n\t\tif (this.pict.LogControlFlow)\n\t\t{\n\t\t\tthis.log.trace(`PICT-ControlFlow VIEW [${this.UUID}]::[${this.Hash}] Renderable[${tmpRenderableHash}] Destination[${tmpRenderDestinationAddress}] TemplateRecordAddress[${tmpRecordAddress}] renderAsync:`);\n\t\t}\n\t\tif (this.pict.LogNoisiness > 2)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} Beginning Asynchronous Render (callback-style)...`);\n\t\t}\n\n\t\tlet tmpAnticipate = this.fable.newAnticipate();\n\n\t\ttmpAnticipate.anticipate(\n\t\t\t(fOnBeforeRenderCallback) =>\n\t\t\t{\n\t\t\t\tthis.onBeforeRender(tmpRenderable, tmpRenderDestinationAddress, tmpRecord);\n\t\t\t\tthis.onBeforeRenderAsync(fOnBeforeRenderCallback);\n\t\t\t});\n\n\t\tlet tmpContent;\n\t\ttmpAnticipate.anticipate(\n\t\t\t(fAsyncTemplateCallback) =>\n\t\t\t{\n\t\t\t\t// Render the template (asynchronously)\n\t\t\t\tthis.pict.parseTemplateByHash(tmpRenderable.TemplateHash, tmpRecord,\n\t\t\t\t\t(pError, pContent) =>\n\t\t\t\t\t{\n\t\t\t\t\t\tif (pError)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render (asynchronously) ${tmpRenderableHash} (param ${pRenderableHash}) because it did not parse the template.`, pError);\n\t\t\t\t\t\t\treturn fAsyncTemplateCallback(pError);\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttmpContent = pContent;\n\n\t\t\t\t\t\tif (this.pict.LogNoisiness > 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} Assigning Renderable[${tmpRenderableHash}] content length ${pContent.length} to Destination [${tmpRenderDestinationAddress}] using Async render method ${tmpRenderable.RenderMethod}.`);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthis.pict.ContentAssignment.projectContent(tmpRenderable.RenderMethod, tmpRenderDestinationAddress, pContent, tmpRenderable.TestAddress);\n\n\t\t\t\t\t\t// Execute the developer-overridable asynchronous post-render behavior\n\t\t\t\t\t\tthis.lastRenderedTimestamp = this.pict.log.getTimeStamp();\n\t\t\t\t\t\treturn fAsyncTemplateCallback();\n\t\t\t\t\t}, [this]);\n\t\t\t});\n\n\t\ttmpAnticipate.anticipate(\n\t\t\t(fOnAfterRenderCallback) =>\n\t\t\t{\n\t\t\t\tthis.onAfterRender(tmpRenderable, tmpRenderDestinationAddress, tmpRecord, tmpContent);\n\t\t\t\tthis.onAfterRenderAsync(fOnAfterRenderCallback);\n\t\t\t});\n\n\t\ttmpAnticipate.wait(tmpCallback);\n\t}\n\n\t/**\n\t * Renders the default renderable.\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\trenderDefaultAsync(fCallback)\n\t{\n\t\t// Render the default renderable\n\t\tthis.renderAsync(fCallback);\n\t}\n\n\t/**\n\t * @param {string} [pRenderableHash] - The hash of the renderable to render.\n\t * @param {string} [pRenderDestinationAddress] - The address where the renderable will be rendered.\n\t * @param {string|object} [pTemplateRecordAddress] - The address of (or actual obejct) where the data for the template is stored.\n\t */\n\tbasicRender(pRenderableHash, pRenderDestinationAddress, pTemplateRecordAddress)\n\t{\n\t\tlet tmpRenderOptions = this.buildRenderOptions(pRenderableHash, pRenderDestinationAddress, pTemplateRecordAddress);\n\t\tif (tmpRenderOptions.Valid)\n\t\t{\n\t\t\tthis.assignRenderContent(tmpRenderOptions.Renderable, tmpRenderOptions.DestinationAddress, this.pict.parseTemplateByHash(tmpRenderOptions.Renderable.TemplateHash, tmpRenderOptions.Record, null, [this]));\n\t\t\treturn true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not perform a basic render of ${tmpRenderOptions.RenderableHash} because it is not valid.`);\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * @param {string|ErrorCallback} [pRenderableHash] - The hash of the renderable to render.\n\t * @param {string|ErrorCallback} [pRenderDestinationAddress] - The address where the renderable will be rendered.\n\t * @param {string|Object|ErrorCallback} [pTemplateRecordAddress] - The address of (or actual obejct) where the data for the template is stored.\n\t * @param {ErrorCallback} [fCallback] - The callback to call when the async operation is complete.\n\t */\n\tbasicRenderAsync(pRenderableHash, pRenderDestinationAddress, pTemplateRecordAddress, fCallback)\n\t{\n\t\t// Allow the callback to be passed in as the last parameter no matter what\n\t\t/** @type {ErrorCallback} */\n\t\tlet tmpCallback = (typeof(fCallback) === 'function') ? fCallback :\n\t\t\t\t\t\t\t(typeof(pTemplateRecordAddress) === 'function') ? pTemplateRecordAddress :\n\t\t\t\t\t\t\t(typeof(pRenderDestinationAddress) === 'function') ? pRenderDestinationAddress :\n\t\t\t\t\t\t\t(typeof(pRenderableHash) === 'function') ? pRenderableHash :\n\t\t\t\t\t\t\tnull;\n\t\tif (!tmpCallback)\n\t\t{\n\t\t\tthis.log.warn(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.Name} basicRenderAsync was called without a valid callback.  A callback will be generated but this could lead to race conditions.`);\n\t\t\ttmpCallback = (pError) =>\n\t\t\t\t{\n\t\t\t\t\tif (pError)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.Name} basicRenderAsync Auto Callback Error: ${pError}`, pError);\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t}\n\n\t\tconst tmpRenderOptions = this.buildRenderOptions(pRenderableHash, pRenderDestinationAddress, pTemplateRecordAddress);\n\t\tif (tmpRenderOptions.Valid)\n\t\t{\n\t\t\tthis.pict.parseTemplateByHash(tmpRenderOptions.Renderable.TemplateHash, tmpRenderOptions.Record,\n\t\t\t\t/**\n\t\t\t\t * @param {Error} [pError] - The error that occurred during template parsing.\n\t\t\t\t * @param {string} [pContent] - The content that was rendered from the template.\n\t\t\t\t */\n\t\t\t\t(pError, pContent) =>\n\t\t\t\t{\n\t\t\t\t\tif (pError)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not render (asynchronously) ${tmpRenderOptions.RenderableHash} because it did not parse the template.`, pError);\n\t\t\t\t\t\treturn tmpCallback(pError);\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.assignRenderContent(tmpRenderOptions.Renderable, tmpRenderOptions.DestinationAddress, pContent);\n\t\t\t\t\treturn tmpCallback();\n\t\t\t\t}, [this]);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlet tmpErrorMessage = `PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} could not perform a basic render of ${tmpRenderOptions.RenderableHash} because it is not valid.`;\n\t\t\tthis.log.error(tmpErrorMessage);\n\t\t\treturn tmpCallback(new Error(tmpErrorMessage));\n\t\t}\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers after the view is rendered.\n\t *\n\t * @param {Renderable} pRenderable - The renderable that was rendered.\n\t * @param {string} pRenderDestinationAddress - The address where the renderable was rendered.\n\t * @param {any} pRecord - The record (data) that was used by the renderable.\n\t * @param {string} pContent - The content that was rendered.\n\t */\n\tonAfterRender(pRenderable, pRenderDestinationAddress, pRecord, pContent)\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onAfterRender:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers after the view is rendered (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonAfterRenderAsync(fCallback)\n\t{\n\t\treturn fCallback();\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*                            Code Section: Solver                            */\n\t/* -------------------------------------------------------------------------- */\n\t/**\n\t * Lifecycle hook that triggers before the view is solved.\n\t */\n\tonBeforeSolve()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onBeforeSolve:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers before the view is solved (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonBeforeSolveAsync(fCallback)\n\t{\n\t\tthis.onBeforeSolve();\n\t\treturn fCallback();\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers when the view is solved.\n\t */\n\tonSolve()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onSolve:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers when the view is solved (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonSolveAsync(fCallback)\n\t{\n\t\tthis.onSolve();\n\t\treturn fCallback();\n\t}\n\n\t/**\n\t * Performs view solving and triggers lifecycle hooks.\n\t *\n\t * @return {boolean} - True if the view was solved successfully, false otherwise.\n\t */\n\tsolve()\n\t{\n\t\tif (this.pict.LogNoisiness > 2)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} executing solve() function...`);\n\t\t}\n\t\tthis.onBeforeSolve();\n\t\tthis.onSolve();\n\t\tthis.onAfterSolve();\n\t\tthis.lastSolvedTimestamp = this.pict.log.getTimeStamp();\n\t\treturn true;\n\t}\n\n\t/**\n\t * Performs view solving and triggers lifecycle hooks (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tsolveAsync(fCallback)\n\t{\n\t\tlet tmpAnticipate = this.pict.instantiateServiceProviderWithoutRegistration('Anticipate');\n\n\t\t/** @type {ErrorCallback} */\n\t\tlet tmpCallback = (typeof(fCallback) === 'function') ? fCallback : null;\n\t\tif (!tmpCallback)\n\t\t{\n\t\t\tthis.log.warn(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.Name} solveAsync was called without a valid callback.  A callback will be generated but this could lead to race conditions.`);\n\t\t\ttmpCallback = (pError) =>\n\t\t\t\t{\n\t\t\t\t\tif (pError)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.Name} solveAsync Auto Callback Error: ${pError}`, pError);\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t}\n\n\t\ttmpAnticipate.anticipate(this.onBeforeSolveAsync.bind(this));\n\t\ttmpAnticipate.anticipate(this.onSolveAsync.bind(this));\n\t\ttmpAnticipate.anticipate(this.onAfterSolveAsync.bind(this));\n\n\t\ttmpAnticipate.wait(\n\t\t\t(pError) =>\n\t\t\t{\n\t\t\t\tif (this.pict.LogNoisiness > 2)\n\t\t\t\t{\n\t\t\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} solveAsync() complete.`);\n\t\t\t\t}\n\t\t\t\tthis.lastSolvedTimestamp = this.pict.log.getTimeStamp();\n\t\t\t\treturn tmpCallback(pError);\n\t\t\t});\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers after the view is solved.\n\t */\n\tonAfterSolve()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onAfterSolve:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers after the view is solved (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonAfterSolveAsync(fCallback)\n\t{\n\t\tthis.onAfterSolve();\n\t\treturn fCallback();\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*                     Code Section: Marshal From View                        */\n\t/* -------------------------------------------------------------------------- */\n\t/**\n\t * Lifecycle hook that triggers before data is marshaled from the view.\n\t *\n\t * @return {boolean} - True if the operation was successful, false otherwise.\n\t */\n\tonBeforeMarshalFromView()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onBeforeMarshalFromView:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers before data is marshaled from the view (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonBeforeMarshalFromViewAsync(fCallback)\n\t{\n\t\tthis.onBeforeMarshalFromView();\n\t\treturn fCallback();\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers when data is marshaled from the view.\n\t */\n\tonMarshalFromView()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onMarshalFromView:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers when data is marshaled from the view (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonMarshalFromViewAsync(fCallback)\n\t{\n\n\t\tthis.onMarshalFromView();\n\t\treturn fCallback();\n\t}\n\n\t/**\n\t * Marshals data from the view.\n\t *\n\t * @return {boolean} - True if the operation was successful, false otherwise.\n\t */\n\tmarshalFromView()\n\t{\n\t\tif (this.pict.LogNoisiness > 2)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} executing solve() function...`);\n\t\t}\n\t\tthis.onBeforeMarshalFromView();\n\t\tthis.onMarshalFromView();\n\t\tthis.onAfterMarshalFromView();\n\t\tthis.lastMarshalFromViewTimestamp = this.pict.log.getTimeStamp();\n\t\treturn true;\n\t}\n\n\t/**\n\t * Marshals data from the view (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tmarshalFromViewAsync(fCallback)\n\t{\n\t\tlet tmpAnticipate = this.pict.instantiateServiceProviderWithoutRegistration('Anticipate');\n\n\t\t/** @type {ErrorCallback} */\n\t\tlet tmpCallback = (typeof(fCallback) === 'function') ? fCallback : null;\n\t\tif (!tmpCallback)\n\t\t{\n\t\t\tthis.log.warn(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.Name} marshalFromViewAsync was called without a valid callback.  A callback will be generated but this could lead to race conditions.`);\n\t\t\ttmpCallback = (pError) =>\n\t\t\t\t{\n\t\t\t\t\tif (pError)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.Name} marshalFromViewAsync Auto Callback Error: ${pError}`, pError);\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t}\n\n\t\ttmpAnticipate.anticipate(this.onBeforeMarshalFromViewAsync.bind(this));\n\t\ttmpAnticipate.anticipate(this.onMarshalFromViewAsync.bind(this));\n\t\ttmpAnticipate.anticipate(this.onAfterMarshalFromViewAsync.bind(this));\n\n\t\ttmpAnticipate.wait(\n\t\t\t(pError) =>\n\t\t\t{\n\t\t\t\tif (this.pict.LogNoisiness > 2)\n\t\t\t\t{\n\t\t\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} marshalFromViewAsync() complete.`);\n\t\t\t\t}\n\t\t\t\tthis.lastMarshalFromViewTimestamp = this.pict.log.getTimeStamp();\n\t\t\t\treturn tmpCallback(pError);\n\t\t\t});\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers after data is marshaled from the view.\n\t */\n\tonAfterMarshalFromView()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onAfterMarshalFromView:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers after data is marshaled from the view (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonAfterMarshalFromViewAsync(fCallback)\n\t{\n\t\tthis.onAfterMarshalFromView();\n\t\treturn fCallback();\n\t}\n\n\t/* -------------------------------------------------------------------------- */\n\t/*                     Code Section: Marshal To View                          */\n\t/* -------------------------------------------------------------------------- */\n\t/**\n\t * Lifecycle hook that triggers before data is marshaled into the view.\n\t */\n\tonBeforeMarshalToView()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onBeforeMarshalToView:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers before data is marshaled into the view (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonBeforeMarshalToViewAsync(fCallback)\n\t{\n\t\tthis.onBeforeMarshalToView();\n\t\treturn fCallback();\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers when data is marshaled into the view.\n\t */\n\tonMarshalToView()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onMarshalToView:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers when data is marshaled into the view (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonMarshalToViewAsync(fCallback)\n\t{\n\t\tthis.onMarshalToView();\n\t\treturn fCallback();\n\t}\n\n\t/**\n\t * Marshals data into the view.\n\t *\n\t * @return {boolean} - True if the operation was successful, false otherwise.\n\t */\n\tmarshalToView()\n\t{\n\t\tif (this.pict.LogNoisiness > 2)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} executing solve() function...`);\n\t\t}\n\t\tthis.onBeforeMarshalToView();\n\t\tthis.onMarshalToView();\n\t\tthis.onAfterMarshalToView();\n\t\tthis.lastMarshalToViewTimestamp = this.pict.log.getTimeStamp();\n\t\treturn true;\n\t}\n\n\t/**\n\t * Marshals data into the view (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tmarshalToViewAsync(fCallback)\n\t{\n\t\tlet tmpAnticipate = this.pict.instantiateServiceProviderWithoutRegistration('Anticipate');\n\n\n\t\t/** @type {ErrorCallback} */\n\t\tlet tmpCallback = (typeof(fCallback) === 'function') ? fCallback : null;\n\t\tif (!tmpCallback)\n\t\t{\n\t\t\tthis.log.warn(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.Name} marshalToViewAsync was called without a valid callback.  A callback will be generated but this could lead to race conditions.`);\n\t\t\ttmpCallback = (pError) =>\n\t\t\t\t{\n\t\t\t\t\tif (pError)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.log.error(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.Name} marshalToViewAsync Auto Callback Error: ${pError}`, pError);\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t}\n\t\ttmpAnticipate.anticipate(this.onBeforeMarshalToViewAsync.bind(this));\n\t\ttmpAnticipate.anticipate(this.onMarshalToViewAsync.bind(this));\n\t\ttmpAnticipate.anticipate(this.onAfterMarshalToViewAsync.bind(this));\n\n\t\ttmpAnticipate.wait(\n\t\t\t(pError) =>\n\t\t\t{\n\t\t\t\tif (this.pict.LogNoisiness > 2)\n\t\t\t\t{\n\t\t\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} marshalToViewAsync() complete.`);\n\t\t\t\t}\n\t\t\t\tthis.lastMarshalToViewTimestamp = this.pict.log.getTimeStamp();\n\t\t\t\treturn tmpCallback(pError);\n\t\t\t});\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers after data is marshaled into the view.\n\t */\n\tonAfterMarshalToView()\n\t{\n\t\tif (this.pict.LogNoisiness > 3)\n\t\t{\n\t\t\tthis.log.trace(`PictView [${this.UUID}]::[${this.Hash}] ${this.options.ViewIdentifier} onAfterMarshalToView:`);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers after data is marshaled into the view (async flow).\n\t *\n\t * @param {ErrorCallback} fCallback - The callback to call when the async operation is complete.\n\t */\n\tonAfterMarshalToViewAsync(fCallback)\n\t{\n\t\tthis.onAfterMarshalToView();\n\t\treturn fCallback();\n\t}\n\n\t/** @return {boolean} - True if the object is a PictView. */\n\tget isPictView()\n\t{\n\t\treturn true;\n\t}\n}\n\nmodule.exports = PictView;\n","module.exports={\n\t\"RenderOnLoad\": true,\n\n\t\"GridWidth\": \"auto\",\n\t\"GridRowHeight\": 40,\n\n\t\"GridBodyHeight\": \"auto\",\n\t\"GridBodyMinHeight\": 130,\n\n\t\"GridColumnMinWidth\": 50,\n\t\"GridColumnWidthResizable\": true,\n\t\"GridColumnHeightResizable\": false,\n\n\t\"GridColumnFrozenCount\": 0,\n\t\"GridColumnFrozenBorderWidth\": 3,\n\n\t\"GridScrollX\": true,\n\t\"GridScrollY\": true,\n\n\t\"GridShowDummyRows\": false,\n\t\"GridDraggableRows\": false,\n\n\t\"GridSelectionUnit\": \"cell\",\n\n\t\"DefaultRenderable\": \"TuiGrid-Wrap\",\n\t\"DefaultDestinationAddress\": \"#TuiGrid-Container-Div\",\n\n\t\"Templates\": [\n\t\t{\n\t\t\t\"Hash\": \"TuiGrid-Container\",\n\t\t\t\"Template\": \"<!-- TuiGrid-Container Rendering Soon -->\"\n\t\t}\n\t],\n\n\t\"Renderables\": [\n\t\t{\n\t\t\t\"RenderableHash\": \"TuiGrid-Wrap\",\n\t\t\t\"TemplateHash\": \"TuiGrid-Container\",\n\t\t\t\"DestinationAddress\": \"#TuiGrid-Container-Div\"\n\t\t}\n\t],\n\n\t\"TargetElementAddress\": \"#TuiGrid-Container-Div\",\n\n\t\"GridDataAddress\": false,\n\n\t\"GridData\": [\n\t\t{\n\t\t\t\"idrecord\": 1,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 1\",\n\t\t\t\"description\": \"description 1\"\n\t\t},\n\t\t{\n\t\t\t\"idrecord\": 2,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 2\",\n\t\t\t\"description\": \"description 2\"\n\t\t},\n\t\t{\n\t\t\t\"idrecord\": 3,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 3\",\n\t\t\t\"description\": \"description 3\"\n\t\t},\n\t\t{\n\t\t\t\"idrecord\": 4,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 4\",\n\t\t\t\"description\": \"description 4\"\n\t\t},\n\t\t{\n\t\t\t\"idrecord\": 5,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 5\",\n\t\t\t\"description\": \"description 5\"\n\t\t},\n\t\t{\n\t\t\t\"idrecord\": 6,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 6\",\n\t\t\t\"description\": \"description 6\"\n\t\t},\n\t\t{\n\t\t\t\"idrecord\": 7,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 7\",\n\t\t\t\"description\": \"description 7\"\n\t\t},\n\t\t{\n\t\t\t\"idrecord\": 8,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 8\",\n\t\t\t\"description\": \"description 8\"\n\t\t},\n\t\t{\n\t\t\t\"idrecord\": 9,\n\t\t\t\"entity\": \"SampleEntity\",\n\t\t\t\"name\": \"Record name 9\",\n\t\t\t\"description\": \"description 9\"\n\t\t}\n\t],\n\t\"ColumnsToSolveOnChange\": {},\n\t\"TuiColumnSchema\": [\n\t\t{\n\t\t\t\"header\": \"IDRecord\",\n\t\t\t\"name\": \"idrecord\",\n\t\t\t\"PictTriggerSolveOnChange\": true\n\t\t},\n\t\t{\n\t\t\t\"header\": \"Entity\",\n\t\t\t\"name\": \"entity\",\n\t\t\t\"PictTriggerSolveOnChange\": true\n\t\t},\n\t\t{\n\t\t\t\"header\": \"Name\",\n\t\t\t\"name\": \"name\",\n\t\t\t\"editor\": \"text\"\n\t\t},\n\t\t{\n\t\t\t\"header\": \"Description\",\n\t\t\t\"name\": \"description\",\n\t\t\t\"editor\": \"text\"\n\t\t}\n\t]\n}\n","const libPictViewClass = require('pict-view');\n\n/**\n * @typedef {typeof import('tui-grid').default} TuiGridClass\n * @typedef {import('tui-grid').default} TuiGrid\n */\n\nclass PictSectionTuiGrid extends libPictViewClass\n{\n\tconstructor(pFable, pOptions, pServiceHash)\n\t{\n\t\tlet tmpOptions = Object.assign({}, require('./Pict-Section-TuiGrid-DefaultConfiguration.json'), pOptions);\n\n\t\tsuper(pFable, tmpOptions, pServiceHash);\n\n\t\t/** @type {{ [key: string]: any }} */\n\t\tthis.services;\n\t\tthis.dateFormatter = this.fable.instantiateServiceProviderWithoutRegistration('Dates');\n\n\t\tthis.initialRenderComplete = false;\n\n\t\tthis.customFormatters = {};\n\t}\n\n\tonBeforeInitialize()\n\t{\n\t\tsuper.onBeforeInitialize();\n\n\t\t/** @type {TuiGridClass} */\n\t\tthis._tuiGridPrototype = null;\n\n\t\t/** @type {TuiGrid} */\n\t\tthis.tuiGrid = null;\n\n\t\tthis.customHeaders = require('./Pict-TuiGrid-Headers.js');\n\t\tthis.customEditors = require('./Pict-TuiGrid-Editors.js');\n\t\tthis.initializeCustomFormatters();\n\n\t\tthis.columnSchema = false;\n\t\tthis.targetElementAddress = false;\n\t\t/** @type {Array<any>} */\n\t\tthis.gridData = null;\n\n\t\treturn super.onBeforeInitialize();\n\t}\n\n\tinitializeCustomFormatters()\n\t{\n\t\tthis.customFormatters.FormatterTwoDigitNumber = (pCell) =>\n\t\t\t{\n\t\t\t\tlet tmpCellValue = Number.parseFloat(pCell.value);\n\t\t\t\tlet tmpPrecision = pCell?.decimalPrecision ?? 2;\n\t\t\t\tif (isNaN(tmpCellValue))\n\t\t\t\t{\n\t\t\t\t\treturn '';\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\treturn this.fable.Math.roundPrecise(pCell.value, tmpPrecision);\n\t\t\t\t}\n\t\t\t};\n\t\tthis.customFormatters.FormatterCurrencyNumber = (pCell) =>\n\t\t\t{\n\t\t\t\tlet tmpPrecision = pCell?.decimalPrecision ?? 2;\n\t\t\t\tlet tmpCellValue = this.fable.DataFormat.formatterDollars(pCell.value, tmpPrecision);\n\t\t\t\treturn tmpCellValue;\n\t\t\t};\n\n\t\tthis.customFormatters.FormatterRoundedNumber = (pCell) =>\n\t\t\t{\n\t\t\t\tlet tmpCellValue = Number.parseFloat(pCell.value);\n\t\t\t\tlet tmpPrecision = pCell?.decimalPrecision ?? 2;\n\t\t\t\tif (isNaN(tmpCellValue))\n\t\t\t\t{\n\t\t\t\t\treturn '';\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\treturn this.fable.Math.roundPrecise(pCell.value, tmpPrecision);\n\t\t\t\t}\n\t\t\t};\n\n\t\tthis.customFormatters.FormatterDate = (pCell) =>\n\t\t\t{\n\t\t\t\tlet tmpDate = this.fable.Dates.dayJS.utc(pCell.value);\n\t\t\t\tif (pCell.dateformat)\n\t\t\t\t{\n\t\t\t\t\treturn tmpDate.format(pCell.dateformat);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\treturn tmpDate.format();\n\t\t\t\t}\n\t\t\t};\n\t}\n\n\t/**\n\t * Construct a tuiGrid instance and connect it to the browser's dom object for the grid.  If the\n\t * prototype is not passed in, try to find a window.tui (where the library puts itself) in the window\n\t * object.\n\t *\n\t * @param {TuiGridClass} [pTuiGridPrototype] - The TuiGrid prototype class expected to be loaded in the browser\n\t * @returns\n\t */\n\tconnectTuiGridPrototype(pTuiGridPrototype)\n\t{\n\t\tif (typeof (pTuiGridPrototype) != 'undefined')\n\t\t{\n\t\t\tthis._tuiGridPrototype = pTuiGridPrototype;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.log.trace(`PICT-TuiGrid No TuiGrid Prototype defined or explicitly set; looking for it in the window object.`);\n\t\t\tif (typeof (window) != 'undefined')\n\t\t\t{\n\t\t\t\tif ((typeof (window.tui) != 'undefined') && (typeof (window.tui.Grid) != 'undefined'))\n\t\t\t\t{\n\t\t\t\t\tthis.log.trace(`PICT-TuiGrid Found TuiGrid Prototype in window.tuiGrid.`);\n\t\t\t\t\tthis.connectTuiGridPrototype(window.tui.Grid);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.log.error(`PICT-TuiGrid No TuiGrid Prototype found in window.tuiGrid.`);\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.log.error(`PICT-TuiGrid No TuiGrid Prototype found in window.tuiGrid -- window object unavailable.`);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @typedef {Object} TUIGridCellChange\n\t * @property {any} rowKey - The key of the row that changed.\n\t * @property {string} columnName - The name of the column that changed.\n\t * @property {any} value - The \"current\" value of the cell. Slightly different meaning in preChangeHandler vs changeHandler (before / after the change is applied).\n\t * @property {any} [nextValue] - The value that the cell will have after the change. Only populated in preChangeHandler (not changeHandler).\n\t * @property {any} [prevValue] - The value that the cell had before the change. Only populated in changeHandler (not preChangeHandler).\n\t */\n\n\t/**\n\t * @typedef {Object} TUIGridChangeEvent\n\t * @property {TuiGrid} instance - The TuiGrid instance that fired the event.\n\t * @property {TUIGridCellChange[]} changes - An array of objects representing the changes to grid cell values.\n\t */\n\n\t/**\n\t * Interface method for handling changesets from the TuiGrid control. Invoked before the change has been applied to the affected cells.\n\t *\n\t * * The pre-change cell value is stored in value while the new cell value is stored in nextValue.\n\t * * Any changes made to nextValue in this method will be reflected in the grid for that cell.\n\t *\n\t * @param {TUIGridChangeEvent} pChangeData - An event containing an array of objects representing the changes to grid cell values.\n\t */\n\tpreChangeHandler(pChangeData)\n\t{\n\t}\n\n\t/**\n\t * Interface method for handling changesets from the TuiGrid control. Invoked after the change has been applied to the affected cells.\n\t *\n\t * * Performs solver trigger for changes to any columns configured in \"ColumnsToSolveOnChange\" or with \"PictTriggerSolveOnChange\": true on a specific row.\n\t * * The previous cell value is stored in prevValue while the next cell value is stored in value.\n\t *\n\t * @param {TUIGridChangeEvent} pChangeData - An event object containing an array of objects representing the changes to grid cell values.\n\t */\n\tchangeHandler(pChangeData)\n\t{\n\t\tlet tmpSolverNecessary = false;\n\n\t\tfor (let i = 0; i < pChangeData.changes.length; i++)\n\t\t{\n\t\t\tlet tmpEntity = pChangeData.instance.getValue(pChangeData.changes[i].rowKey, 'entity');\n\t\t\tlet tmpIDRecord = pChangeData.instance.getValue(pChangeData.changes[i].rowKey, 'idrecord');\n\n\t\t\tthis.log.trace(`Generic Change Handler for TuiGrid Fired, Entity ${tmpEntity} IDRecord ${tmpIDRecord} setting Column [${pChangeData.changes[i].value}] to new Value [${pChangeData.changes[i].value}]`);\n\n\t\t\tif (this.options.ColumnsToSolveOnChange.hasOwnProperty(pChangeData.changes[i].columnName))\n\t\t\t{\n\t\t\t\ttmpSolverNecessary = true;\n\t\t\t}\n\t\t}\n\n\t\tif (tmpSolverNecessary)\n\t\t{\n\t\t\tthis.services.PictApplication.solve();\n\t\t}\n\t}\n\n\t/**\n\t * Lifecycle hook that triggers after the view is rendered.\n\t *\n\t * @param {import('pict-view').Renderable} pRenderable - The renderable that was rendered.\n\t * @param {string} pRenderDestinationAddress - The address where the renderable was rendered.\n\t * @param {any} pRecord - The record (data) that was used by the renderable.\n\t * @param {string} pContent - The content that was rendered.\n\t */\n\tonAfterRender(pRenderable, pRenderDestinationAddress, pRecord, pContent)\n\t{\n\t\tif (!this.initialRenderComplete)\n\t\t{\n\t\t\tthis.onAfterInitialRender();\n\t\t\tthis.initialRenderComplete = true;\n\t\t}\n\t\treturn super.onAfterRender(pRenderable, pRenderDestinationAddress, pRecord, pContent);\n\t}\n\n\tonAfterInitialRender()\n\t{\n\t\t// This is where we wire up and initialize the tuigrid control -- the initial render has put the placeholder content in place.\n\t\t// Check for a tuigrid prototype, and find it in the window object it if it doesn't exist\n\t\tif (!this._tuiGridPrototype)\n\t\t{\n\t\t\tthis.connectTuiGridPrototype();\n\t\t}\n\t\t// This is where we wire up and initialize the tuigrid control\n\t\tif (this.tuiGrid)\n\t\t{\n\t\t\t// The grid is already initialized.\n\t\t\tthis.log.error(`TuiGrid going to ${this.options.TargetElementAddress} is already initialized!`);\n\t\t\treturn false;\n\t\t}\n\n\t\tif (this.options.GridDataAddress)\n\t\t{\n\t\t\tconst tmpAddressSpace =\n\t\t\t{\n\t\t\t\tFable: this.fable,\n\t\t\t\tPict: this.fable,\n\t\t\t\tAppData: this.AppData,\n\t\t\t\tBundle: this.Bundle,\n\t\t\t\tOptions: this.options,\n\t\t\t};\n\t\t\tlet tmpAddressedData = this.fable.manifest.getValueByHash(tmpAddressSpace, this.options.GridDataAddress);\n\t\t\tif (typeof (tmpAddressedData) != 'object')\n\t\t\t{\n\t\t\t\tthis.log.error(`Address for GridData [${this.options.GridDataAddress}] did not return an object; it was a ${typeof (tmpAddressedData)}.`);\n\t\t\t\tthis.gridData = [];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.gridData = JSON.parse(JSON.stringify(tmpAddressedData));\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.gridData = [];\n\t\t}\n\n\t\tlet tmpTargetElementSet = this.services.ContentAssignment.getElement(this.options.TargetElementAddress);\n\t\tif (tmpTargetElementSet.length < 1)\n\t\t{\n\t\t\tthis.log.error(`Could not find target element [${this.options.TargetElementAddress}] for TuiGrid!  Rendering won't function properly.`);\n\t\t\tthis.targetElement = false;\n\t\t\treturn false;\n\t\t}\n\n\t\t// Just go for the first one.\n\t\tthis.targetElement = tmpTargetElementSet[0];\n\n\t\t// Check to see if there are any custom formatters.\n\t\tthis.columnSchema = this.options.TuiColumnSchema;\n\t\t// Setup the solver and custom schema handlers.\n\t\tfor (let i = 0; i < this.columnSchema.length; i++)\n\t\t{\n\t\t\tlet tmpColumn = this.columnSchema[i];\n\t\t\t// If this bit is set on a column, the Form solver will trigger each time a change happens to that column.\n\t\t\tif (tmpColumn.PictTriggerSolveOnChange)\n\t\t\t{\n\t\t\t\tthis.options.ColumnsToSolveOnChange[tmpColumn.name] = tmpColumn;\n\t\t\t}\n\t\t\t// Look to see if there is an internal formatter that matches the type\n\t\t\tif ((tmpColumn.hasOwnProperty('formatter')) && (this.customFormatters.hasOwnProperty(tmpColumn.formatter)))\n\t\t\t{\n\t\t\t\t// Assign our special formatter to the column.\n\t\t\t\ttmpColumn.formatter = this.customFormatters[tmpColumn.formatter];\n\t\t\t}\n\t\t\t// Look to see if there is an editor stanza\n\t\t\tif (tmpColumn.hasOwnProperty('editor'))\n\t\t\t{\n\t\t\t\t// Look to see if there is an internal editor that matches the type\n\t\t\t\tif ((tmpColumn.editor.hasOwnProperty('type'))\n\t\t\t\t\t&& (typeof (tmpColumn.editor.type) == 'string')\n\t\t\t\t\t&& (this.customEditors.hasOwnProperty(tmpColumn.editor.type)))\n\t\t\t\t{\n\t\t\t\t\t// Assign our special editor to the column.\n\t\t\t\t\ttmpColumn.editor.type = this.customEditors[tmpColumn.editor.type];\n\t\t\t\t}\n\n\t\t\t\t// Look to see if there is an internal editor that matches the type\n\t\t\t\tif ((tmpColumn.editor.hasOwnProperty('options'))\n\t\t\t\t\t&& (typeof (tmpColumn.editor.options) == 'object')\n\t\t\t\t\t&& (tmpColumn.editor.options.hasOwnProperty('listItems'))\n\t\t\t\t\t&& (typeof (tmpColumn.editor.options.listItems) == 'string'))\n\t\t\t\t{\n\t\t\t\t\t// Look for this address!  For the Record object, we will pass in the options.\n\t\t\t\t\tconst tmpAddressSpace =\n\t\t\t\t\t{\n\t\t\t\t\t\tFable: this.fable,\n\t\t\t\t\t\tPict: this.fable,\n\t\t\t\t\t\tAppData: this.AppData,\n\t\t\t\t\t\tBundle: this.Bundle,\n\t\t\t\t\t\tOptions: this.options,\n\t\t\t\t\t};\n\t\t\t\t\tlet tmpListItems = this.fable.manifest.getValueByHash(tmpAddressSpace, tmpColumn.editor.options.listItems);\n\t\t\t\t\tif (typeof (tmpListItems) == 'object')\n\t\t\t\t\t{\n\t\t\t\t\t\ttmpColumn.editor.options.listItems = tmpListItems;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.log.warn(`Pict TuiGrid for column [${tmpColumn.name}] had [${tmpColumn.editor.options.listItems}] as a listItems address, but it didn't return an object.  It was a [${typeof (tmpListItems)}].  Setting to empty list.`);\n\t\t\t\t\t\ttmpColumn.editor.options.listItems = [];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.gridSettings = {\n\t\t\t\tdata: this.gridData,\n\t\t\t\tel: this.targetElement,\n\t\t\t\tcolumns: this.columnSchema,\n\n\t\t\t\t// This is no bueno, yo\n\t\t\t\tusageStatistics: false,\n\n\t\t\t\tscrollY: this.options.GridScrollY,\n\n\t\t\t\tcolumnOptions:\n\t\t\t\t{\n\t\t\t\t\tresizable: this.options.GridColumnWidthResizable\n\t\t\t\t}\n\t\t\t};\n\n\t\tthis.customConfigureGridSettings();\n\n\t\tlet libTuiGrid = this._tuiGridPrototype;\n\t\tthis.tuiGrid = new libTuiGrid(this.gridSettings);\n\t\tthis.tuiGrid.on('beforeChange', (pChangeData) =>\n\t\t{\n\t\t\t//TODO: the exported event type from tui-grid is incomplete so mask it here\n\t\t\t/** @type {any} */\n\t\t\tconst tmpChangeData = pChangeData;\n\t\t\tthis.preChangeHandler(tmpChangeData);\n\t\t});\n\t\tthis.tuiGrid.on('afterChange', (pChangeData) =>\n\t\t{\n\t\t\t//TODO: the exported event type from tui-grid is incomplete so mask it here\n\t\t\t/** @type {any} */\n\t\t\tconst tmpChangeData = pChangeData;\n\t\t\tthis.changeHandler(tmpChangeData);\n\t\t});\n\t}\n\n\t/**\n\t * This is expected to be overloaded with anything that needs to be added to the grid configuration\n\t * before the Toast UI Grid component is initialized in the browser.\n\t */\n\tcustomConfigureGridSettings ()\n\t{\n\t\t// This can be overloaded to tweak up the this.gridSettings\n\t}\n\n\t/**\n\t * Lookup a specific record in the toast ui grid data set by value and pull the value from the map into the browser.\n\t *\n\t * This function exists because if we mutate data in the map of plain javascript records tuigrid\n\t * manages, it doesn't automatically refresh the UI.  From reading the TUIGrid documentation, this\n\t * is because they don't want to refresh until all the data has changed.\n\t *\n\t * The best practice has been to have a hidden column behind the tuigrid that maps the correct entity\n\t * value set to the record in the map (e.g. IDRecord in one column and Entity in another).\n\t *\n\t * @param {string} pCellColumnToBeSet - the Column hash to set\n\t * @param {string} pCellValueToSet - Value to be set\n\t * @param {string} pLookupValue - the Value to look up in tuigrid\n\t * @param {string} pLookupColumn - the key of the column in the tuigrid record (which are plain javascript objects defined by the tuigrid config)\n\t * @return {void}\n\t */\n\tSetGridValue(pCellColumnToBeSet, pCellValueToSet, pLookupValue, pLookupColumn)\n\t{\n\t\tif (typeof (pLookupValue) == 'undefined')\n\t\t{\n\t\t\tconsole.log(`Could not set grid value [${pCellColumnToBeSet}] = [${pCellValueToSet}] looked up by [${pLookupColumn}]::[${pLookupValue}].  No valid lookup value!`);\n\t\t\treturn;\n\t\t}\n\n\t\tif (!this.tuiGrid)\n\t\t{\n\t\t\tthis.log.warn(`Could not set grid value [${pCellColumnToBeSet}] = [${pCellValueToSet}] looked up by [${pLookupColumn}]::[${pLookupValue}].  No valid grid!`);\n\t\t\treturn;\n\t\t}\n\n\t\tconst tmpData = this.tuiGrid.getData();\n\n\t\tfor (let i = 0; i < tmpData.length; i++)\n\t\t{\n\t\t\tconst tmpRecord = tmpData[i];\n\n\t\t\tif (tmpRecord[pLookupColumn] == pLookupValue)\n\t\t\t{\n\t\t\t\tthis.tuiGrid.setValue(i, pCellColumnToBeSet, pCellValueToSet);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Lookup a specific record in the toast ui grid data set by row key and pull in a column.\n\t *\n\t * This function exists because if we mutate data in the map of plain javascript records tuigrid\n\t * manages, it doesn't automatically refresh the UI.  From reading the TUIGrid documentation, this\n\t * is because they don't want to refresh until all the data has changed.\n\t *\n\t *\n\t * @param {string} pCellColumnToBeSet - the Column hash to set\n\t * @param {string} pCellValueToSet - Value to be set\n\t * @param {string} pRowKey - the key of the row to be set\n\t * @return {boolean}\n\t */\n\tSetGridValueByRowKey(pCellColumnToBeSet, pCellValueToSet, pRowKey)\n\t{\n\t\tif (typeof (pRowKey) == 'undefined')\n\t\t{\n\t\t\tthis.log.error(`Could not set grid value [${pCellColumnToBeSet}] = [${pCellValueToSet}] looked up by row key [${pRowKey}].  No valid row key!`);\n\t\t\treturn false;\n\t\t}\n\n\t\tif (!this.tuiGrid)\n\t\t{\n\t\t\tthis.log.warn(`Could not set grid value [${pCellColumnToBeSet}] = [${pCellValueToSet}] looked up by row key [${pRowKey}].  No valid grid!`);\n\t\t\treturn false;\n\t\t}\n\n\t\tthis.tuiGrid.setValue(pRowKey, pCellColumnToBeSet, pCellValueToSet);\n\t\treturn true;\n\t}\n}\n\nmodule.exports = PictSectionTuiGrid;\n\n/** @type {Record<string, any>} */\nmodule.exports.default_configuration = require('./Pict-Section-TuiGrid-DefaultConfiguration.json');\n","// Custom number editor class with an option for precision\nclass tuiCustomEditorNumber\n{\n\tconstructor(pProperties)\n\t{\n\t\tconst tmpElement = document.createElement('input');\n\n\t\tconst decimalPrecision = (pProperties.columnInfo.editor.options.decimalPrecision) ? pProperties.columnInfo.editor.options.decimalPrecision : 3;\n\n\t\ttmpElement.type = 'number';\n\t\ttmpElement.value = String(pProperties.value);\n\t\ttmpElement.oninput = (pElement) =>\n\t\t{\n\t\t\tif (pElement.target instanceof HTMLInputElement)\n\t\t\t{\n\t\t\t\tconst tmpCastNumber = parseFloat(pElement.target.value).toFixed(decimalPrecision).toString()\n\t\t\t\tif (tmpCastNumber.length < parseFloat(pElement.target.value).toString().length)\n\t\t\t\t{\n\t\t\t\t\tpElement.target.value = tmpCastNumber;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tthis.Element = tmpElement;\n\t}\n\n\tgetElement()\n\t{\n\t\treturn this.Element;\n\t}\n\n\tgetValue()\n\t{\n\t\treturn this.Element.value;\n\t}\n\n\tmounted()\n\t{\n\t\tthis.Element.select();\n\t}\n}\n\nmodule.exports = tuiCustomEditorNumber;\n","// Custom number editor class with an option for precision\nclass tuiCustomEditorText\n{\n\tconstructor(pProperties)\n\t{\n\t\tconst tmpElement = document.createElement('input');\n\n\t\ttmpElement.type = 'text';\n\t\ttmpElement.value = String(pProperties.value);\n\t\ttmpElement.placeholder =  pProperties.columnInfo.editor.options.placeholder || '';\n\t\ttmpElement.pattern = pProperties.columnInfo.editor.options.pattern || '';\n\t\ttmpElement.minLength = pProperties.columnInfo.editor.options.minLength || '';\n\t\ttmpElement.maxLength = pProperties.columnInfo.editor.options.maxLength || '';\n\t\ttmpElement.required = pProperties.columnInfo.editor.options.required || '';\n\n\t\tthis.Element = tmpElement;\n\t}\n\n\tgetElement()\n\t{\n\t\treturn this.Element;\n\t}\n\n\tgetValue()\n\t{\n\t\treturn this.Element.value;\n\t}\n\n\tmounted()\n\t{\n\t\tthis.Element.select();\n\t}\n}\n\nmodule.exports = tuiCustomEditorText;\n","module.exports =\n{\n\tEditorNumber: require('./Pict-TuiGrid-Editor-Number.js'),\n\tEditorText: require('./Pict-TuiGrid-Editor-Text.js'),\n};\n","// Custom column header where the header is hidden\nclass tuiCustomColumnHeaderNone\n{\n\tconstructor()\n\t{\n\t\tlet tmpElement = document.createElement('input');\n\t\ttmpElement.type = 'hidden';\n\t\ttmpElement.value = '';\n\t\tthis.Element = tmpElement;\n\t}\n\n\tgetElement()\n\t{\n\t\treturn this.Element;\n\t}\n\n\trender()\n\t{\n\t\t// Noop!\n\t}\n}\n\nmodule.exports =\n{\n\tCustomColumnHeaderNone: tuiCustomColumnHeaderNone,\n};\n"]}